# Comparisons {#sec-chapter}

```{r}
#| echo: false
#| message: false
#| include: false

suppressWarnings(suppressMessages(source("_common.R")))
```


> "At the heart of quantitative reasoning is a single question: Compared to what?"<br>-- Edward Tufte

Comparing things is one of the most common tasks in data visualization. Of course, some charts make certain comparisons easier than others. In this chapter, we'll look into different strategies for making comparisons.

## Comparing to a Reference

For this section, we'll be using this data frame:

```{r}
gapminder_americas <- gapminder %>%
  filter(continent == "Americas", year == 2007) %>%
  mutate(country = fct_reorder(country, lifeExp))
```

Using reference lines helps to add context to chart. For example, consider the following chart of life expectancy in the Americas:

```{r}
#| label: life-exp-dots
#| fig-height: 6.5
#| fig-width: 6
#| out-width: 400px
#| fig-align: center

life_expectancy_dots <- gapminder_americas %>% 
  ggplot() +
  geom_point(
    aes(x = lifeExp, y = country),
    color = 'steelblue', size = 2.5
  ) +
  theme_minimal_vgrid(font_size = 18) +
  labs(
    x = 'Life expectancy (years)',
    y = 'Country'
  )

life_expectancy_dots
```

We can add more context to the chart by adding a mean life expectancy reference line:

```{r}
#| label: life-exp-dots-mean
#| fig-height: 6.5
#| fig-width: 6
#| out-width: 400px
#| fig-align: center

life_expectancy_dots +
  geom_vline(
    xintercept = mean(gapminder_americas$lifeExp),
    color = 'red', linetype = 'dashed'
  ) +
  annotate(
    'text', x = 73.2, y = 'Puerto Rico',
    color = 'red', hjust = 1,
    label = 'Mean Life\nExpectancy'
  )
```

Here we're using `geom_vline()` to add a vertical line and `annotate()` to add text.

You can also compute the difference from the mean and make zero the reference line. To do so, we first compute the difference from the mean and then define a variable to use for the color to denote whether the country's life expectancy is above or below the mean:

```{r}
gapminder_diverging <- gapminder_americas %>%
  mutate(
    # Subtract the mean
    lifeExp = lifeExp - mean(lifeExp),
    # Define the fill color
    color = ifelse(lifeExp > 0, 'Above', 'Below')
  )
```

Then we can use a lollipop chart or bar chart to visualize the difference from the mean:

::: {.panel-tabset}

## Lollipop chart

```{r}
#| label: life-exp-dots-diverging
#| fig-height: 6.5
#| fig-width: 6
#| out-width: 400px
#| fig-align: center

gapminder_diverging %>% 
  ggplot() +
  geom_segment(
    aes(x = 0, xend = lifeExp, y = country, yend = country, color = color)
  )  +
  geom_point(
    aes(x = lifeExp, y = country, color = color),
    size = 2.5
  ) +
  scale_color_manual(values = c('steelblue', 'red')) +
  theme_minimal_vgrid() +
  theme(legend.position = 'none') +
  labs(
    x = 'Difference from mean life expectancy (years)',
    y = 'Country'
  )
```

## Bar chart

```{r}
#| label: life-exp-bars-diverging
#| fig-height: 6.5
#| fig-width: 6
#| out-width: 400px
#| fig-align: center

gapminder_diverging %>% 
  ggplot() +
  geom_col(
    aes(x = lifeExp, y = country, fill = color),
    width = 0.7, alpha = 0.8
  ) +
  scale_fill_manual(values = c('steelblue', 'red')) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid() +
  theme(legend.position = 'none') +
  labs(
    x = 'Difference from mean life expectancy (years)',
    y = 'Country'
  )
```

:::

## Comparing Across Multiple Categories

Neither of these two charts are great at clearly comparing multiple categories. They both make it difficult to compare elements across the categories.

::: {layout-ncol=2}

```{r}
#| label: diamonds_bars_stacked
#| echo: false
#| fig-height: 5

ggplot(diamonds, aes(clarity, fill=cut, group=cut)) +
    geom_bar(stat="count", position="stack") +
    scale_y_continuous(expand = expand_scale(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```

```{r}
#| label: diamonds_bars_dodged
#| echo: false
#| fig-height: 5

ggplot(diamonds, aes(clarity, fill=cut, group=cut)) +
    geom_bar(stat="count", position="dodge") +
    scale_y_continuous(expand = expand_scale(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```

:::

When comparing across **multiple categories** consider **Parallel coordinates charts** or **faceting**.

### Parallel coordinates charts

These charts are great for comparing multiple categories. They're essentially line charts that are stacked on top of each other, which you can easily make with `geom_line()` and `geom_point()`:

```{r}
#| label: diamonds-parallel
#| fig-height: 5
#| fig-width: 7
#| out-width: 500px

diamonds %>%
  count(clarity, cut) %>%
  ggplot(aes(x = clarity, y = n,color = cut, group = cut)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(limits = c(0, 5100)) +
  theme_half_open(font_size = 18) +
  labs(y = "Count")
```

### Faceting

Facets are great for comparing multiple categories. They're essentially small multiples of a repeated chart that allows to compare elements both within the individual facets as well as across the facets.

Here is an effective example of faceting from [Financial Times](https://www.ft.com/coronavirus-latest) on the early days of the COVID-19 pandemic:

<center>
<img src="images/ft-coronavirus.jpg" width=700>
</center>

Faceting is easy to achieve in ggplot2 with `facet_wrap()`:

```{r}
#| label: diamonds-facet
#| fig-height: 3
#| fig-width: 18

diamonds %>%
  count(clarity, cut) %>%
  ggplot() +
  geom_col(aes(x = clarity, y = n), width = 0.7) +
  facet_wrap(vars(cut), nrow = 1) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid(font_size = 16)
```

You can change the `nrow` or `ncol` arguments to change the layout of the facets, e.g.:

```{r}
#| label: diamonds-facet-ncol
#| fig-height: 8
#| fig-width: 8
#| out-width: 400px

diamonds %>%
  count(clarity, cut) %>%
  mutate(n = n / 1000) %>%
  ggplot() +
  geom_col(aes(x = clarity, y = n), width = 0.7) +
  facet_wrap(vars(cut), ncol = 2) +
  coord_flip() +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid(font_size = 16) +
  labs(y = "Count (thousands)")
```

## Comparing Two Things 

### Dodged bars

In this section, we'll use this dataset comparing milk production in California and Wisconsin in 1970 and 2017:

```{r}
milk_compare <- milk_production %>%
  filter(year %in% c(1970, 2017)) %>%
  mutate(
    state = fct_other(state, keep = c('California', 'Wisconsin'))
  ) %>%
  group_by(year, state) %>%
  summarise(
    milk_produced = sum(milk_produced) / 10^9
  )

milk_compare
```

When comparing only two things, dodged bars are a good starting point. This can be achieved with `geom_col()` and `position = 'dodge'`:

```{r}
#| label: milk-compare-dodged
#| fig-height: 5
#| fig-width: 7
#| out-width: 500px
#| fig-align: center

milk_compare %>% 
  ggplot() +
  geom_col(
    aes(x = milk_produced, y = state, fill = as.factor(year)),
    width = 0.7, alpha = 0.8,
    position = 'dodge'
  ) +
  scale_fill_manual(
    values = c('grey', 'steelblue'),
    guide  = guide_legend(reverse = TRUE)
  ) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid() +
  labs(
    x = 'Milk produced (billion lbs)',
    y = NULL,
    fill = 'Year'
  )
```

Notice in this example we only have 2 categories in the legend. This is not by accident! In general, **avoid putting >2 categories in legend.** For example, the same chart could be made with the states in the legend and year on the axis, but that would put three categories in the legend:

```{r}
#| label: milk-compare-dodged-bad
#| fig-height: 5
#| fig-width: 7
#| out-width: 500px
#| fig-align: center

milk_compare %>% 
  ggplot() +
  geom_col(
    aes(x = as.factor(year), y = milk_produced, fill = state),
    width = 0.7, alpha = 0.8,
    position = 'dodge'
  ) +
  scale_fill_manual(values = c('grey', 'steelblue', 'sienna')) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid(font_size = 16) +
  labs(
    x = 'Year',
    y = 'Milk produced (billion lbs)'
  )
```

This is worse because it requires the reader to look back and forth between the legend and the chart, which is easier to do with only two categories.

Of course, you can also **use facets to get rid of the legend!**

```{r}
#| label: milk-compare-dodged-facet
#| fig-height: 5
#| fig-width: 7
#| out-width: 500px
#| fig-align: center

milk_compare %>%
  ggplot() +
  geom_col(
    aes(x = as.factor(year), y = milk_produced, fill = as.factor(year)),
    width = 0.7, alpha = 0.8
  ) +
  scale_fill_manual(values = c('grey', 'steelblue')) +
  facet_wrap(~state) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid(font_size = 18) +
  panel_border() +
  theme(legend.position = 'none') +
  labs(
    x = 'Year',
    y = 'Milk produced (billion lbs)'
  )
```

### Bullet charts

Bullet charts are also effective for comparing **2** things, in partiuclar if one of the two things is some sort of target or threshold value that you wish to compare the other thing to. For example:

```{r}
#| label: milk-compare-bullet
#| fig-height: 5.5
#| fig-width: 8
#| out-width: 500px
#| fig-align: center

milk_compare %>%
  pivot_wider(
    names_from = year,
    values_from =  milk_produced
  ) %>%
  ggplot() +
  geom_col(
    aes(x = `1970`, y = state, fill = '1970'),
    width = 0.7
  ) +
  geom_col(
    aes(x = `2017`, y = state, fill = '2017'),
    width = 0.3
  ) +
  scale_fill_manual(values = c('grey', 'black')) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid(font_size = 18) +
  labs(
    x = 'Milk produced (billion lbs)',
    y = NULL,
    fill = "Year"
  )
```

## Comparing **Two** Things Across **More Than 2 Categories**

While dodged bars are good for comparing 2 things, using them for 2 things across **more than 2** categories can get confusing. Let's see an example with 10 categories:

```{r}
#| label: milk_compare_toomany

top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10) %>% 
    pull(state)

milk_compare_toomany <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states
  ) %>%
  mutate(
    milk_produced = milk_produced / 10^9,
    state = fct_reorder(state, milk_produced)
  )

milk_compare_toomany
```

The chart below compares 2 time periods, but across **10** categories, which is just too overwhelming to make sense of.

```{r}
#| label: milk-compare-dodged-toomany
#| fig-height: 6
#| fig-width: 8
#| out-width: 500px
#| fig-align: center

milk_compare_toomany %>% 
  ggplot() +
  geom_col(
    aes(x = milk_produced, y = state, fill = as.factor(year)),
    width = 0.7, alpha = 0.8,
    position = 'dodge'
  ) +
  scale_fill_manual(
    values = c('grey', 'steelblue'),
    guide  = guide_legend(reverse = TRUE)
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme_minimal_vgrid(font_size = 18) +
  labs(
    x    = 'Milk produced (billion lbs)',
    y    = NULL,
    fill = 'Year'
  )
```

Two strategies to address this include:

::: {layout-ncol=2}

**Dumbbell charts**, for highlighting **magnitudes** across two periods / groups

```{r}
#| label: milk-dumbbell-chart
#| fig-height: 5
#| fig-width: 5.5
#| echo: false
#| fig-align: center

milk_summary_dumbbell <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state, year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9
  )

milk_summary_dumbbell %>% 
  ggplot(aes(x = milk_produced, y = state, group = state)) +
  geom_line(color = 'lightblue', size = 1) +
  geom_point(aes(color = year), size = 2.5) +
  scale_color_manual(values = c('lightblue', 'steelblue')) +
  theme_minimal_vgrid() +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()) +
  labs(x = 'Milk produced (billion lbs)',
       y = 'State',
       color = 'Year',
       title = 'Top 10 milk producing states',
       subtitle = "(1970 - 2017)")
```

**Slope charts**, for highlighting _change_ in **rankings** across two periods / groups

```{r}
#| label: milk-slope-chart
#| fig-height: 5
#| fig-width: 5.5
#| echo: false
#| fig-align: center

milk_summary_slope <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state,
      year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9,
    # Define line color
    lineColor = if_else(
      state == 'California', 'CA', 'other'),
    # Make labels
    label = paste(state, ' (',
                  round(milk_produced), ')'),
    label_left = ifelse(year == 1970, label, NA),
    label_right = ifelse(year == 2017, label, NA))

milk_summary_slope %>% 
  ggplot(aes(x = year, y = milk_produced, group = state)) +
  geom_line(aes(color = lineColor), size = 1) +
  # Add 1970 labels (left side)
  geom_text_repel(aes(label = label_left),
                  hjust = 1, nudge_x = -0.05,
                  direction = 'y',
                  segment.color = 'grey') +
  # Add 2017 labels (right side)
  geom_text_repel(aes(label = label_right),
                  hjust = 0, nudge_x = 0.05,
                  direction = 'y',
                  segment.color = 'grey') +
  # Move year labels to top, modify line colors
  scale_x_discrete(position = 'top') +
  scale_color_manual(values = c('red', 'black')) +
  # Annotate & adjust theme
  labs(x = NULL,
        y = 'Milk produced (billion lbs)',
        title = 'Top 10 milk producing states (1970 - 2017)') +
  theme_minimal_grid() +
  theme(panel.grid  = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = 'none')
```
 
:::

### How to make a **Dumbbell chart**

First, create data frame for plotting.

```{r}
#| label: milk-summary-dumbbell2

top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10) %>% 
    pull(state)
milk_summary_dumbbell <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state, year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9
  )
  
milk_summary_dumbbell
```

Then make lines (note the `group` variable):
```{r}
#| label: milk-dumbbell-chart1
#| fig-height: 6
#| fig-width: 6
#| out-width: 500px
#| fig-align: center

milk_summary_dumbbell %>% 
  ggplot(aes(x = milk_produced, y = state)) +
  geom_line(
    aes(group = state),
    color = 'lightblue', size = 1
  )
```

Add points (note the `color` variable):

```{r}
#| label: milk-dumbbell-chart2
#| fig-height: 6
#| fig-width: 6
#| out-width: 500px
#| fig-align: center

milk_summary_dumbbell %>% 
  ggplot(aes(x = milk_produced, y = state)) +
  geom_line(
    aes(group = state),
    color = 'lightblue', size = 1
  ) +
  geom_point(aes(color = year), size = 2.5)
```

Change the colors:

```{r}
#| label: milk-dumbbell-chart3
#| fig-height: 6
#| fig-width: 6
#| out-width: 500px
#| fig-align: center

milk_summary_dumbbell %>% 
  ggplot(aes(x = milk_produced, y = state)) +
  geom_line(
    aes(group = state),
    color = 'lightblue', size = 1
  ) +
  geom_point(aes(color = year), size = 2.5) +
  scale_color_manual(values = c('lightblue', 'steelblue'))
```

Finally, adjust the theme and annotate:

```{r}
#| label: milk-dumbbell-chart4
#| fig-height: 6
#| fig-width: 6
#| out-width: 500px
#| fig-align: center

milk_summary_dumbbell %>% 
  ggplot(aes(x = milk_produced, y = state)) +
  geom_line(
    aes(group = state),
    color = 'lightblue', size = 1
  ) +
  geom_point(aes(color = year), size = 2.5) +
  scale_color_manual(values = c('lightblue', 'steelblue')) +
  theme_minimal_vgrid() +
  # Remove y axis line and tick marks
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  labs(
    x = 'Milk produced (billion lbs)',
    y = 'State',
    color = 'Year',
    title = 'Top 10 milk producing states',
    subtitle = '(1970 - 2017)'
  )
```

### How to make a **Slope chart**

First, create data frame for plotting:

```{r}
#| label: milk-summary-slope2
#| eval: false

top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10) %>% 
    pull(state)
milk_summary_slope <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state, year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9,
    # Define line color
    lineColor = if_else(state == 'California', 'CA', 'other'),
    # Make labels
    label = paste(state, ' (', round(milk_produced), ')'),
    label_left = ifelse(year == 1970, label, NA),
    label_right = ifelse(year == 2017, label, NA)
  )
```

```{r}
#| echo: false

milk_summary_slope %>%
    select(state, year, milk_produced, label, lineColor)
```

Start with a line plot (note the `group` variable):

```{r}
#| label: milk-slope-chart-1
#| fig-height: 6
#| fig-width: 6
#| fig-align: center
#| out-width: 500px

milk_summary_slope %>% 
  ggplot(aes(x = year, y = milk_produced, group = state)) +
  geom_line(aes(color = lineColor))
```

Add labels, and justify (right or left) using `hjust`:

<center>
<div style="width: 300px;">

Justification | `hjust`
--------------|-------
Right         | 0
Center        | 0.5
Left          | 1

</div>
</center>

```{r}
#| label: milk-slope-chart-2
#| fig-height: 6
#| fig-width: 6
#| out-width: 500px
#| fig-align: center

milk_summary_slope %>% 
  ggplot(aes(x = year, y = milk_produced, group = state)) +
  geom_line(aes(color = lineColor)) +
  # Add 1970 labels (left side)
  geom_text(
    aes(label = label_left),
    hjust = 1, nudge_x = -0.05
  ) +
  # Add 2017 labels (right side)
  geom_text(
    aes(label = label_right),
    hjust = 0, nudge_x = 0.05
  )
```

One common issue you'll run into is overlapping labels, like you see in the lower-left corner in the chart above. But don't worry - **ggrepel** is here to save the day!

<center>
<img src="images/horst_monsters_ggrepel.jpg" width=500>
</center>

<aside>
Artwork by [@allison_horst](https://twitter.com/allison_horst)
</aside>

Now we can align labels so they don't overlap:

```{r}
#| label: milk-slope-chart-3
#| fig-height: 6
#| fig-width: 7
#| fig-align: center
#| out-width: 500px

library(ggrepel)

milk_summary_slope %>% 
  ggplot(aes(x = year, y = milk_produced, group = state)) +
  geom_line(aes(color = lineColor)) +
  # Add 1970 labels (left side)
  geom_text_repel(
    aes(label = label_left),
    hjust = 1, nudge_x = -0.05,
    direction = 'y', segment.color = 'grey'
  ) +
  # Add 2017 labels (right side)
  geom_text_repel(
    aes(label = label_right),
    hjust = 0, nudge_x = 0.05,
    direction = 'y', segment.color = 'grey'
  )
```

Adjust colors:

```{r}
#| label: milk-slope-chart-4
#| fig-height: 6
#| fig-width: 7
#| out-width: 500px
#| fig-align: center

milk_summary_slope %>% 
  ggplot(aes(x = year, y = milk_produced, group = state)) +
  geom_line(aes(color = lineColor)) +
  geom_text_repel(
    aes(label = label_left),
    hjust = 1, nudge_x = -0.05,
    direction = 'y', segment.color = 'grey'
  ) +
  geom_text_repel(
    aes(label = label_right),
    hjust = 0, nudge_x = 0.05,
    direction = 'y', segment.color = 'grey'
  ) +
  # Move year labels to top, modify line colors
  scale_x_discrete(position = 'top') +
  scale_color_manual(values = c('red', 'black'))
```

Adjust the theme and annotate:

```{r}
#| label: milk-slope-chart-5
#| fig-height: 6
#| fig-width: 6
#| out-width: 500px
#| fig-align: center

milk_summary_slope %>% 
  ggplot(aes(x = year, y = milk_produced, group = state)) +
  geom_line(aes(color = lineColor)) +
  # Add 1970 labels (left side)
  geom_text_repel(
    aes(label = label_left),
    hjust = 1, nudge_x = -0.05,
    direction = 'y', segment.color = 'grey'
  ) +
  # Add 2017 labels (right side)
  geom_text_repel(aes(label = label_right),
    hjust = 0, nudge_x = 0.05,
    direction = 'y', segment.color = 'grey'
  ) +
  # Move year labels to top, modify line colors
  scale_x_discrete(position = 'top') +
  scale_color_manual(values = c('red', 'black')) +
  # Annotate & adjust theme
  labs(
    x = NULL,
    y = 'Milk produced (billion lbs)',
    title = 'Top 10 milk producing states (1970 - 2017)'
  ) +
  theme_minimal_grid() +
  theme(
    panel.grid  = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    legend.position = 'none'
  )
```

## Comparing Distributions

Overlapping histograms tend to have issues.

```{r}
#| label: marathon_histogram_overlap
#|#|  fig-height: 5
#| fig-width: 7
#| fig-align: center

ggplot(marathon) +
  geom_histogram(aes(x = Age, fill = `M/F`),
                 alpha = 0.7, color = 'white',
                 position = 'identity') +
  scale_fill_manual(values = c('sienna', 'steelblue')) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid()
```
</div>

<div style="flex: 1; margin-right: 10px;">
**Slightly better**
```{r marathon_density_overlap, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
ggplot(marathon, aes(x = Age, y = ..count..)) +
  geom_density(aes(fill = `M/F`), alpha = 0.7) +
  scale_fill_manual(values = c('sienna', 'steelblue')) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid()
```

Charts good for overlapping when the number of categories is **small**:

**Density facets**

```{r}
#| label: marathon_density_facet
#|#|  fig-height: 3
#| fig-width: 7
#| fig-align: center

base <- ggplot(marathon, aes(x = Age, y = ..count..)) +
  geom_density(fill = 'grey', alpha = 0.7) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid()

male <- base +
  geom_density(data = marathon %>% filter(`M/F` == 'M'),
               aes(fill = `M/F`), alpha = 0.7) +
  scale_fill_manual(values = 'steelblue') +
  theme(legend.position = 'none')

female <- base +
  geom_density(data = marathon %>% filter(`M/F` == 'F'),
               aes(fill = `M/F`), alpha = 0.7) +
  scale_fill_manual(values = 'sienna') +
  theme(legend.position = 'none')

plot_grid(male, female, labels = c('Male', 'Female'))
```

**Diverging histograms**

```{r}
#| label: marathon_diverging_histograms
#| fig-height: 5
#| fig-width: 7
#| fig-align: center

ggplot(marathon, aes(x = Age)) +
    # Add histogram for Female runners:
    geom_histogram(data = marathon %>%
                       filter(`M/F` == 'F'),
                   aes(fill = `M/F`, y=..count..),
                   alpha = 0.7, color = 'white') +
    # Add negative histogram for Male runners:
    geom_histogram(data = marathon %>%
                       filter(`M/F` == 'M'),
                   aes(fill = `M/F`, y=..count..*(-1)),
                   alpha = 0.7, color = 'white') +
    scale_fill_manual(values = c('sienna', 'steelblue')) +
    coord_flip() +
    theme_minimal_hgrid() +
    labs(fill = 'Gender',
         y = 'Count')
```

Charts good for overlapping when the number of categories is **large**:

**Boxplot**

```{r}
#| label: college_boxplot
#| fig-height: 5
#| fig-width: 7
#| fig-align: center

college_summary <- college_all_ages %>%
    mutate(
        major_category = fct_reorder(major_category, median))

ggplot(college_summary) +
    geom_boxplot(aes(x = major_category, y = median)) +
    coord_flip() +
    theme_minimal_vgrid() +
    labs(x = 'Major category',
         y = 'Median income ($)')
```

**Ridgeplot**

```{r}
#| label: college_ridgeplot
#|#|  fig-height: 5
#| fig-width: 7
#| fig-align: center

ggplot(college_summary) +
  geom_density_ridges(aes(x = median, y = major_category),
                      scale = 4, alpha = 0.7) +
  scale_y_discrete(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) +
  coord_cartesian(clip = "off") +
  theme_ridges() +
  labs(x = 'Median income ($)',
       y = 'Major category')
```

### How to make density facets

You can use `facet_wrap()`, but you won't get the full density overlay.

```{r}
#| label: density_facet_nofull
#| fig-height: 3
#| fig-width: 7
#| fig-align: center

ggplot(marathon,
       aes(x = Age, y = ..count..,
           fill = `M/F`)) +
    geom_density(alpha = 0.7) +
    facet_wrap(vars(`M/F`)) +
    scale_fill_manual(
        values = c('sienna', 'steelblue')) +
    scale_y_continuous(
        expand = expansion(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```

If you want the full density overlay, you have to hand-make the facets.

Make the full density plot first.

```{r}
base <- ggplot(marathon,
               aes(x = Age, y = ..count..)) +
    geom_density(fill = 'grey', alpha = 0.7) +
    scale_y_continuous(
        expand = expansion(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```
```{r density_facet_base, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
base
```

Then, separately create each sub-plot.
```{r}
#| label: density_facet_male
#| fig-height: 3
#| fig-width: 4
#| fig-align: center

male <- base +
  geom_density(
    data = marathon %>%
      filter(`M/F` == 'M'),
    fill = 'steelblue', alpha = 0.7) +
  theme(legend.position = 'none')

male
```

```{r}
#| label: density_facet_female
#| fig-height: 3
#| fig-width: 4
#| fig-align: center

female <- base +
  geom_density(
    data = marathon %>%
      filter(`M/F` == 'F'),
    fill = 'sienna', alpha = 0.7) +
  theme(legend.position = 'none')

female
```

Lastly, combine the subplots into a single plot.

```{r}
#| label: density_facet_combined
#| #| fig-height: 4
#| fig-width: 11
#| fig-align: center

plot_grid(male, female, labels = c('Male', 'Female'))
```

### How to make diverging histograms

Make the histograms by filtering the data.

```{r}
#| label: marathon_diverging_histograms1
#| fig-height: 5
#| fig-width: 7
#| fig-align: center

ggplot(marathon, aes(x = Age)) +
    # Add histogram for Female runners:
    geom_histogram(
      data = marathon %>%
        filter(`M/F` == 'F'),
      aes(fill = `M/F`, y=..count..),
      alpha = 0.7, color = 'white') +
    # Add negative histogram for Male runners:
    geom_histogram(
      data = marathon %>%
        filter(`M/F` == 'M'),
      aes(fill = `M/F`, y=..count..*(-1)),
      alpha = 0.7, color = 'white')
```

Rotate, adjust colors, theme, annotate:

```{r}
#| label: marathon_diverging_histograms2
#| fig-height: 5
#| fig-width: 7
#| fig-align: center

marathon %>% 
  ggplot(aes(x = Age)) +
    # Add histogram for Female runners:
    geom_histogram(
      data = marathon %>%
        filter(`M/F` == 'F'),
      aes(fill = `M/F`, y=..count..),
      alpha = 0.7, color = 'white') +
    # Add negative histogram for Male runners:
    geom_histogram(
      data = marathon %>%
        filter(`M/F` == 'M'),
      aes(fill = `M/F`, y=..count..*(-1)),
      alpha = 0.7, color = 'white') +
    scale_fill_manual(
        values = c('sienna', 'steelblue')) +
    coord_flip() +
    theme_minimal_hgrid() +
    labs(fill = 'Gender',
         y    = 'Count')
```

### How to make ridgeplots

Make a ridgeplot with **ggridges** library.

```{r}
#| label: college_ridgeplot2
#| fig-height: 5
#| fig-width: 7
#| fig-align: center

library(ggridges)

college_all_ages %>%
  mutate(
    major_category = fct_reorder(
      major_category, median)) %>%
  ggplot() +
  geom_density_ridges(
    aes(x = median, y = major_category),
    scale = 4, alpha = 0.7) +
  scale_y_discrete(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) +
  coord_cartesian(clip = "off") +
  theme_ridges() +
  labs(x = 'Median income ($)',
       y = 'Major category')
```
