# Interactivity {#sec-chapter}

```{r}
#| echo: false
#| message: false

suppressWarnings(suppressMessages(source("_common.R")))
```

## Interactive charts with plotly

**[Plotly](https://plotly.com/graphing-libraries/) uses JavaScript to create interactive charts**

*But you don't have to know JavaScript to use it! ðŸŽ‰*

Turn any ggplot into an interactive chart with `ggplotly()`

```{r}
#| label: gapminder
#| fig-width: 7
#| fig-height: 5

plot <- gapminder %>%
  filter(year == 2007) %>%
  ggplot(aes(x = gdpPercap, y = lifeExp,
             size = pop, color = continent,
             label = country)) + 
  geom_point(alpha = 0.7) +
  scale_color_brewer(palette = 'Set2') +
  scale_size_area(
    guide = FALSE, max_size = 25) +
  scale_x_log10() +
  theme_bw(base_size = 16) +
  labs(x = 'GDP per capita',
       y = 'Life expectancy',
       color = 'Continent')

plot
```

### Turn any ggplot into an interactive chart with `ggplotly()`

```{r}
#| eval: false

ggplotly(plot)
```

```{r}
#| label: gapminder_plotly
#| echo: false

# Embedding as a iframe since direct rendering produces poor results, see
# https://github.com/rstudio/htmltools/issues/90
htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder.html'),
  width       = "100%",
  height      = "400",
  scrolling   = "no",
  seamless    = "seamless",
  frameBorder = "0"
)
```

Modify the data shown with `tooltip` argument

```{r}
#| eval: false

ggplotly(
  plot,
  tooltip = c("country", "pop") #<<
)
```

```{r}
#| label: gapminder_plotly_tooltip
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_tooltip.html'),
  width       = "100%",
  height      = "400",
  scrolling   = "no",
  seamless    = "seamless",
  frameBorder = "0"
)
```

Modify other features by piping on `plotly` [functions](https://plotly.com/r/plotly-fundamentals/)

```{r}
#| eval: false

ggplotly(
  plot,
  tooltip = c("country", "pop")
) %>%
  layout(legend = list( #<<
    orientation = "h", x = 0, y = -0.3)) #<<
```

```{r}
#| label: gapminder_plotly_legend
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_legend.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "no",
  seamless    = "seamless",
  frameBorder = "0"
)
```

*Reference guide: https://plotly.com/ggplot2/*

### Make interactive charts with `plot_ly()`

(More examples here: https://plotly.com/r/)

```{r}
#| eval: false

plot_ly( #<<
  data = gapminder %>% filter(year == 2007),
  type = 'scatter',
  x = ~gdpPercap,
  y = ~lifeExp,
  size = ~pop,
  color = ~continent,
  text = ~country,
  mode = "markers",
  sizes = c(10, 1000),
  marker = list(opacity = 0.5),
  hoverinfo = "text"
  ) %>%
  layout(xaxis = list(type = "log"))
```

```{r}
#| label: plot_ly
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_plot_ly.html'),
  width       = "100%",
  height      = "400",
  scrolling   = "no",
  seamless    = "seamless",
  frameBorder = "0"
)
```

Animation is relatively easy with `plot_ly()`

```{r}
#| eval: false

plot_ly(
  data = gapminder, #<<
  type = 'scatter',
  x = ~gdpPercap,
  y = ~lifeExp,
  size = ~pop,
  color = ~continent,
  text = ~country,
  frame = ~year, #<<
  mode = "markers",
  sizes = c(10, 1000),
  marker = list(opacity = 0.5),
  hoverinfo = "text"
  ) %>%
  layout(xaxis = list(type = "log"))
```

```{r}
#| label: plot_ly_anim
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_plot_ly_anim.html'),
  width       = "100%",
  height      = "400",
  scrolling   = "no",
  seamless    = "seamless",
  frameBorder = "0"
)
```

Save as html page

```{r}
#| eval: false

htmlwidgets::saveWidget(
  ggplotly(plot),
  file = here::here('figs', 'gapminder.html')
)
```

Insert using iframe

```{r}
#| eval: false

htmltools::tags$iframe(
  src         = here::here('figs', 'gapminder.html'),
  width       = "100%",
  height      = "400",
  scrolling   = "no",
  seamless    = "seamless",
  frameBorder = "0"
)
```

One more option: https://g2r.opifex.org/index.html

<center>
<img src="images/g2r.png" width=700>
</center>

## Interactive Tables

**Make pretty static tables with `kable()`**

```{r}
library(knitr)

gapminder %>%
  kable() 
```

Behind the scenes:

`kable()` generates the code to make a pretty table

```{r, eval=FALSE}
gapminder %>%
  kable(format = "pipe") #<<
```
```{r}
#| results: 'asis'
#| echo: false

cat(knitr::kable(gapminder, format = "pipe"))
```

```{r}
#| eval: false

gapminder %>%
  kable(format = "html") #<<
```
```{r}
#| echo: false

cat(kable(gapminder, format = "html"))
```

### Make _interactive_ tables with: `DT::datatable()`

```{r}
#| eval: false

library(DT)

gapminder %>%
  datatable() #<<
```

```{r}
#| label: gapminder_dt
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_dt.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```

```{r}
#| eval: false

gapminder %>%
  datatable(
    options = list( #<<
      pageLength = 5, #<<
      lengthMenu = c(5, 10, 15, 20)) #<<
  )
```

```{r}
#| label: gapminder_dt_pages
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_dt_pages.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```

**Modify features by piping on [functions](https://rstudio.github.io/DT/functions.html)**

<!-- Weird rendering of graphs in this chapter, even on the slides. Chose not to mess with it too much. -->

```{r}
#| eval: false

gapminder %>%
  datatable() %>%
  formatCurrency('gdpPercap') %>%  #<<
  formatStyle( #<<
    'country',  #<<
    color = 'red',  #<<
    backgroundColor = 'black',  #<<
    fontWeight = 'bold') #<<
```

```{r}
#| label: gapminder_dt_style
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_dt_style.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```

```{r}
#| eval: false

gapminder %>%
  datatable() %>%
  formatCurrency('gdpPercap') %>%
  formatStyle(
    'country',
    color = 'red',
    backgroundColor = 'black',
    fontWeight = 'bold') %>%
  formatStyle( #<<
    'lifeExp',  #<<
    background = styleColorBar( #<<
      gapminder$lifeExp, 'dodgerblue'), #<<
    backgroundSize = '100% 90%',  #<<
    backgroundRepeat = 'no-repeat', #<<
    backgroundPosition = 'center')  #<<
```

```{r}
#| label: gapminder_dt_bars
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_dt_bars.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```

### Make _interactive_ tables with: `reactable::reactable()`

```{r}
#| eval: false

library(reactable)

gapminder %>%
  reactable() #<<
```

```{r}
#| label: gapminder_reactable
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_reactable.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```

`reactable()` has some nice [options](https://glin.github.io/reactable/articles/examples.html)!

```{r}
#| eval: false

library(reactable)

gapminder %>%
  reactable(
    searchable = TRUE, #<<
    highlight = TRUE, #<<
    filterable = TRUE, #<<
    defaultPageSize = 5, #<<
    showPageSizeOptions = TRUE, #<<
    pageSizeOptions = c(5, 10, 15) #<<
  )
```

```{r}
#| label: gapminder_reactable_options
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_reactable_options.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```

Add more features with  [reactablefmtr](https://kcuilla.github.io/reactablefmtr/index.html) library

```{r}
#| eval: false

library(reactable)
library(reactablefmtr) 

gapminder %>%
  reactable(
    searchable = TRUE,
    highlight = TRUE,
    filterable = TRUE,
    defaultPageSize = 5,
    showPageSizeOptions = TRUE,
    pageSizeOptions = c(5, 10, 15)
    columns = list( 
      lifeExp = colDef(cell = data_bars_pos_neg( 
        gapminder, 
        colors = c("#d7191c", "#ffffbf", "#1a9641")), 
      align = "center")) ## align column header 
  ) 
```

```{r}
#| label: gapminder_reactable_bars
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_reactable_bars.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```

Add more features with `sparkline` library [(example)](https://glin.github.io/reactable/articles/examples.html#embedding-html-widgets)

```{r}
#| eval: false

library(reactable)
library(sparkline) 

gapminder_summary <- gapminder %>%
  group_by(country) %>%
  summarise(lifeExp = list(lifeExp)) %>%
  mutate(leftExpTrend = NA)

gapminder_reactable_sparkline <- gapminder_summary %>%
  reactable(
    searchable = TRUE,
    highlight = TRUE,
    filterable = TRUE,
    defaultPageSize = 5,
    showPageSizeOptions = TRUE,
    columns = list( 
      lifeExp = colDef( 
        cell = function(values) { 
          sparkline( 
            values, type = "bar", chartRangeMin = 0,  
            chartRangeMax = max(gapminder$lifeExp)) 
        }), 
      leftExpTrend = colDef( 
        cell = function(value, index) { 
          sparkline(gapminder_summary$lifeExp[[index]]) 
        }) 
  )) 
```

```{r}
#| label: gapminder_reactable_sparkline
#| echo: false

htmltools::tags$iframe(
  src         = file.path('figs', 'gapminder_reactable_sparkline.html'),
  width       = "100%",
  height      = "500",
  scrolling   = "yes",
  seamless    = "seamless",
  frameBorder = "0"
)
```


### References:

## - https://rstudio.github.io/DT/
## - https://glin.github.io/reactable/
## - https://kcuilla.github.io/reactablefmtr/

## Shiny Apps

### License

The following content was modified from [Florencia D'Andrea](https://florencia.netlify.app/)'s [RLadies Shiny Meetup Slides](https://github.com/flor14/rladies_shiny_meetup_2020)

This work is licensed under a</br>[Creative Commons Attribution-ShareAlike 4.0](http://creativecommons.org/licenses/by-sa/4.0/) International License

To use shiny apps, install the following libraries:

```{r}
#| eval: false

install.packages('shiny')
install.packages('shinyWidgets')
install.packages('rsconnect')
```

<center>
<img src="https://github.com/rstudio/shiny/raw/main/man/figures/logo.png" width=700>
</center>

Check out the [Shiny Gallery](https://shiny.rstudio.com/gallery/) to see examples of interactive webapps in R

### Anatomy of a Shiny App

A Shiny app is a web page (UI) connected to a computer running a live R session (Server)

```{r}
#| label: init
#| echo: false
#| fig.align: center
#| out.width: 80%

knitr::include_graphics("images/cheat1.png")
```

<!-- I was a little confused why the title of the slide here was just 'app.r' -->

You can insert all the code at once with the shinyapp snippet!

Just start typing `shiny`...

```{r}
#| label: init2
#| echo: false
#| fig.align: center
#| out.width: 80%

knitr::include_graphics("images/snippet_2.png")
```

```{r}
#| eval: false
#| tidy: false

library(shiny)

ui <- fluidPage(
  
)

server <- function(input, output, session) {
  
}

shinyApp(ui, server)
```

### Building a shiny app

```{r}
#| label: shiny
#| echo: false
#| fig.align: center
#| out.width: 50%

knitr::include_graphics("images/cheat1.png")
```

**`ui`**

1. Pick a layout function

2. Add inputs widgets

3. Add `*Output()` functions

**`server`**

1. Use `render*()` functions to make outputs

2. Link outputs with `output$<id>` 

3. Link inputs with `input$<id>`

### Run the app ðŸŽ¬

- **Option 1**: Click the "Run App" button in the toolbar:

```{r}
#| label: run_app1
#| echo: false
#| fig.align: center
#| out.width: 25%

knitr::include_graphics("images/run_app.png")
```

- **Option 2**: Use a keyboard shortcut: Cmd/Ctrl + Shift + Enter.

- **Option 3**: `shiny::runApp()` with the path to the **app.R** file.

### User Interface (UI)

```{r}
#| label: mamus
#| echo: false
#| fig.align: center
#| out.width: 70%

knitr::include_graphics("images/mamu_4.jpg")
```

[Matryoshka Dolls](https://en.wikipedia.org/wiki/Matryoshka_doll)

Organize panels and elements into a layout with a **layout function**

Top level is usually `fluidPage()`

```{r}
#| label: init3
#| echo: false
#| fig.align: center
#| out.width: 80%

knitr::include_graphics("images/layout.png")
```

```{r}
#| label: slide_mamu1
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("images/slide_mamu1.png")
```

`sidebarLayout()`

```{r}
#| eval: false

ui <- fluidPage(

  titlePanel("Hello Shiny!"),

  sidebarLayout( #<<

    sidebarPanel( #<<
      sliderInput( 
        "bins", label = "Number of bins:",
        min = 1, value = 30, max = 50
      )
    ),

    mainPanel( #<<
      plotOutput("distPlot")
    )
  )
)
```

```{r}
#| label: init5
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("images/sidebarLayout.png")
```

`navbarPage()`: An alternative to `fluidPage()`

Think of each `tabPanel()` as it's own `fluidPage()`

```{r}
#| eval: false

ui <- navbarPage("My Application", 
  tabPanel("Component 1"),
  tabPanel("Component 2"),
  tabPanel("Component 3")
)
```

```{r}
#| label: navbarPage
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("images/navbarPage.png")
```

Use `navbarMenu()` to create a nested menu item

```{r}
#| eval: false

ui <- navbarPage("My Application",
  tabPanel("Component 1"),
  tabPanel("Component 2"),
  navbarMenu("More", #<<
    tabPanel("Sub-Component A"), #<<
    tabPanel("Sub-Component B")) #<<
)
```

```{r}
#| label: navbarMenu
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("images/navbarMenu.png")
```

**The UI defines the "what" and "where" for:**

1. **Inputs**: collect values from the user
2. **Output**: display something to the user


**Inputs**: collect values from the user

```{r}
#| label: init4
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("images/inputs.png")
```

Example Input: Radio buttons in the sidebar

```{r}
#| eval: false

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons(â€¦) #<<
    ), 
    mainPanel(â€¦)
  )
)
```

```{r}
#| label: radiobut
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("images/slide_mamu2.png")
```

```{r}
#| label: init7
#| echo: false
#| fig.align: center
#| out.width: 70%

knitr::include_graphics("images/parentesis.png")
```

```{r}
#| label: init8
#| echo: false
#| fig.align: center
#| out.width: 90%

knitr::include_graphics("images/closing_par.png")
```

**Output**: display something to the user

Example Output: Put a plot in the main panel

```{r}
#| eval: false

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons(â€¦) 
    ), 
    mainPanel(
      plotOutput(â€¦) #<<
    )
  )
)
```

```{r}
#| label: slide_mamu3
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("images/slide_mamu3.png")
```

**Output**: display something to the user

Output function  | Description
-----------------| ---------------
`plotOutput()`   | Display a reactive _plot_
`dataTableOutput()` | Display a `DT::datatable()`
`textOutput()`   | Display reactive _text_
`imageOutput()`  | Display an image

```{r}
#| label: out
#| echo: false
#| fig.align: center
#| out.width: 90%

knitr::include_graphics("images/outputs.png")
```

#### Using `renderPlot()`: make a plot

```{r}
#| label: mpg
#| fig-align: center
#| fig-width: 7
#| fig-height: 5

library(ggplot2)

ggplot(mpg) +
  geom_point(
    aes(x = displ, y = hwy, color = class))
```

Link plot to output with `output$<id>`

`ui`

```{r}
#| eval: false

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons(â€¦) 
    ), 
    mainPanel(
      plotOutput( #<<
        outputId = "mpg_plot" #<<
      ) #<<
    )
  )
)
```

`server`
```{r}
#| eval: false

server <- function(input, output, session) {
  output$mpg_plot <- renderPlot({ #<<
    ggplot(mpg) +
      geom_point(
        aes(x = displ, y = hwy, color = class))
  })
}
```

Link user inputs to plot with `input$<id>`

`ui`
```{r}
#| eval: false

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons(
        inputId = "xvar", #<<
        label = "Select the x-axis variable:",
        selected = "displ",
        choices = c(
          "Highway miles per gallon" = "hwy", #<<
          "City miles per gallon" = "cty", #<<
          "Engine displacement, in litres" = "displ") #<<
      ),
    ), 
    mainPanel(
      plotOutput(
        outputId = "mpg_plot" 
      ) 
    )
  )
)
```

`server`
```{r}
#| eval: false

server <- function(input, output, session) {
  output$mpg_plot <- renderPlot({ 
    ggplot(mpg) +
      geom_point(
        aes_string( #<<
          x = input$xvar,  #<<
          y = "hwy", 
          color = "class")) 
  })
}
```

**Note**: I switched the ggplot code from</br>`aes()` to `aes_string()`

## Shiny Extras

### Add a theme with ["shinythemes"](https://rstudio.github.io/shinythemes/) package

```{r}
#| label: theme
#| echo: false
#| fig.align: center
#| out.width: 60%

knitr::include_graphics("images/shinythemes.png")
```

Insert theme at top of main `ui` layout function

```{r}
#| eval: false

library(shinythemes)

ui <- fluidPage(
  theme = shinytheme("sandstone"),
  sidebarLayout(
    sidebarPanel(
      <insert widgets>
    ), 
    mainPanel(
      <insert outputs>
    )
  )
)
```

```{r}
#| label: theme2
#| echo: false
#| fig.align: center
#| out.width: 100%

knitr::include_graphics("https://rstudio.github.io/shinythemes/images/sandstone.png")
```

- Fancier widgets with ["shinyWidgets"](http://shinyapps.dreamrs.fr/shinyWidgets/) package

- Open the `shinyWidgets.R` app and click the "Run App" button

**If you really want to get good at this:**

1. Print out this [Cheatsheet](https://shiny.posit.co/r/articles/start/cheatsheet/)

2. Watch this [2.5 Hour Comprehensive RStudio Tutorial](https://shiny.rstudio.com/tutorial)

3. Use this reference manual: [Mastering Shiny](https://mastering-shiny.org/)

You can deploy an app for free on [shinyapps.io](https://www.shinyapps.io/)

Follow [this guide](https://shiny.posit.co/r/articles/share/shinyapps/)

1. Create a shinyapps.io account
2. Open your tokens, click "Show", copy the code
3. Run the code in RStudio 
4. Deploy your app:

```{r}
#| eval: false

library(rsconnect)
deployApp()
```
