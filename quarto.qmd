# Introduction to Quarto {#sec-chapter}

```{r}
#| echo: false
#| message: false

suppressWarnings(suppressMessages(source("_common.R")))
```

> ### Learning Objectives {.unnumbered}
>
> * Get familiar with the workflow of using Quarto in RStudio.
> * Understand the anatomy of a Quarto Markdown Document.
> * Know how to work with headers and code chunks in .qmd files.
> * Know how to format code chunks and text in .qmd files.
> * Know how to render Quarto documents to various outputs.

## Working with Quarto

Quarto is a multilingual version of RMarkdown built on Pandoc that allows us to seamlessly combine text and code to create dynamic outputs. Like RMarkdown, it uses knitr to render outputs in the form of documents, web pages, and more.  

<center>
<img src="images/how-qmd-works.png" width=100%>
</center>
<br>

Use R Projects (`.Rproj` files) to organize your analysis. When you double-click a `.Rproj` file, RStudio will open an set the working directory to the project folder. 

::: {.callout-important}

**Do not double-click `.R` files**! If you do so, RStudio may open to a different project directory, and it won't know where your files live.

:::

So open files that look like this:

<center>
<img src = "images/rproj.png" width = "75">
</center>

## Anatomy of a Quarto Markdown Document

A Quarto Markdown document (.qmd) has three main parts:

* Header
* Markdown text
* R code

### Header

You control the overall document settings in the YAML header (the parts between the `---` symbols at the top of the `.qmd` file. ). Things like the `title` and `author` can be set here. 

You can also define the output type with `format`. The default output is an html page, which you can open in a web browser:

```{r}
#| eval: false 
---
title: Your title
author: Author name
format: html 
---
```

Add table of contents with `toc`, or change the theme under the `format` setting (More on themes at [https://quarto.org/docs/output-formats/html-themes.html](https://quarto.org/docs/output-formats/html-themes.html)):

```{r}
#| eval: false 
---
title: Your title
author: Author name
toc: true 
format:
  html:
    theme: united
---
```

You can also rende to other formats, like PDF with `format: pdf`, which leverages LaTex to render:

```{r}
#| eval: false 

---
title: Your title
author: Author name
format: pdf 
---
```

If you don't have LaTeX on your computer, install tinytex in R:

```{r}
#| eval: false 

tinytex::install_tinytex()
```

You can also render to Microsoft Word:

```{r}
#| eval: false 

---
title: Your title
author: Author name
format: docx
---
```

### Markdown Text

Use the `#` symbol to create headers.

::: {.grid}

::: {.g-col-6}

**Type this...**

```markdown
# HEADER 1

## HEADER 2

### HEADER 3

#### HEADER 4

##### HEADER 5

###### HEADER 6
```

:::

::: {.g-col-6}

**..to get this**

<img src = "images/headers.png" width = 1000>

:::

:::

::: {.grid}

::: {.g-col-6}

**Type this...**

- `normal text`
- `_italic text_`
- `*italic text*`
- `**bold text**`
- `***bold italic text***`
- `~~strikethrough~~`
- `` `code text` ``

:::

::: {.g-col-6}

**..to get this**

- normal text
- _italic text_
- *italic text*
- **bold text**
- ***bold italic text***
- ~~strikethrough~~
- `code text`

:::

:::

Use `-` to make a bullet list:

::: {.grid}

::: {.g-col-6}

**Type this...**

```{r, eval=FALSE}
- first item
- second item
- third item
```

:::

::: {.g-col-6}

**..to get this**

- first item
- second item
- third item

:::

:::

Use numbers to make a numbered list.

::: {.grid}

::: {.g-col-6}

**Type this...**

Numbered list:

```{r, eval=FALSE}
1. first item
2. second item
3. third item
```

:::

::: {.g-col-6}

**..to get this**

1. first item
2. second item
3. third item

:::

:::

Simple **url link** to another site:

```{r, eval=FALSE}
[Download R](http://www.r-project.org/)
```

[Download R](http://www.r-project.org/)

#### Don't want to use Markdown?

#### <span style="color: red;">Use Visual Mode!</span>

<center>
<img src="images/visual-mode.png" width=700>
</center>

### R Code

#### Inline R code

```{r, eval=FALSE}
`r insert code here`
```

```{r, eval=FALSE}
The sum of 3 and 4 is `r 3 + 4`
```

Produces this:

The sum of 3 and 4 is `r 3 + 4`

#### R Code chunks

````markdown
`r ''````{r}
insert code here
insert more code here
```
````

This code chunk...

````markdown
`r ''````{r}
library(palmerpenguins)

head(penguins)
```
````
...will produce this when compiled: 

```{r} 
#| echo: false

library(palmerpenguins)

head(penguins)
```

#### Chunk Options

Control what chunks output using options

All options [here](https://quarto.org/docs/reference/cells/cells-knitr.html)

```{r, echo=FALSE, out.width='60%'}
knitr::include_graphics('images/chunks_options.png')
```

By default, code chunks print **code** + **output**

````markdown
`r ''````{r}
#| echo: false

cat('hello world!')
```
````

Prints only **output**<br>(doesn't show code)

```{r}
#| echo: false

cat('hello world!')
```

````markdown
`r ''````{r}
#| eval: false

cat('hello world!')
```
````

Prints only **code**<br>(doesn't run the code)

```{r}
#| eval: false

cat('hello world!')
```

````markdown
`r ''````{r}
#| include: false

cat('hello world!')
```
````

Runs, but doesn't print anything

```{r}
#| include: false

cat('hello world!')
```

#### A Global `setup` Chunk 🌍

````markdown
`r ''````{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
    warning = FALSE,
    message = FALSE,
    fig.path = "figs/",
    fig.width = 7.252,
    fig.height = 4,
    comment = "#>",
    fig.retina = 3
)
```
````

- Typically the first chunk
- All following chunks will use these options (i.e., sets global chunk options)
- You can (and should) use individual chunk options too
- Often where we load libraries, etc.
