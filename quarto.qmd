# Introduction to Quarto {#sec-chapter}

```{r}
#| echo: false
#| message: false

suppressWarnings(suppressMessages(source("_common.R")))
```

> ### Learning Objectives {.unnumbered}
>
> * Get familiar with the workflow of using Quarto in RStudio.
> * Understand the anatomy of a Quarto Markdown Document.
> * Know how to work with headers and code chunks in .qmd files.
> * Know how to format code chunks and text in .qmd files.
> * Know how to render Quarto documents to various outputs.

## Working with Quarto

Quarto is a multilingual version of RMarkdown built on Pandoc that allows us to seamlessly combine text and code to create dynamic outputs. Like RMarkdown, it uses knitr to render outputs in the form of documents, web pages, and more.  

```{r}
#| label: how-qmd-works
#| out-width: "600"
#| echo: false
#| fig-align: "center"
#| fig-alt: "A flowchart showing the conversion process from qmd to PDF. The steps are: qmd file, knitr, md file, pandoc, and finally outputs of Word document, PDF file, and web globe icon."

knitr::include_graphics("images/how-qmd-works.png")
```

Use R Projects (`.Rproj` files) to organize your analysis. When you double-click a `.Rproj` file, RStudio will open an set the working directory to the project folder. 

::: {.callout-important}

**Do not double-click `.R` files**! If you do so, RStudio may open to a different project directory, and it won't know where your files live.

:::

So open files that look like this:

```{r}
#| label: rproj
#| out-width: "600"
#| echo: false
#| fig-align: "center"
#| fig-alt: "The RStudio logo consisting of a blue transparent cube containing a large capital letter R in a lighter blue shade."

knitr::include_graphics("images/rproj.png.png")
```

## Anatomy of a Quarto Markdown Document

A Quarto Markdown document (.qmd) has three main parts:

* Header
* Markdown text
* R code

## Header

You control the overall document settings in the YAML header (the parts between the `---` symbols at the top of the `.qmd` file. ). Things like the `title` and `author` can be set here. 

You can also define the output type with `format`. The default output is an html page, which you can open in a web browser:

```{r}
#| eval: false 
---
title: Your title
author: Author name
format: html 
---
```

Add table of contents with `toc`, or change the theme under the `format` setting (More on themes at [https://quarto.org/docs/output-formats/html-themes.html](https://quarto.org/docs/output-formats/html-themes.html)):

```{r}
#| eval: false 
---
title: Your title
author: Author name
toc: true 
format:
  html:
    theme: united
---
```

You can also rende to other formats, like PDF with `format: pdf`, which leverages LaTex to render:

```{r}
#| eval: false 

---
title: Your title
author: Author name
format: pdf 
---
```

If you don't have LaTeX on your computer, install tinytex in R:

```{r}
#| eval: false 

tinytex::install_tinytex()
```

You can also render to Microsoft Word:

```{r}
#| eval: false 

---
title: Your title
author: Author name
format: docx
---
```

## Markdown Text

Use the `#` symbol to create headers.

::: {.grid}

::: {.g-col-6}

**Type this...**

```markdown
# HEADER 1

## HEADER 2

### HEADER 3

#### HEADER 4

##### HEADER 5

###### HEADER 6
```

:::

::: {.g-col-6}

**..to get this**

```{r}
#| label: headers
#| out-width: "1000"
#| echo: false
#| fig-alt: "A text sample showing different header sizes from Header 1 to Header 6, with font size decreasing for each subsequent header level."

knitr::include_graphics("images/headers.png")
```

:::

:::

::: {.grid}

::: {.g-col-6}

**Type this...**

- `normal text`
- `_italic text_`
- `*italic text*`
- `**bold text**`
- `***bold italic text***`
- `~~strikethrough~~`
- `` `code text` ``

:::

::: {.g-col-6}

**..to get this**

- normal text
- _italic text_
- *italic text*
- **bold text**
- ***bold italic text***
- ~~strikethrough~~
- `code text`

:::

:::

Use `-` to make a bullet list:

::: {.grid}

::: {.g-col-6}

**Type this...**

```{r, eval=FALSE}
- first item
- second item
- third item
```

:::

::: {.g-col-6}

**..to get this**

- first item
- second item
- third item

:::

:::

Use numbers to make a numbered list.

::: {.grid}

::: {.g-col-6}

**Type this...**

```{r, eval=FALSE}
1. first item
2. second item
3. third item
```

:::

::: {.g-col-6}

**..to get this**

1. first item
2. second item
3. third item

:::

:::

Simple **url link** to another site:

::: {.grid}

::: {.g-col-8}

**Type this...**

```{r}
#| eval: false

[Download R](http://www.r-project.org/)
```

:::

::: {.g-col-4}

**..to get this**

[Download R](http://www.r-project.org/)

:::

:::

Don't want to use Markdown? Use RStudio Visual Mode! This is a WYSIWYG editor that allows you to write like you would in Word, but then RStudio will convert it to Markdown for you.

```{r}
#| label: visual-mode
#| out-width: "500"
#| echo: false
#| fig-align: "center"
#| fig-alt: "A screenshot of a Quarto document editor interface. The file name 'quarto_demo.qmd' is visible at the top. Below it are tabs for 'Source' and 'Visual' views, with 'Source' highlighted. The editor shows the first few lines of a Quarto document, including YAML front matter with title and format specifications."

knitr::include_graphics("images/visual-mode.png")
```

## R Code

### Inline R code

Use backticks to insert R code into text, like this:

```{r}
#| eval: false

`r insert code here`
```

```{r}
#| eval: false

The sum of 3 and 4 is `r 3 + 4`
```

Produces this:

The sum of 3 and 4 is `r 3 + 4`

### R Code chunks

Insert R code into a chunk like this:

````markdown
`r ''````{r}
insert code here
insert more code here
```
````

For example, the following code chunk will load the `palmerpenguins` package and print the first 6 rows of the `penguins` dataset:

```{r}
#| echo: fenced

library(palmerpenguins)

head(penguins)
```

### Chunk Options

Use chunk options to control what code chunks output.

See all options [here](https://quarto.org/docs/reference/cells/cells-knitr.html)

```{r}
#| label: chunks_options
#| out-width: 75%
#| echo: false
#| fig-align: "center"
#| fig-alt: "A table with three columns: 'option', 'default', and 'effect'. The table lists various Quarto chunk options such as eval, echo, warning, error, message, tidy, results, cache, comment, fig.width, and fig.height. For each option, it shows the default value and a brief description of its effect on code chunk execution and output."

knitr::include_graphics('images/chunks_options.png')
```

By default, code chunks print **code** + **output**, like this:

```{r}
#| echo: fenced

cat('hello world!')
```

Setting `echo: false` will print only the **output** but not the code.

::: {.grid}

::: {.g-col-6}

**Code chunk**:

````markdown
`r ''````{r}
#| echo: false

cat('hello world!')
```
````

:::

::: {.g-col-6}

**Output**:

```{r}
#| echo: false

cat('hello world!')
```

:::

:::

Setting `eval: false` will print only the **output** but will not run the code.

::: {.grid}

::: {.g-col-6}

**Code chunk**:

````markdown
`r ''````{r}
#| eval: false

cat('hello world!')
```
````

:::

::: {.g-col-6}

**Output**:

```{r}
#| eval: false

cat('hello world!')
```

:::

:::

Setting `include: false` will run the code but not print anything.

::: {.grid}

::: {.g-col-6}

**Code chunk**:

````markdown
`r ''````{r}
#| include: false

cat('hello world!')
```
````

:::

::: {.g-col-6}

**Output**:

```{r}
#| include: false

cat('hello world!')
```

:::

:::

### A Global `setup` Chunk 🌍

We typically use a `setup` chunk to set global chunk options at the top of the document, like this:

````markdown
`r ''````{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
    warning = FALSE,
    message = FALSE,
    fig.path = "figs/",
    fig.width = 7.252,
    fig.height = 4,
    comment = "#>",
    fig.retina = 3
)
```
````

This chunk will set global chunk options for all following chunks in the document. You can still also use individual chunk options too.

This setup chunk does the following:

- Any warnings will not be printed
- Any messages will not be printed
- Figures will be saved to the `figs/` folder
- Figures will be 7.252 inches wide and 4 inches tall
- Any code print out will start with `#>`
- The `fig.retina` setting improves overall figure resolution.