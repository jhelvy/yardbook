[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yet Another R Dataviz Book",
    "section": "",
    "text": "Preface\nWelcome to Yet Another R Dataviz Book!\nThis book aims to provide a simple, easy-to-follow guide for making effective data visualizations in .\nThroughout the book, we keep the text to a minimum and focus on communicating key concepts as succinctly as possible. The general approach is to explain an idea in one or two sentences max, then provide an example with code so that you can see how to implement it.\nThe book leverages the {ggplot2} package for making charts and Quarto for making reproducible reports, and the book includes two introductory chapters on using these tools.\nThe book also includes a section on Exploring Data, including chapters on data cleaning, data transformation, and summarizing data using the Tidyverse.\nFinally, the last section of the book is on Data Visualization. Each chapter in this section includes examples of effective strategies for visualizing specific types of data and relationships.\nThis book is still very much in development, so if something seems off please feel free to post an issue on the GitHub repo and we‚Äôll address it ASAP.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "1¬† Introduction to Quarto",
    "section": "",
    "text": "1.1 Working with Quarto\nQuarto is a multilingual version of RMarkdown built on Pandoc that allows us to seamlessly combine text and code to create dynamic outputs. Like RMarkdown, it uses knitr to render outputs in the form of documents, web pages, and more.\nUse R Projects (.Rproj files) to organize your analysis. When you double-click a .Rproj file, RStudio will open an set the working directory to the project folder.\nSo open files that look like this:",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#working-with-quarto",
    "href": "quarto.html#working-with-quarto",
    "title": "1¬† Introduction to Quarto",
    "section": "",
    "text": "Do not double-click .R files! If you do so, RStudio may open to a different project directory, and it won‚Äôt know where your files live.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#anatomy-of-a-quarto-markdown-document",
    "href": "quarto.html#anatomy-of-a-quarto-markdown-document",
    "title": "1¬† Introduction to Quarto",
    "section": "1.2 Anatomy of a Quarto Markdown Document",
    "text": "1.2 Anatomy of a Quarto Markdown Document\nA Quarto Markdown document (.qmd) has three main parts:\n\nHeader\nMarkdown text\nR code\n\n\n1.2.1 Header\nYou control the overall document settings in the YAML header (the parts between the --- symbols at the top of the .qmd file. ). Things like the title and author can be set here.\nYou can also define the output type with format. The default output is an html page, which you can open in a web browser:\n\n---\ntitle: Your title\nauthor: Author name\nformat: html \n---\n\nAdd table of contents with toc, or change the theme under the format setting (More on themes at https://quarto.org/docs/output-formats/html-themes.html):\n\n---\ntitle: Your title\nauthor: Author name\ntoc: true \nformat:\n  html:\n    theme: united\n---\n\nYou can also rende to other formats, like PDF with format: pdf, which leverages LaTex to render:\n\n---\ntitle: Your title\nauthor: Author name\nformat: pdf \n---\n\nIf you don‚Äôt have LaTeX on your computer, install tinytex in R:\n\ntinytex::install_tinytex()\n\nYou can also render to Microsoft Word:\n\n---\ntitle: Your title\nauthor: Author name\nformat: docx\n---\n\n\n\n1.2.2 Markdown Text\nUse the # symbol to create headers.\n\n\nType this‚Ä¶\n# HEADER 1\n\n## HEADER 2\n\n### HEADER 3\n\n#### HEADER 4\n\n##### HEADER 5\n\n###### HEADER 6\n\n\n..to get this\n\n\n\n\n\nType this‚Ä¶\n\nnormal text\n_italic text_\n*italic text*\n**bold text**\n***bold italic text***\n~~strikethrough~~\n`code text`\n\n\n\n..to get this\n\nnormal text\nitalic text\nitalic text\nbold text\nbold italic text\nstrikethrough\ncode text\n\n\n\nUse - to make a bullet list:\n\n\nType this‚Ä¶\n\n- first item\n- second item\n- third item\n\n\n\n..to get this\n\nfirst item\nsecond item\nthird item\n\n\n\nUse numbers to make a numbered list.\n\n\nType this‚Ä¶\nNumbered list:\n\n1. first item\n2. second item\n3. third item\n\n\n\n..to get this\n\nfirst item\nsecond item\nthird item\n\n\n\nSimple url link to another site:\n\n[Download R](http://www.r-project.org/)\n\nDownload R\n\n1.2.2.1 Don‚Äôt want to use Markdown?\n\n\n1.2.2.2 Use Visual Mode!\n\n\n\n\n\n\n1.2.3 R Code\n\n1.2.3.1 Inline R code\n\n`r insert code here`\n\n\nThe sum of 3 and 4 is `r 3 + 4`\n\nProduces this:\nThe sum of 3 and 4 is 7\n\n\n1.2.3.2 R Code chunks\n```{r}\ninsert code here\ninsert more code here\n```\nThis code chunk‚Ä¶\n```{r}\nlibrary(palmerpenguins)\n\nhead(penguins)\n```\n‚Ä¶will produce this when compiled:\n\n\n#&gt; # A tibble: 6 √ó 8\n#&gt;   species island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n#&gt;   &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n#&gt; 1 Adelie  Torgers‚Ä¶           39.1          18.7               181        3750\n#&gt; 2 Adelie  Torgers‚Ä¶           39.5          17.4               186        3800\n#&gt; 3 Adelie  Torgers‚Ä¶           40.3          18                 195        3250\n#&gt; 4 Adelie  Torgers‚Ä¶           NA            NA                  NA          NA\n#&gt; 5 Adelie  Torgers‚Ä¶           36.7          19.3               193        3450\n#&gt; 6 Adelie  Torgers‚Ä¶           39.3          20.6               190        3650\n#&gt; # ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n1.2.3.3 Chunk Options\nControl what chunks output using options\nAll options here\n\n\n\n\n\n\n\n\n\nBy default, code chunks print code + output\n```{r}\n#| echo: false\n\ncat('hello world!')\n```\nPrints only output(doesn‚Äôt show code)\n\n\n#&gt; hello world!\n\n\n```{r}\n#| eval: false\n\ncat('hello world!')\n```\nPrints only code(doesn‚Äôt run the code)\n\ncat('hello world!')\n\n```{r}\n#| include: false\n\ncat('hello world!')\n```\nRuns, but doesn‚Äôt print anything\n\n\n1.2.3.4 A Global setup Chunk üåç\n```{r}\n#| label: setup\n#| include: false\n\nknitr::opts_chunk$set(\n    warning = FALSE,\n    message = FALSE,\n    fig.path = \"figs/\",\n    fig.width = 7.252,\n    fig.height = 4,\n    comment = \"#&gt;\",\n    fig.retina = 3\n)\n```\n\nTypically the first chunk\nAll following chunks will use these options (i.e., sets global chunk options)\nYou can (and should) use individual chunk options too\nOften where we load libraries, etc.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "ggplot.html",
    "href": "ggplot.html",
    "title": "2¬† Introduction to ggplot",
    "section": "",
    "text": "2.1 Reading in Data\nUse the here package to create file paths\npath &lt;- here::here(\"folder\", \"file.csv\")\nImport data with these functions:",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#reading-in-data",
    "href": "ggplot.html#reading-in-data",
    "title": "2¬† Introduction to ggplot",
    "section": "",
    "text": "File type\nFunction\nPackage\n\n\n\n\n.csv\nread_csv()\nreadr\n\n\n.txt\nread.table()\nutils\n\n\n.xlsx\nread_excel()\nreadxl\n\n\n\n\n2.1.1 Importing Comma Separated Values (.csv)\nRead in .csv files with read_csv(). These usually read in well and the function assumes the first row is the header.\n\nlibrary(tidyverse)\nlibrary(here)\n\ncsvPath &lt;- here('data', 'milk_production.csv')\nmilk_production &lt;- read_csv(csvPath)\n\nhead(milk_production)\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   region    state          year milk_produced\n#&gt;   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 Northeast Maine          1970     619000000\n#&gt; 2 Northeast New Hampshire  1970     356000000\n#&gt; 3 Northeast Vermont        1970    1970000000\n#&gt; 4 Northeast Massachusetts  1970     658000000\n#&gt; 5 Northeast Rhode Island   1970      75000000\n#&gt; 6 Northeast Connecticut    1970     661000000\n\n\n\n\n2.1.2 Importing Text Files (.txt)\nRead in .txt files with read.table(). These kinds of files are a little more ‚Äúraw‚Äù, and you may need to specify the skip argument (how many rows to skip before you get to the header row) and header arguments (whether the first row is the header or not). In this example, the data looks like this:\n\nLand-Ocean Temperature Index (C)\n--------------------------------\n\nYear No_Smoothing  Lowess(5)\n----------------------------\n1880     -0.15     -0.08\n1881     -0.07     -0.12\n1882     -0.10     -0.15\n1883     -0.16     -0.19\n\nSo we need to skip the first 5 rows and then set the header to FALSE:\n\ntxtPath &lt;- here('data', 'nasa_global_temps.txt')\nglobal_temps &lt;- read.table(txtPath, skip = 5, header = FALSE)\n\nhead(global_temps)\n\n#&gt;     V1    V2    V3\n#&gt; 1 1880 -0.15 -0.08\n#&gt; 2 1881 -0.07 -0.12\n#&gt; 3 1882 -0.10 -0.15\n#&gt; 4 1883 -0.16 -0.19\n#&gt; 5 1884 -0.27 -0.23\n#&gt; 6 1885 -0.32 -0.25\n\n\n\n\n2.1.3 Importing Excel Files (.xlsx)\nRead in .xlsx files with read_excel(). With Excel files it‚Äôs a good idea to specify the sheet to read in using the sheet argument:\n\nlibrary(readxl)\n\nxlsxPath &lt;- here('data', 'pv_cell_production.xlsx')\npv_cells &lt;- read_excel(xlsxPath, sheet = 'Cell Prod by Country', skip = 2)\n\nhead(pv_cells)\n\n#&gt; # A tibble: 6 √ó 10\n#&gt;   Year  China     Taiwan Japan Malaysia Germany `South Korea` `United States`\n#&gt;   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;dbl&gt;\n#&gt; 1 &lt;NA&gt;  Megawatts &lt;NA&gt;    NA   &lt;NA&gt;     &lt;NA&gt;    &lt;NA&gt;                     NA  \n#&gt; 2 &lt;NA&gt;  &lt;NA&gt;      &lt;NA&gt;    NA   &lt;NA&gt;     &lt;NA&gt;    &lt;NA&gt;                     NA  \n#&gt; 3 1995  NA        NA      16.4 NA       NA      NA                       34.8\n#&gt; 4 1996  NA        NA      21.2 NA       NA      NA                       38.8\n#&gt; 5 1997  NA        NA      35   NA       NA      NA                       51  \n#&gt; 6 1998  NA        NA      49   NA       NA      NA                       53.7\n#&gt; # ‚Ñπ 2 more variables: Others &lt;chr&gt;, World &lt;dbl&gt;",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#basic-plots-in-r",
    "href": "ggplot.html#basic-plots-in-r",
    "title": "2¬† Introduction to ggplot",
    "section": "2.2 Basic plots in R",
    "text": "2.2 Basic plots in R\nR has a number of built-in tools for basic graph types. Usually we use these for quick plots just to get a sense of the data I‚Äôm working with. We almost never use these for final charts that we want to show others (for that we use ggplot2). While there are other built in chart types, we will only show the two we find most useful for quickly exploring data: scatter plots and histograms.\n\n2.2.1 Scatter plots with plot()\nA scatter plot helps us see if there is any correlational relationship between two numeric variables. These need to be two ‚Äúcontinuous‚Äù variables, like time, age, money, etc‚Ä¶things that are not categorical in nature (as opposed to ‚Äúdiscrete‚Äù variables, like nationality). Here‚Äôs a scatterplot of the fuel efficiency (miles per gallon) of cars over their respective horsepower using the mtcars dataset:\n\nplot(x = mtcars$hp, y = mtcars$mpg)\n\n\n\n\n\n\n\n\nThe basic inputs to the plot() function are x and y, which must be vectors of the same length. You can customize many features (fonts, colors, axes, shape, titles, etc.) through graphic options. Here‚Äôs the same plot with a few customizations:\n\nplot(\n  x    = mtcars$hp,\n  y    = mtcars$mpg,\n  col  = 'darkblue', # \"col\" changes the point color\n  pch  = 19, # \"pch\" changes the point shape\n  main = \"\",\n  xlab = \"Horsepower\",\n  ylab = \"Miles Per Gallon\"\n)\n\n\n\n\n\n\n\n\nFrom this scatter plot, we can observe the relationship between a car‚Äôs horsepower and its fuel efficiency. As you may have guessed, cars with more horsepower or more powerful engines have less fuel efficiency.\n\n\n2.2.2 Histograms with hist()\nThe histogram is one of the most common ways to visualize the distribution of a single, continuous, numeric variable. The hist() function takes just one variable: x. Here‚Äôs a histogram of the waiting variable showing the wait times between eruptions of the Old Faithful geyser:\n\nhist(x = faithful$waiting)\n\n\n\n\n\n\n\n\nWith this plot, we can see a trend where the geyser mostly erupts in roughly 50 or 80 minute intervals. As with the plot() function, you can customize a lot of the histogram features. One common customization is to modify the number of ‚Äúbins‚Äù in the histogram by changing the breaks argument. Here we‚Äôll fix the number of bins to 20 to get a clearer look at the data:\n\nhist(\n  x      = faithful$waiting,\n  breaks = 20,\n  col    = 'lightblue3',\n  main   = \"Waiting Times Between Eruptions\",\n  xlab   = \"Waiting Time (in minutes)\",\n  ylab   = \"Count\"\n)\n\n\n\n\n\n\n\n\nWith our changes, the chart is cleaner and it is clearer which waiting times the were most common.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#better-figures-with-ggplot2",
    "href": "ggplot.html#better-figures-with-ggplot2",
    "title": "2¬† Introduction to ggplot",
    "section": "2.3 Better figures with ggplot2",
    "text": "2.3 Better figures with ggplot2\nArt by Allison Horst\n\n\n\n\n\n\n\n\n\nWhile Base R plot functions are useful for making simple, quick plots, many R users have adopted the ggplot2 package as their primary tool for visualizing data given its flexibility, customization, and ease of use.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#layering-with-ggplot",
    "href": "ggplot.html#layering-with-ggplot",
    "title": "2¬† Introduction to ggplot",
    "section": "2.4 Layering with ggplot",
    "text": "2.4 Layering with ggplot\n\n2.4.1 ‚ÄúGrammar of Graphics‚Äù\nThe ggplot2 library is built on the ‚ÄúGrammar of Graphics‚Äù concept developed by Leland Wilkinson (1999). A ‚Äúgrammar of graphics‚Äù (that‚Äôs what the ‚Äúgg‚Äù in ‚Äúggplot2‚Äù stands for) is a framework that uses layers to describe and construct visualizations or graphics in a structured manner. Here‚Äôs a visual summary of the concept:\nImage Source\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 Making plot layers with ggplot2\nEvery ggplot is built with several layers. At a minimum, you need to specify the data, the aesthetic mapping, and the geometry. We also like to add labels and a theme, so my basic ggplot ‚Äúrecipe‚Äù usually contains at least five layers:\n\nThe data\nThe aesthetic mapping (what goes on the axes?)\nThe geometries (points? bars? etc.)\nThe annotations / labels\nThe theme\n\n\n2.4.2.1 Layer 1: The data\nFor this example, we‚Äôll use the mpg dataset, which contains information on the fuel efficiency of various cars:\n\nhead(mpg)\n\n#&gt; # A tibble: 6 √ó 11\n#&gt;   manufacturer model displ  year   cyl trans    drv     cty   hwy fl    class\n#&gt;   &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 audi         a4      1.8  1999     4 auto(l5) f        18    29 p     comp‚Ä¶\n#&gt; 2 audi         a4      1.8  1999     4 manual(‚Ä¶ f        21    29 p     comp‚Ä¶\n#&gt; 3 audi         a4      2    2008     4 manual(‚Ä¶ f        20    31 p     comp‚Ä¶\n#&gt; 4 audi         a4      2    2008     4 auto(av) f        21    30 p     comp‚Ä¶\n#&gt; 5 audi         a4      2.8  1999     6 auto(l5) f        16    26 p     comp‚Ä¶\n#&gt; 6 audi         a4      2.8  1999     6 manual(‚Ä¶ f        18    26 p     comp‚Ä¶\n\n\nThe ggplot() function initializes the plot with whatever data you‚Äôre using. When you run this, you‚Äôll get a blank plot because you haven‚Äôt told ggplot what to do with the data yet:\n\nmpg %&gt;% \n  ggplot()\n\n\n\n\n\n\n\n\n\n\n2.4.2.2 Layer 2: The aesthetic mapping\nThe aes() function determines which variables will be mapped to the geometries (e.g.¬†the axes). Here I‚Äôll map the displ variable to the x-axis and the hwy variable to the y-axis. Still you don‚Äôt see much, but at least you can now see that the variables are there along the axes.\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy))\n\n\n\n\n\n\n\n\n\n\n2.4.2.3 Layer 3: The geometries\nThe geometries are the visual representations of the data. Here I‚Äôll use geom_point() to create a scatter plot. Now this is starting to look like what we saw before with the simple plot() function:\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n2.4.2.4 Layer 4: The annotations / labels\nUse labs() to modify the plot labels. The arguments in the labs() function match those from the aes() mapping, so x refers to displ and y refers to hwy. We also added a title:\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  labs(\n    x = \"Engine displacement (liters)\",\n    y = \"Highway fuel economy (mpg)\",\n    title = \"Most larger engine vehicles are less fuel efficient\"\n  )\n\n\n\n\n\n\n\n\n\n\n2.4.2.5 Layer 5: The theme\nThe theme controls the overall look of the plot. Here I‚Äôll use theme_bw() (black and white theme) to make the plot look a little nicer:\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  labs(\n    x = \"Engine displacement (liters)\",  \n    y = \"Highway fuel economy (mpg)\", \n    title = \"Most larger engine vehicles are less fuel efficient\"\n  ) + \n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n2.4.2.6 Common themes\nThere are LOTS of ggplot themes. Here are a few we use the most:\n\n\ntheme_bw()\n\n\n\n\n\n\n\n\n\n\n\ntheme_minimal()\n\n\n\n\n\n\n\n\n\n\n\ntheme_classic()",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#making-a-good-ggplot",
    "href": "ggplot.html#making-a-good-ggplot",
    "title": "2¬† Introduction to ggplot",
    "section": "2.5 Making a good ggplot",
    "text": "2.5 Making a good ggplot\nThe 5-step recipe above is a good start, but to make a good ggplot from the raw data, we suggest a slightly modified 7-step recipe:\n\nFormat data frame\nAdd geoms\nCan you read the labels?\nDo you need to rearrange the categories?\nAdjust scales\nAdjust theme\nAnnotate\n\n\n2.5.1 Step 1. Format the data frame\nOne of the most common mistakes people make is not formatting the data frame correctly. If you want to map variables to axes on a plot, you need to make sure those variables are in the data frame!\nIn this example, we‚Äôll just plot a bar chart of the number of wildlife impacts by operator. We can obtain this summary data with the count() function, which is kind of like calling nrow() except for each group in the data frame:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator)\n\n#&gt; # A tibble: 4 √ó 2\n#&gt;   operator               n\n#&gt;   &lt;chr&gt;              &lt;int&gt;\n#&gt; 1 AMERICAN AIRLINES  14887\n#&gt; 2 DELTA AIR LINES     9005\n#&gt; 3 SOUTHWEST AIRLINES 17970\n#&gt; 4 UNITED AIRLINES    15116\n\n\n\n\n2.5.2 Step 2. Add geoms\nFor a bar chart, we use geom_col(), mapping operator to the x axis and n to the y axis:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = operator, y = n),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.3 Step 3. Can you read the labels?\nOne of the biggest mistakes when making a bar chart is failing to check if you can read the labels. Overlapping labels is a common problem, just like in the chart above.\nOften times, if the category labels overlap or are difficult to read, people will rotate the labels vertically or at an angle, which makes you tilt your head to read them.\nA better solutions is to just flip the coordinates with coord_flip():\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\n ggplot() +\n  geom_col(\n    aes(x = operator, y = n),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Flip coordinates\n  coord_flip()\n\n\n\n\n\n\n\n\nOr better yet, just reverse the x and y mapping:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = operator),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.4 Step 4. Do you need to rearrange the categories?\nBy default, ggplot will arrange the bars in alphabetical order, which is almost never what you want.\nIf you want to sort the bars in descending order, you can use the reorder() function to reorder them based on another variable. Here we‚Äôll sort the bars based on the n variable:\n\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.5 Step 5. Adjust scales\nDo you need to adjust the scales on any of the axes?\nOne slightly annoying feature of ggplot is that the bars are not flush against the axes by default. You can adjust this with the expand argument in scale_x_continuous(). The mult = c(0, 0.05)) part is saying to make the bars flush on the left side of the bars and add 5% more space on the right side.\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05)))\n\n\n\n\n\n\n\n\nYou can also change the break points and limits of the bars with breaks and limits:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05)),\n    breaks = c(0, 10000, 20000),\n    limits = c(0, 20000)\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.6 Step 6. Adjust theme\nWhile the three themes shown before are nice built-in themes, I often use one of four themes from the cowplot package:\n\n\n\nFor horizontal bars, add only a vertical grid (the horizontal grid is distracting and not needed). Likewise, for vertical bars, add only a horizontal grid.\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\n  ggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n\n# Adjust theme\n  theme_minimal_vgrid()\n\n\n\n\n\n\n\n\n\n\n2.5.7 Step 7. Annotate\nAt a minimum, you should add a title and axis labels to your charts. In the example below, we‚Äôve also modified the operator variable to be title case to make the labels easier to read. You can set an axis label to NULL if you don‚Äôt want to show it, which we‚Äôll often do if it‚Äôs otehrwise redundant or obvious what it is (in this case, it‚Äôs obvious that the y-axis is showing airlines).\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n  # Make the operator names title case\n  mutate(operator = str_to_title(operator)) %&gt;%\n\n# Add geoms\n  ggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n\n# Adjust theme\n  theme_minimal_vgrid() +\n\n# Annotate\n  labs(\n    x = 'Count',\n    y = NULL, \n    title = \"Number of wildlife impacts by operator\", \n    subtitle = \"Top four operating airlines\",\n    caption = \"Data from the FAA Wildlife Strike Database\"\n  )\n\n\n\n\n\n\n\n\nAnd we‚Äôre done! üéâ",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "part1-getting-started.html",
    "href": "part1-getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "This section offers a quick introduction to the {ggplot2} package for making charts and Quarto for making reproducible reports.\nWe like using Quarto for exploring data and making data visualizations because it allows us to easily blend code, text, and charts, enabling us to document our entire analysis from start to finish.",
    "crumbs": [
      "Getting Started"
    ]
  }
]