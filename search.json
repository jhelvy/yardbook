[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yet Another R Dataviz Book",
    "section": "",
    "text": "Preface\nWelcome to Yet Another R Dataviz Book!\nThis book aims to provide a simple, easy-to-follow guide for making effective data visualizations in .\nThroughout the book, we keep the text to a minimum and focus on communicating key concepts as succinctly as possible. The general approach is to explain an idea in one or two sentences max, then provide an example with code so that you can see how to implement it.\nThe book leverages the {ggplot2} package for making charts and Quarto for making reproducible reports, and the book includes two introductory chapters on using these tools.\nThe book also includes a section on Exploring Data, including chapters on data cleaning, data transformation, and summarizing data using the Tidyverse.\nFinally, the last section of the book is on Data Visualization. Each chapter in this section includes examples of effective strategies for visualizing specific types of data and relationships.\nThis book is still very much in development, so if something seems off please feel free to post an issue on the GitHub repo and we‚Äôll address it ASAP.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "1¬† Introduction to Quarto",
    "section": "",
    "text": "1.1 Working with Quarto\nQuarto is a multilingual version of RMarkdown built on Pandoc that allows us to seamlessly combine text and code to create dynamic outputs. Like RMarkdown, it uses knitr to render outputs in the form of documents, web pages, and more.\nUse R Projects (.Rproj files) to organize your analysis. When you double-click a .Rproj file, RStudio will open an set the working directory to the project folder.\nSo open files that look like this:",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#working-with-quarto",
    "href": "quarto.html#working-with-quarto",
    "title": "1¬† Introduction to Quarto",
    "section": "",
    "text": "Do not double-click .R files! If you do so, RStudio may open to a different project directory, and it won‚Äôt know where your files live.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#anatomy-of-a-quarto-markdown-document",
    "href": "quarto.html#anatomy-of-a-quarto-markdown-document",
    "title": "1¬† Introduction to Quarto",
    "section": "1.2 Anatomy of a Quarto Markdown Document",
    "text": "1.2 Anatomy of a Quarto Markdown Document\nA Quarto Markdown document (.qmd) has three main parts:\n\nHeader\nMarkdown text\nR code",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#header",
    "href": "quarto.html#header",
    "title": "1¬† Introduction to Quarto",
    "section": "1.3 Header",
    "text": "1.3 Header\nYou control the overall document settings in the YAML header (the parts between the --- symbols at the top of the .qmd file. ). Things like the title and author can be set here.\nYou can also define the output type with format. The default output is an html page, which you can open in a web browser:\n\n---\ntitle: Your title\nauthor: Author name\nformat: html \n---\n\nAdd table of contents with toc, or change the theme under the format setting (More on themes at https://quarto.org/docs/output-formats/html-themes.html):\n\n---\ntitle: Your title\nauthor: Author name\ntoc: true \nformat:\n  html:\n    theme: united\n---\n\nYou can also rende to other formats, like PDF with format: pdf, which leverages LaTex to render:\n\n---\ntitle: Your title\nauthor: Author name\nformat: pdf \n---\n\nIf you don‚Äôt have LaTeX on your computer, install tinytex in R:\n\ntinytex::install_tinytex()\n\nYou can also render to Microsoft Word:\n\n---\ntitle: Your title\nauthor: Author name\nformat: docx\n---",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#markdown-text",
    "href": "quarto.html#markdown-text",
    "title": "1¬† Introduction to Quarto",
    "section": "1.4 Markdown Text",
    "text": "1.4 Markdown Text\nUse the # symbol to create headers.\n\n\nType this‚Ä¶\n# HEADER 1\n\n## HEADER 2\n\n### HEADER 3\n\n#### HEADER 4\n\n##### HEADER 5\n\n###### HEADER 6\n\n\n..to get this\n\n\n\n\n\nType this‚Ä¶\n\nnormal text\n_italic text_\n*italic text*\n**bold text**\n***bold italic text***\n~~strikethrough~~\n`code text`\n\n\n\n..to get this\n\nnormal text\nitalic text\nitalic text\nbold text\nbold italic text\nstrikethrough\ncode text\n\n\n\nUse - to make a bullet list:\n\n\nType this‚Ä¶\n\n- first item\n- second item\n- third item\n\n\n\n..to get this\n\nfirst item\nsecond item\nthird item\n\n\n\nUse numbers to make a numbered list.\n\n\nType this‚Ä¶\n\n1. first item\n2. second item\n3. third item\n\n\n\n..to get this\n\nfirst item\nsecond item\nthird item\n\n\n\nSimple url link to another site:\n\n\nType this‚Ä¶\n\n[Download R](http://www.r-project.org/)\n\n\n\n..to get this\nDownload R\n\n\nDon‚Äôt want to use Markdown? Use RStudio Visual Mode! This is a WYSIWYG editor that allows you to write like you would in Word, but then RStudio will convert it to Markdown for you.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#r-code",
    "href": "quarto.html#r-code",
    "title": "1¬† Introduction to Quarto",
    "section": "1.5 R Code",
    "text": "1.5 R Code\n\n1.5.1 Inline R code\nUse backticks to insert R code into text, like this:\n\n`r insert code here`\n\n\nThe sum of 3 and 4 is `r 3 + 4`\n\nProduces this:\nThe sum of 3 and 4 is 7\n\n\n1.5.2 R Code chunks\nInsert R code into a chunk like this:\n```{r}\ninsert code here\ninsert more code here\n```\nFor example, the following code chunk will load the palmerpenguins package and print the first 6 rows of the penguins dataset:\n\n```{r}\nlibrary(palmerpenguins)\n\nhead(penguins)\n```\n\n#&gt; # A tibble: 6 √ó 8\n#&gt;   species island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n#&gt;   &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n#&gt; 1 Adelie  Torgers‚Ä¶           39.1          18.7               181        3750\n#&gt; 2 Adelie  Torgers‚Ä¶           39.5          17.4               186        3800\n#&gt; 3 Adelie  Torgers‚Ä¶           40.3          18                 195        3250\n#&gt; 4 Adelie  Torgers‚Ä¶           NA            NA                  NA          NA\n#&gt; 5 Adelie  Torgers‚Ä¶           36.7          19.3               193        3450\n#&gt; 6 Adelie  Torgers‚Ä¶           39.3          20.6               190        3650\n#&gt; # ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n1.5.3 Chunk Options\nUse chunk options to control what code chunks output.\nSee all options here\n\n\n\n\n\n\n\n\n\nBy default, code chunks print code + output, like this:\n\n```{r}\ncat('hello world!')\n```\n\n#&gt; hello world!\n\n\nSetting echo: false will print only the output but not the code.\n\n\nCode chunk:\n```{r}\n#| echo: false\n\ncat('hello world!')\n```\n\n\nOutput:\n\n\n#&gt; hello world!\n\n\n\n\nSetting eval: false will print only the output but will not run the code.\n\n\nCode chunk:\n```{r}\n#| eval: false\n\ncat('hello world!')\n```\n\n\nOutput:\n\ncat('hello world!')\n\n\n\nSetting include: false will run the code but not print anything.\n\n\nCode chunk:\n```{r}\n#| include: false\n\ncat('hello world!')\n```\n\n\nOutput:\n\n\n\n\n1.5.4 A Global setup Chunk üåç\nWe typically use a setup chunk to set global chunk options at the top of the document, like this:\n```{r}\n#| label: setup\n#| include: false\n\nknitr::opts_chunk$set(\n    warning = FALSE,\n    message = FALSE,\n    fig.path = \"figs/\",\n    fig.width = 7.252,\n    fig.height = 4,\n    comment = \"#&gt;\",\n    fig.retina = 3\n)\n```\nThis chunk will set global chunk options for all following chunks in the document. You can still also use individual chunk options too.\nThis setup chunk does the following:\n\nAny warnings will not be printed\nAny messages will not be printed\nFigures will be saved to the figs/ folder\nFigures will be 7.252 inches wide and 4 inches tall\nAny code print out will start with #&gt;\nThe fig.retina setting improves overall figure resolution.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction to Quarto</span>"
    ]
  },
  {
    "objectID": "ggplot.html",
    "href": "ggplot.html",
    "title": "2¬† Introduction to ggplot",
    "section": "",
    "text": "2.1 Reading in Data\nUse the here package to create file paths\npath &lt;- here::here(\"folder\", \"file.csv\")\nImport data with these functions:",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#reading-in-data",
    "href": "ggplot.html#reading-in-data",
    "title": "2¬† Introduction to ggplot",
    "section": "",
    "text": "File type\nFunction\nPackage\n\n\n\n\n.csv\nread_csv()\nreadr\n\n\n.txt\nread.table()\nutils\n\n\n.xlsx\nread_excel()\nreadxl\n\n\n\n\n2.1.1 Importing Comma Separated Values (.csv)\nRead in .csv files with read_csv(). These usually read in well and the function assumes the first row is the header.\n\nlibrary(tidyverse)\nlibrary(here)\n\ncsvPath &lt;- here('data', 'milk_production.csv')\nmilk_production &lt;- read_csv(csvPath)\n\nhead(milk_production)\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   region    state          year milk_produced\n#&gt;   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 Northeast Maine          1970     619000000\n#&gt; 2 Northeast New Hampshire  1970     356000000\n#&gt; 3 Northeast Vermont        1970    1970000000\n#&gt; 4 Northeast Massachusetts  1970     658000000\n#&gt; 5 Northeast Rhode Island   1970      75000000\n#&gt; 6 Northeast Connecticut    1970     661000000\n\n\n\n\n2.1.2 Importing Text Files (.txt)\nRead in .txt files with read.table(). These kinds of files are a little more ‚Äúraw‚Äù, and you may need to specify the skip argument (how many rows to skip before you get to the header row) and header arguments (whether the first row is the header or not). In this example, the data looks like this:\n\nLand-Ocean Temperature Index (C)\n--------------------------------\n\nYear No_Smoothing  Lowess(5)\n----------------------------\n1880     -0.15     -0.08\n1881     -0.07     -0.12\n1882     -0.10     -0.15\n1883     -0.16     -0.19\n\nSo we need to skip the first 5 rows and then set the header to FALSE:\n\ntxtPath &lt;- here('data', 'nasa_global_temps.txt')\nglobal_temps &lt;- read.table(txtPath, skip = 5, header = FALSE)\n\nhead(global_temps)\n\n#&gt;     V1    V2    V3\n#&gt; 1 1880 -0.15 -0.08\n#&gt; 2 1881 -0.07 -0.12\n#&gt; 3 1882 -0.10 -0.15\n#&gt; 4 1883 -0.16 -0.19\n#&gt; 5 1884 -0.27 -0.23\n#&gt; 6 1885 -0.32 -0.25\n\n\n\n\n2.1.3 Importing Excel Files (.xlsx)\nRead in .xlsx files with read_excel(). With Excel files it‚Äôs a good idea to specify the sheet to read in using the sheet argument:\n\nlibrary(readxl)\n\nxlsxPath &lt;- here('data', 'pv_cell_production.xlsx')\npv_cells &lt;- read_excel(xlsxPath, sheet = 'Cell Prod by Country', skip = 2)\n\nhead(pv_cells)\n\n#&gt; # A tibble: 6 √ó 10\n#&gt;   Year  China     Taiwan Japan Malaysia Germany `South Korea` `United States`\n#&gt;   &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;                   &lt;dbl&gt;\n#&gt; 1 &lt;NA&gt;  Megawatts &lt;NA&gt;    NA   &lt;NA&gt;     &lt;NA&gt;    &lt;NA&gt;                     NA  \n#&gt; 2 &lt;NA&gt;  &lt;NA&gt;      &lt;NA&gt;    NA   &lt;NA&gt;     &lt;NA&gt;    &lt;NA&gt;                     NA  \n#&gt; 3 1995  NA        NA      16.4 NA       NA      NA                       34.8\n#&gt; 4 1996  NA        NA      21.2 NA       NA      NA                       38.8\n#&gt; 5 1997  NA        NA      35   NA       NA      NA                       51  \n#&gt; 6 1998  NA        NA      49   NA       NA      NA                       53.7\n#&gt; # ‚Ñπ 2 more variables: Others &lt;chr&gt;, World &lt;dbl&gt;",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#basic-plots-in-r",
    "href": "ggplot.html#basic-plots-in-r",
    "title": "2¬† Introduction to ggplot",
    "section": "2.2 Basic plots in R",
    "text": "2.2 Basic plots in R\nR has a number of built-in tools for basic graph types. Usually we use these for quick plots just to get a sense of the data I‚Äôm working with. We almost never use these for final charts that we want to show others (for that we use ggplot2). While there are other built in chart types, we will only show the two we find most useful for quickly exploring data: scatter plots and histograms.\n\n2.2.1 Scatter plots with plot()\nA scatter plot helps us see if there is any correlational relationship between two numeric variables. These need to be two ‚Äúcontinuous‚Äù variables, like time, age, money, etc‚Ä¶things that are not categorical in nature (as opposed to ‚Äúdiscrete‚Äù variables, like nationality). Here‚Äôs a scatterplot of the fuel efficiency (miles per gallon) of cars over their respective horsepower using the mtcars dataset:\n\nplot(x = mtcars$hp, y = mtcars$mpg)\n\n\n\n\n\n\n\n\nThe basic inputs to the plot() function are x and y, which must be vectors of the same length. You can customize many features (fonts, colors, axes, shape, titles, etc.) through graphic options. Here‚Äôs the same plot with a few customizations:\n\nplot(\n  x    = mtcars$hp,\n  y    = mtcars$mpg,\n  col  = 'darkblue', # \"col\" changes the point color\n  pch  = 19, # \"pch\" changes the point shape\n  main = \"\",\n  xlab = \"Horsepower\",\n  ylab = \"Miles Per Gallon\"\n)\n\n\n\n\n\n\n\n\nFrom this scatter plot, we can observe the relationship between a car‚Äôs horsepower and its fuel efficiency. As you may have guessed, cars with more horsepower or more powerful engines have less fuel efficiency.\n\n\n2.2.2 Histograms with hist()\nThe histogram is one of the most common ways to visualize the distribution of a single, continuous, numeric variable. The hist() function takes just one variable: x. Here‚Äôs a histogram of the waiting variable showing the wait times between eruptions of the Old Faithful geyser:\n\nhist(x = faithful$waiting)\n\n\n\n\n\n\n\n\nWith this plot, we can see a trend where the geyser mostly erupts in roughly 50 or 80 minute intervals. As with the plot() function, you can customize a lot of the histogram features. One common customization is to modify the number of ‚Äúbins‚Äù in the histogram by changing the breaks argument. Here we‚Äôll fix the number of bins to 20 to get a clearer look at the data:\n\nhist(\n  x      = faithful$waiting,\n  breaks = 20,\n  col    = 'lightblue3',\n  main   = \"Waiting Times Between Eruptions\",\n  xlab   = \"Waiting Time (in minutes)\",\n  ylab   = \"Count\"\n)\n\n\n\n\n\n\n\n\nWith our changes, the chart is cleaner and it is clearer which waiting times the were most common.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#better-figures-with-ggplot2",
    "href": "ggplot.html#better-figures-with-ggplot2",
    "title": "2¬† Introduction to ggplot",
    "section": "2.3 Better figures with ggplot2",
    "text": "2.3 Better figures with ggplot2\nArt by Allison Horst\n\n\n\n\n\n\n\n\n\nWhile Base R plot functions are useful for making simple, quick plots, many R users have adopted the ggplot2 package as their primary tool for visualizing data given its flexibility, customization, and ease of use.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#layering-with-ggplot",
    "href": "ggplot.html#layering-with-ggplot",
    "title": "2¬† Introduction to ggplot",
    "section": "2.4 Layering with ggplot",
    "text": "2.4 Layering with ggplot\n\n2.4.1 ‚ÄúGrammar of Graphics‚Äù\nThe ggplot2 library is built on the ‚ÄúGrammar of Graphics‚Äù concept developed by Leland Wilkinson (1999). A ‚Äúgrammar of graphics‚Äù (that‚Äôs what the ‚Äúgg‚Äù in ‚Äúggplot2‚Äù stands for) is a framework that uses layers to describe and construct visualizations or graphics in a structured manner. Here‚Äôs a visual summary of the concept:\nImage Source\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 Making plot layers with ggplot2\nEvery ggplot is built with several layers. At a minimum, you need to specify the data, the aesthetic mapping, and the geometry. We also like to add labels and a theme, so my basic ggplot ‚Äúrecipe‚Äù usually contains at least five layers:\n\nThe data\nThe aesthetic mapping (what goes on the axes?)\nThe geometries (points? bars? etc.)\nThe annotations / labels\nThe theme\n\n\n2.4.2.1 Layer 1: The data\nFor this example, we‚Äôll use the mpg dataset, which contains information on the fuel efficiency of various cars:\n\nhead(mpg)\n\n#&gt; # A tibble: 6 √ó 11\n#&gt;   manufacturer model displ  year   cyl trans    drv     cty   hwy fl    class\n#&gt;   &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 audi         a4      1.8  1999     4 auto(l5) f        18    29 p     comp‚Ä¶\n#&gt; 2 audi         a4      1.8  1999     4 manual(‚Ä¶ f        21    29 p     comp‚Ä¶\n#&gt; 3 audi         a4      2    2008     4 manual(‚Ä¶ f        20    31 p     comp‚Ä¶\n#&gt; 4 audi         a4      2    2008     4 auto(av) f        21    30 p     comp‚Ä¶\n#&gt; 5 audi         a4      2.8  1999     6 auto(l5) f        16    26 p     comp‚Ä¶\n#&gt; 6 audi         a4      2.8  1999     6 manual(‚Ä¶ f        18    26 p     comp‚Ä¶\n\n\nThe ggplot() function initializes the plot with whatever data you‚Äôre using. When you run this, you‚Äôll get a blank plot because you haven‚Äôt told ggplot what to do with the data yet:\n\nmpg %&gt;% \n  ggplot()\n\n\n\n\n\n\n\n\n\n\n2.4.2.2 Layer 2: The aesthetic mapping\nThe aes() function determines which variables will be mapped to the geometries (e.g.¬†the axes). Here I‚Äôll map the displ variable to the x-axis and the hwy variable to the y-axis. Still you don‚Äôt see much, but at least you can now see that the variables are there along the axes.\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy))\n\n\n\n\n\n\n\n\n\n\n2.4.2.3 Layer 3: The geometries\nThe geometries are the visual representations of the data. Here I‚Äôll use geom_point() to create a scatter plot. Now this is starting to look like what we saw before with the simple plot() function:\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n2.4.2.4 Layer 4: The annotations / labels\nUse labs() to modify the plot labels. The arguments in the labs() function match those from the aes() mapping, so x refers to displ and y refers to hwy. We also added a title:\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  labs(\n    x = \"Engine displacement (liters)\",\n    y = \"Highway fuel economy (mpg)\",\n    title = \"Most larger engine vehicles are less fuel efficient\"\n  )\n\n\n\n\n\n\n\n\n\n\n2.4.2.5 Layer 5: The theme\nThe theme controls the overall look of the plot. Here I‚Äôll use theme_bw() (black and white theme) to make the plot look a little nicer:\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  labs(\n    x = \"Engine displacement (liters)\",  \n    y = \"Highway fuel economy (mpg)\", \n    title = \"Most larger engine vehicles are less fuel efficient\"\n  ) + \n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n2.4.2.6 Common themes\nThere are LOTS of ggplot themes. Here are a few we use the most:\n\n\ntheme_bw()\n\n\n\n\n\n\n\n\n\n\n\ntheme_minimal()\n\n\n\n\n\n\n\n\n\n\n\ntheme_classic()",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "ggplot.html#making-a-good-ggplot",
    "href": "ggplot.html#making-a-good-ggplot",
    "title": "2¬† Introduction to ggplot",
    "section": "2.5 Making a good ggplot",
    "text": "2.5 Making a good ggplot\nThe 5-step recipe above is a good start, but to make a good ggplot from the raw data, we suggest a slightly modified 7-step recipe:\n\nFormat data frame\nAdd geoms\nCan you read the labels?\nDo you need to rearrange the categories?\nAdjust scales\nAdjust theme\nAnnotate\n\n\n2.5.1 Step 1. Format the data frame\nOne of the most common mistakes people make is not formatting the data frame correctly. If you want to map variables to axes on a plot, you need to make sure those variables are in the data frame!\nIn this example, we‚Äôll just plot a bar chart of the number of wildlife impacts by operator. We can obtain this summary data with the count() function, which is kind of like calling nrow() except for each group in the data frame:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator)\n\n#&gt; # A tibble: 4 √ó 2\n#&gt;   operator               n\n#&gt;   &lt;chr&gt;              &lt;int&gt;\n#&gt; 1 AMERICAN AIRLINES  14887\n#&gt; 2 DELTA AIR LINES     9005\n#&gt; 3 SOUTHWEST AIRLINES 17970\n#&gt; 4 UNITED AIRLINES    15116\n\n\n\n\n2.5.2 Step 2. Add geoms\nFor a bar chart, we use geom_col(), mapping operator to the x axis and n to the y axis:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = operator, y = n),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.3 Step 3. Can you read the labels?\nOne of the biggest mistakes when making a bar chart is failing to check if you can read the labels. Overlapping labels is a common problem, just like in the chart above.\nOften times, if the category labels overlap or are difficult to read, people will rotate the labels vertically or at an angle, which makes you tilt your head to read them.\nA better solutions is to just flip the coordinates with coord_flip():\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\n ggplot() +\n  geom_col(\n    aes(x = operator, y = n),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Flip coordinates\n  coord_flip()\n\n\n\n\n\n\n\n\nOr better yet, just reverse the x and y mapping:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = operator),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.4 Step 4. Do you need to rearrange the categories?\nBy default, ggplot will arrange the bars in alphabetical order, which is almost never what you want.\nIf you want to sort the bars in descending order, you can use the reorder() function to reorder them based on another variable. Here we‚Äôll sort the bars based on the n variable:\n\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.5 Step 5. Adjust scales\nDo you need to adjust the scales on any of the axes?\nOne slightly annoying feature of ggplot is that the bars are not flush against the axes by default. You can adjust this with the expand argument in scale_x_continuous(). The mult = c(0, 0.05)) part is saying to make the bars flush on the left side of the bars and add 5% more space on the right side.\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05)))\n\n\n\n\n\n\n\n\nYou can also change the break points and limits of the bars with breaks and limits:\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05)),\n    breaks = c(0, 10000, 20000),\n    limits = c(0, 20000)\n  )\n\n\n\n\n\n\n\n\n\n\n2.5.6 Step 6. Adjust theme\nWhile the three themes shown before are nice built-in themes, I often use one of four themes from the cowplot package:\n\n\n\nFor horizontal bars, add only a vertical grid (the horizontal grid is distracting and not needed). Likewise, for vertical bars, add only a horizontal grid.\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\n  ggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n\n# Adjust theme\n  theme_minimal_vgrid()\n\n\n\n\n\n\n\n\n\n\n2.5.7 Step 7. Annotate\nAt a minimum, you should add a title and axis labels to your charts. In the example below, we‚Äôve also modified the operator variable to be title case to make the labels easier to read. You can set an axis label to NULL if you don‚Äôt want to show it, which we‚Äôll often do if it‚Äôs otehrwise redundant or obvious what it is (in this case, it‚Äôs obvious that the y-axis is showing airlines).\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n  # Make the operator names title case\n  mutate(operator = str_to_title(operator)) %&gt;%\n\n# Add geoms\n  ggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7, alpha = 0.8\n  ) +\n\n# Adjust x axis scale\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n\n# Adjust theme\n  theme_minimal_vgrid() +\n\n# Annotate\n  labs(\n    x = 'Count',\n    y = NULL, \n    title = \"Number of wildlife impacts by operator\", \n    subtitle = \"Top four operating airlines\",\n    caption = \"Data from the FAA Wildlife Strike Database\"\n  )\n\n\n\n\n\n\n\n\nAnd we‚Äôre done! üéâ",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction to ggplot</span>"
    ]
  },
  {
    "objectID": "tidy-data.html",
    "href": "tidy-data.html",
    "title": "3¬† Tidy Data",
    "section": "",
    "text": "3.1 ‚ÄúWide‚Äù and ‚ÄúLong‚Äù Formatted Data\nDatasets are usually structured in one of two ways:\nTake a look at this example of a dataset on federal R&D spending by U.S. government department:\nfed_spend_wide &lt;- read_csv(here('data', 'fed_spend_wide.csv'))\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DHS   DOC   DOD   DOE   DOT   EPA   HHS Interior  NASA   NIH   NSF\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976     0   819 35696 10882  1142   968  9226     1152 12513  8025  2372\n#&gt; 2  1977     0   837 37967 13741  1095   966  9507     1082 12553  8214  2395\n#&gt; 3  1978     0   871 37022 15663  1156  1175 10533     1125 12516  8802  2446\n#&gt; 4  1979     0   952 37174 15612  1004  1102 10127     1176 13079  9243  2404\n#&gt; 5  1980     0   945 37005 15226  1048   903 10045     1082 13837  9093  2407\n#&gt; 6  1981     0   829 41737 14798   978   901  9644      990 13276  8580  2300\n#&gt; # ‚Ñπ 3 more variables: Other &lt;dbl&gt;, USDA &lt;dbl&gt;, VA &lt;dbl&gt;\nAs the name suggests, this dataset is in wide format, where each department is a column.\nCompare this to the long format:\nfed_spend_long &lt;- read_csv(here('data', 'fed_spend_long.csv'))\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   department  year rd_budget_mil\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 DOD         1976         35696\n#&gt; 2 NASA        1976         12513\n#&gt; 3 DOE         1976         10882\n#&gt; 4 HHS         1976          9226\n#&gt; 5 NIH         1976          8025\n#&gt; 6 NSF         1976          2372\nThis is the same dataset, but in long format, where each observation has its own row. Here you will notice that the department names are now variables, and the R&D spending is a single column. The year is repeated for each department.\nHow do we know which format a dataset is in?\nA helpful heuristic is to ask yourself:",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "tidy-data.html#wide-and-long-formatted-data",
    "href": "tidy-data.html#wide-and-long-formatted-data",
    "title": "3¬† Tidy Data",
    "section": "",
    "text": "Wide format: each variable has its own column\nLong format: each observation has its own row\n\n\n\n\nSource\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDo the names describe the values?\n\n\n\n\nIf Yes: ‚ÄúLong‚Äù format\nIf No: ‚ÄúWide‚Äù format",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "tidy-data.html#tidy-data-long-format",
    "href": "tidy-data.html#tidy-data-long-format",
    "title": "3¬† Tidy Data",
    "section": "3.2 Tidy data = ‚ÄúLong‚Äù format",
    "text": "3.2 Tidy data = ‚ÄúLong‚Äù format\nWhen we refer to ‚Äútidy data‚Äù, we are referring to data in long format that follows the ‚Äútidy‚Äù principles:\n\nEach variable has its own column\nEach observation has its own row\n\n\n\n\nYou can verify that the federal spending dataset is in long format:\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   department  year rd_budget_mil\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 DOD         1976         35696\n#&gt; 2 NASA        1976         12513\n#&gt; 3 DOE         1976         10882\n#&gt; 4 HHS         1976          9226\n#&gt; 5 NIH         1976          8025\n#&gt; 6 NSF         1976          2372",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "tidy-data.html#reshaping-data",
    "href": "tidy-data.html#reshaping-data",
    "title": "3¬† Tidy Data",
    "section": "3.3 Reshaping data",
    "text": "3.3 Reshaping data\nWe use the pivot_longer() and pivot_wider() functions to reshape data between long and wide formats.\n\n\n\nSource\n\n3.3.1 From ‚Äúlong‚Äù to ‚Äúwide‚Äù with pivot_wider()\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   department  year rd_budget_mil\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 DOD         1976         35696\n#&gt; 2 NASA        1976         12513\n#&gt; 3 DOE         1976         10882\n#&gt; 4 HHS         1976          9226\n#&gt; 5 NIH         1976          8025\n#&gt; 6 NSF         1976          2372\n\n\nTo convert to wide format, we need to specify which column to convert into the column names and which column to convert into the column values:\n\nfed_spend_wide &lt;- fed_spend_long %&gt;%\n  pivot_wider(\n    names_from = department,\n    values_from = rd_budget_mil\n  )\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DOD  NASA   DOE   HHS   NIH   NSF  USDA Interior   DOT   EPA   DOC\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 35696 12513 10882  9226  8025  2372  1837     1152  1142   968   819\n#&gt; 2  1977 37967 12553 13741  9507  8214  2395  1796     1082  1095   966   837\n#&gt; 3  1978 37022 12516 15663 10533  8802  2446  1962     1125  1156  1175   871\n#&gt; 4  1979 37174 13079 15612 10127  9243  2404  2054     1176  1004  1102   952\n#&gt; 5  1980 37005 13837 15226 10045  9093  2407  1887     1082  1048   903   945\n#&gt; 6  1981 41737 13276 14798  9644  8580  2300  1964      990   978   901   829\n#&gt; # ‚Ñπ 3 more variables: DHS &lt;dbl&gt;, VA &lt;dbl&gt;, Other &lt;dbl&gt;\n\n\n\n\n3.3.2 From ‚Äúwide‚Äù to ‚Äúlong‚Äù with pivot_longer()\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DOD  NASA   DOE   HHS   NIH   NSF  USDA Interior   DOT   EPA   DOC\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 35696 12513 10882  9226  8025  2372  1837     1152  1142   968   819\n#&gt; 2  1977 37967 12553 13741  9507  8214  2395  1796     1082  1095   966   837\n#&gt; 3  1978 37022 12516 15663 10533  8802  2446  1962     1125  1156  1175   871\n#&gt; 4  1979 37174 13079 15612 10127  9243  2404  2054     1176  1004  1102   952\n#&gt; 5  1980 37005 13837 15226 10045  9093  2407  1887     1082  1048   903   945\n#&gt; 6  1981 41737 13276 14798  9644  8580  2300  1964      990   978   901   829\n#&gt; # ‚Ñπ 3 more variables: DHS &lt;dbl&gt;, VA &lt;dbl&gt;, Other &lt;dbl&gt;\n\n\nTo convert to long format, we need to create new column names for the names and values, and we also need to specify which columns to convert:\n\nfed_spend_long &lt;- fed_spend_wide %&gt;%\n  pivot_longer( \n    names_to = \"department\",\n    values_to = \"rd_budget_mil\",\n    cols = DOD:Other\n  )\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;    year department rd_budget_mil\n#&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n#&gt; 1  1976 DOD                35696\n#&gt; 2  1976 NASA               12513\n#&gt; 3  1976 DOE                10882\n#&gt; 4  1976 HHS                 9226\n#&gt; 5  1976 NIH                 8025\n#&gt; 6  1976 NSF                 2372\n\n\nYou can also set cols by selecting which columns not to use, like this:\n\nfed_spend_long &lt;- fed_spend_wide %&gt;%\n  pivot_longer(\n    names_to = \"department\", \n    values_to = \"rd_budget_mil\",\n    cols = -year\n  )\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;    year department rd_budget_mil\n#&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n#&gt; 1  1976 DOD                35696\n#&gt; 2  1976 NASA               12513\n#&gt; 3  1976 DOE                10882\n#&gt; 4  1976 HHS                 9226\n#&gt; 5  1976 NIH                 8025\n#&gt; 6  1976 NSF                 2372",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "tidy-data.html#tidy-data-wrangling",
    "href": "tidy-data.html#tidy-data-wrangling",
    "title": "3¬† Tidy Data",
    "section": "3.4 Tidy data wrangling",
    "text": "3.4 Tidy data wrangling\nThere‚Äôs a good reason why we like to keep our data in a long (tidy) format: it lets us use a consistent set of functions for manipulating, summarizing, and visualizing data.\nHere‚Äôs a quick explanation with cute graphics, by Allison Horst:\n\n  \n\n\n3.4.1 Example 1: Total R&D spending in each year\nThis is a simple enough task, but with our data in wide format, we need to add each column manually like this:\n\nfed_spend_wide %&gt;%\n  mutate(total = DHS + DOC + DOD + DOE + DOT + EPA + HHS + Interior + NASA + NIH + NSF + Other + USDA + VA) %&gt;%\n  select(year, total)\n\n#&gt; # A tibble: 42 √ó 2\n#&gt;    year total\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 86227\n#&gt; 2  1977 91807\n#&gt; 3  1978 94864\n#&gt; 4  1979 96601\n#&gt; 5  1980 96305\n#&gt; 6  1981 98304\n#&gt; # ‚Ñπ 36 more rows\n\n\nThis is cumbersome, and prone to error.\nAn alternative approach is to embrace the tidy data format. We‚Äôll use pivot_longer() to convert the data into long format first, and then we‚Äôll summarise the data:\n\nfed_spend_long &lt;- fed_spend_wide %&gt;%\n  pivot_longer(\n    names_to = \"department\", \n    values_to = \"rd_budget_mil\",\n    cols = -year\n  ) \n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;    year department rd_budget_mil\n#&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n#&gt; 1  1976 DOD                35696\n#&gt; 2  1976 NASA               12513\n#&gt; 3  1976 DOE                10882\n#&gt; 4  1976 HHS                 9226\n#&gt; 5  1976 NIH                 8025\n#&gt; 6  1976 NSF                 2372\n\n\nNow that our data is in long format, we can use the group_by() and summarise() functions to compute the total R&D spending in each year:\n\nfed_spend_long %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(rd_budget_mil))\n\n#&gt; # A tibble: 42 √ó 2\n#&gt;    year total\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 86227\n#&gt; 2  1977 91807\n#&gt; 3  1978 94864\n#&gt; 4  1979 96601\n#&gt; 5  1980 96305\n#&gt; 6  1981 98304\n#&gt; # ‚Ñπ 36 more rows\n\n\nThis is a much cleaner approach, and it‚Äôs much less prone to error as we don‚Äôt need to manually specify each column that we are summing.\n\n\n3.4.2 Example 2: Visualizing total spending by department\nLet‚Äôs see how we can do this with our data in wide format:\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DOD  NASA   DOE   HHS   NIH   NSF  USDA Interior   DOT   EPA   DOC\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 35696 12513 10882  9226  8025  2372  1837     1152  1142   968   819\n#&gt; 2  1977 37967 12553 13741  9507  8214  2395  1796     1082  1095   966   837\n#&gt; 3  1978 37022 12516 15663 10533  8802  2446  1962     1125  1156  1175   871\n#&gt; 4  1979 37174 13079 15612 10127  9243  2404  2054     1176  1004  1102   952\n#&gt; 5  1980 37005 13837 15226 10045  9093  2407  1887     1082  1048   903   945\n#&gt; 6  1981 41737 13276 14798  9644  8580  2300  1964      990   978   901   829\n#&gt; # ‚Ñπ 3 more variables: DHS &lt;dbl&gt;, VA &lt;dbl&gt;, Other &lt;dbl&gt;\n\n\n\nggplot(fed_spend_wide) +\n  geom_col(aes(x = rd_budget_mil, y = department)) +\n  theme_bw() +\n  labs(\n      x = \"R&D Spending ($Millions)\",\n      y = \"Federal Agency\"\n  )\n\n#&gt; Error in `geom_col()`:\n#&gt; ! Problem while computing aesthetics.\n#&gt; ‚Ñπ Error occurred in the 1st layer.\n#&gt; Caused by error:\n#&gt; ! object 'rd_budget_mil' not found\n\n\nIn wide format, we actually cannot plot the total by department, because there is no department variable!\nHere we must first convert to long format, and then we can plot the data:\n\nfed_spend_wide %&gt;%\n  pivot_longer(\n    names_to = \"department\",\n    values_to = \"rd_budget_mil\",\n    cols = -year\n  ) %&gt;%\n  ggplot() +\n  geom_col(aes(x = rd_budget_mil, y = reorder(department, rd_budget_mil))) +\n  theme_bw() +\n  labs(\n    x = \"R&D Spending ($Millions)\",\n    y = \"Federal Agency\"\n  )",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html",
    "href": "cleaning-data.html",
    "title": "4¬† Cleaning Data",
    "section": "",
    "text": "4.1 Merging Data Sets with Joins\nTo start off, let‚Äôs take a look at this map. What‚Äôs wrong with it?\nClearly, the abbreviations are all mixed up. The likely culprit: merging two columns\nhead(names)\n\n#&gt;   state_name\n#&gt; 1    Alabama\n#&gt; 2     Alaska\n#&gt; 3    Arizona\n#&gt; 4   Arkansas\n#&gt; 5 California\n#&gt; 6   Colorado\n\nhead(abbs)\n\n#&gt;   state_abb\n#&gt; 1        AK\n#&gt; 2        AL\n#&gt; 3        AR\n#&gt; 4        AZ\n#&gt; 5        CA\n#&gt; 6        CO\nresult &lt;- bind_cols(names, abbs)\nhead(result)\n\n#&gt;   state_name state_abb\n#&gt; 1    Alabama        AK\n#&gt; 2     Alaska        AL\n#&gt; 3    Arizona        AR\n#&gt; 4   Arkansas        AZ\n#&gt; 5 California        CA\n#&gt; 6   Colorado        CO\nAs shown above, simply binding or merging two data sets is not the best choice. This is where joins come into play.\nThere are three types of joins that we can utilize to properly merge data sets.\nTake a look at the different joins applied to the band_members & band_instruments data sets.\nband_members\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  band   \n#&gt;   &lt;chr&gt; &lt;chr&gt;  \n#&gt; 1 Mick  Stones \n#&gt; 2 John  Beatles\n#&gt; 3 Paul  Beatles\nband_instruments\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  plays \n#&gt;   &lt;chr&gt; &lt;chr&gt; \n#&gt; 1 John  guitar\n#&gt; 2 Paul  bass  \n#&gt; 3 Keith guitar",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#merging-data-sets-with-joins",
    "href": "cleaning-data.html#merging-data-sets-with-joins",
    "title": "4¬† Cleaning Data",
    "section": "",
    "text": "inner_join()\nleft_join() / right_join()\nfull_join()\n\n\n\n\n\n4.1.0.1 inner_join()\n\nband_members %&gt;%\n    inner_join(band_instruments)\n\n#&gt; # A tibble: 2 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 John  Beatles guitar\n#&gt; 2 Paul  Beatles bass\n\n\n\n\n\n\n\n4.1.0.2 full_join()\n\nband_members %&gt;%\n    full_join(band_instruments)\n\n#&gt; # A tibble: 4 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass  \n#&gt; 4 Keith &lt;NA&gt;    guitar\n\n\n\n\n\n\n\n4.1.0.3 left_join()\n\nband_members %&gt;%\n    left_join(band_instruments)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\n\n\n\n\n\n4.1.0.4 right_join()\n\nband_members %&gt;%\n    right_join(band_instruments)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 John  Beatles guitar\n#&gt; 2 Paul  Beatles bass  \n#&gt; 3 Keith &lt;NA&gt;    guitar\n\n\n\n\n\n\n\n4.1.0.5 We can also specify the joining variable name\n\nband_members %&gt;%\n    left_join(band_instruments)\n\n#&gt; Joining with `by = join_by(name)`\n\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\n\nband_members %&gt;%\n    left_join(\n        band_instruments,\n        by = 'name'\n    )\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\n\n\n4.1.0.6 If the names differ, use by = c(\"left_name\" = \"joining_name\")\n\nband_members\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  band   \n#&gt;   &lt;chr&gt; &lt;chr&gt;  \n#&gt; 1 Mick  Stones \n#&gt; 2 John  Beatles\n#&gt; 3 Paul  Beatles\n\n\n\nband_instruments2\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   artist plays \n#&gt;   &lt;chr&gt;  &lt;chr&gt; \n#&gt; 1 John   guitar\n#&gt; 2 Paul   bass  \n#&gt; 3 Keith  guitar\n\n\n\nband_members %&gt;%\n  left_join(\n    band_instruments2,\n    by = c(\"name\" = \"artist\")\n  ) \n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\nOr, just rename the joining variable in a pipe.\n\nband_members\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  band   \n#&gt;   &lt;chr&gt; &lt;chr&gt;  \n#&gt; 1 Mick  Stones \n#&gt; 2 John  Beatles\n#&gt; 3 Paul  Beatles\n\n\n\nband_instruments2\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   artist plays \n#&gt;   &lt;chr&gt;  &lt;chr&gt; \n#&gt; 1 John   guitar\n#&gt; 2 Paul   bass  \n#&gt; 3 Keith  guitar\n\n\n\nband_members %&gt;%\n  rename(artist = name) %&gt;%\n  left_join(\n    band_instruments2,\n    by = \"artist\"\n  )\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   artist band    plays \n#&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick   Stones  &lt;NA&gt;  \n#&gt; 2 John   Beatles guitar\n#&gt; 3 Paul   Beatles bass",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#variable-types-and-names",
    "href": "cleaning-data.html#variable-types-and-names",
    "title": "4¬† Cleaning Data",
    "section": "4.2 Variable Types and Names",
    "text": "4.2 Variable Types and Names\n\n4.2.1 Variable Types\n\n4.2.1.1 Always check variable types after reading in data!\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx'))\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ Ranking                         &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", ‚Ä¶\n#&gt; $ State                           &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIF‚Ä¶\n#&gt; $ `Installed Capacity (MW)`       &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464‚Ä¶\n#&gt; $ `Equivalent Homes Powered`      &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.‚Ä¶\n#&gt; $ `Total Investment ($ Millions)` &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"1‚Ä¶\n#&gt; $ `Wind Projects Online`          &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, ‚Ä¶\n#&gt; $ `# of Wind Turbines`            &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"697‚Ä¶\n\n\n\n\n4.2.1.2 Be careful converting strings to numbers!\n\n4.2.1.2.1 as.numeric()\n\nas.numeric(c(\"2.1\", \"3.7\", \"4.50\"))\n\n#&gt; [1] 2.1 3.7 4.5\n\nas.numeric(c(\"$2.1\", \"$3.7\", \"$4.50\"))\n\n#&gt; [1] NA NA NA\n\n\n\n\n4.2.1.2.2 parse_number()\n\nparse_number(c(\"2.1\", \"3.7\", \"4.50\"))\n\n#&gt; [1] 2.1 3.7 4.5\n\nparse_number(c(\"$2.1\", \"$3.7\", \"$4.50\"))\n\n#&gt; [1] 2.1 3.7 4.5\n\nparse_number(c(\"1-800-123-4567\"))\n\n#&gt; [1] 1\n\n\nOnce applied we get:\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  mutate(\n    Ranking = as.numeric(Ranking),\n    `Equivalent Homes Powered` = as.numeric(`Equivalent Homes Powered`),\n    `Total Investment ($ Millions)` = as.numeric(`Total Investment ($ Millions)`),\n    `# of Wind Turbines` = as.numeric(`# of Wind Turbines`)\n  )\n    \nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ Ranking                         &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ‚Ä¶\n#&gt; $ State                           &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIF‚Ä¶\n#&gt; $ `Installed Capacity (MW)`       &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464‚Ä¶\n#&gt; $ `Equivalent Homes Powered`      &lt;dbl&gt; 6235000, 2268000, 1935000, 1298000,‚Ä¶\n#&gt; $ `Total Investment ($ Millions)` &lt;dbl&gt; 42000, 13700, 14200, 12600, 9400, 8‚Ä¶\n#&gt; $ `Wind Projects Online`          &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, ‚Ä¶\n#&gt; $ `# of Wind Turbines`            &lt;dbl&gt; 12750, 3717, 4145, 6972, 2795, 2632‚Ä¶\n\n\n\n\n\n\n\n4.2.2 Renaming made easy\njanitor::clean_names()\nThe janitor package is a great tool to ‚Äúclean‚Äù names of columns in data sets.\n\n\n\nIf we take the wind data ..\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx'))\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ Ranking                         &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", ‚Ä¶\n#&gt; $ State                           &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIF‚Ä¶\n#&gt; $ `Installed Capacity (MW)`       &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464‚Ä¶\n#&gt; $ `Equivalent Homes Powered`      &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.‚Ä¶\n#&gt; $ `Total Investment ($ Millions)` &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"1‚Ä¶\n#&gt; $ `Wind Projects Online`          &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, ‚Ä¶\n#&gt; $ `# of Wind Turbines`            &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"697‚Ä¶\n\n\n.. and use janitor, we can easily ‚Äúclean‚Äù the names.\n\nlibrary(janitor)\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  clean_names()\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ ranking                   &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\",‚Ä¶\n#&gt; $ state                     &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIFORNIA\"‚Ä¶\n#&gt; $ installed_capacity_mw     &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464, 3699‚Ä¶\n#&gt; $ equivalent_homes_powered  &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.0\", \"1‚Ä¶\n#&gt; $ total_investment_millions &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"12600.0‚Ä¶\n#&gt; $ wind_projects_online      &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, 25, 20‚Ä¶\n#&gt; $ number_of_wind_turbines   &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"6972.0\", ‚Ä¶\n\n\nWe can even change the style of the names.\n\nlibrary(janitor)\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  clean_names(case = 'lower_camel')\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ ranking                 &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"‚Ä¶\n#&gt; $ state                   &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIFORNIA\", ‚Ä¶\n#&gt; $ installedCapacityMw     &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464, 3699, ‚Ä¶\n#&gt; $ equivalentHomesPowered  &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.0\", \"129‚Ä¶\n#&gt; $ totalInvestmentMillions &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"12600.0\",‚Ä¶\n#&gt; $ windProjectsOnline      &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, 25, 20, ‚Ä¶\n#&gt; $ numberOfWindTurbines    &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"6972.0\", \"2‚Ä¶\n\n\n\nlibrary(janitor)\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  clean_names(case = 'screaming_snake')\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ RANKING                   &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\",‚Ä¶\n#&gt; $ STATE                     &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIFORNIA\"‚Ä¶\n#&gt; $ INSTALLED_CAPACITY_MW     &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464, 3699‚Ä¶\n#&gt; $ EQUIVALENT_HOMES_POWERED  &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.0\", \"1‚Ä¶\n#&gt; $ TOTAL_INVESTMENT_MILLIONS &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"12600.0‚Ä¶\n#&gt; $ WIND_PROJECTS_ONLINE      &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, 25, 20‚Ä¶\n#&gt; $ NUMBER_OF_WIND_TURBINES   &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"6972.0\", ‚Ä¶\n\n\n\n4.2.2.1 select() : More Powerful Than You Probably Thought\nExample: data on sleeping patterns of different mammals\n\nglimpse(msleep)\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\nUse select() to choose which columns to keep\n\nmsleep %&gt;%\n  select(name:order, sleep_total:sleep_cycle) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 7\n#&gt; $ name        &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater sh‚Ä¶\n#&gt; $ genus       &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"B‚Ä¶\n#&gt; $ vore        &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"ca‚Ä¶\n#&gt; $ order       &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"A‚Ä¶\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n\n\nUse select() to choose which columns to drop\n\nmsleep %&gt;%\n  select(-(name:order)) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 7\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\n\n4.2.2.1.1 We can also select columns based on partial column names\nFor example, we can select columns that start with ‚Äúsleep‚Äù:\n\nmsleep %&gt;%\n  select(name, starts_with(\"sleep\")) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 4\n#&gt; $ name        &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater sh‚Ä¶\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n\n\nOr we can select columns that contain ‚Äúeep‚Äù and end with ‚Äúwt‚Äù:\n\nmsleep %&gt;%\n  select(contains(\"eep\"), ends_with(\"wt\")) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 5\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n#&gt; $ brainwt     &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000,‚Ä¶\n#&gt; $ bodywt      &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0.‚Ä¶\n\n\n\n\n4.2.2.1.2 Use select() to select columns based on their data type\nSelect only numeric columns:\n\nmsleep %&gt;%\n    select_if(is.numeric) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 6\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n#&gt; $ awake       &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0,‚Ä¶\n#&gt; $ brainwt     &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000,‚Ä¶\n#&gt; $ bodywt      &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0.‚Ä¶\n\n\nSelect only character columns:\n\nmsleep %&gt;%\n    select_if(is.character) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 5\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n\n\n\n\n4.2.2.1.3 Use select() to reorder variables\n\nmsleep %&gt;%\n    select(everything()) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\n\nmsleep %&gt;%\n    select(conservation, awake, everything()) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\n\n\n4.2.2.1.4 Use select() to rename variables\nUse rename() to just change the name\n\nmsleep %&gt;%\n  rename(\n    animal = name,\n    extinction_threat = conservation\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ genus             &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bo‚Ä¶\n#&gt; $ vore              &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi‚Ä¶\n#&gt; $ order             &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorph‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n#&gt; $ sleep_total       &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1‚Ä¶\n#&gt; $ sleep_rem         &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.‚Ä¶\n#&gt; $ sleep_cycle       &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38‚Ä¶\n#&gt; $ awake             &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,‚Ä¶\n#&gt; $ brainwt           &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.‚Ä¶\n#&gt; $ bodywt            &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4‚Ä¶\n\n\nUse select() to change the name and drop everything else\n\nmsleep %&gt;%\n  select(\n    animal = name,\n    extinction_threat = conservation\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 2\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n\n\n\n\n4.2.2.1.5 Use select() to rename variables\nUse rename() to just change the name\n\nmsleep %&gt;%\n  rename(\n    animal = name,\n    extinction_threat = conservation\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ genus             &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bo‚Ä¶\n#&gt; $ vore              &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi‚Ä¶\n#&gt; $ order             &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorph‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n#&gt; $ sleep_total       &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1‚Ä¶\n#&gt; $ sleep_rem         &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.‚Ä¶\n#&gt; $ sleep_cycle       &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38‚Ä¶\n#&gt; $ awake             &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,‚Ä¶\n#&gt; $ brainwt           &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.‚Ä¶\n#&gt; $ bodywt            &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4‚Ä¶\n\n\nUse select() + everything() to change names and keep everything else\n\nmsleep %&gt;%\n  select(\n    animal = name,\n    extinction_threat = conservation,\n    everything()\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n#&gt; $ genus             &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bo‚Ä¶\n#&gt; $ vore              &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi‚Ä¶\n#&gt; $ order             &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorph‚Ä¶\n#&gt; $ sleep_total       &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1‚Ä¶\n#&gt; $ sleep_rem         &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.‚Ä¶\n#&gt; $ sleep_cycle       &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38‚Ä¶\n#&gt; $ awake             &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,‚Ä¶\n#&gt; $ brainwt           &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.‚Ä¶\n#&gt; $ bodywt            &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4‚Ä¶",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#recoding-variables",
    "href": "cleaning-data.html#recoding-variables",
    "title": "4¬† Cleaning Data",
    "section": "4.3 Recoding Variables",
    "text": "4.3 Recoding Variables\n\n4.3.1 Recoding with ifelse()\nExample: Create a variable, cost_high, that is TRUE if the repair costs were greater than the median costs and FALSE otherwise.\n\nwildlife_impacts1 &lt;- wildlife_impacts %&gt;%\n  rename(cost = cost_repairs_infl_adj) %&gt;%\n  filter(!is.na(cost)) %&gt;%\n  mutate(\n    cost_median = median(cost),\n    cost_high = ifelse(cost &gt; cost_median, TRUE, FALSE)\n  )\n\nwildlife_impacts1 %&gt;%\n  select(cost, cost_median, cost_high) %&gt;%\n  head()\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;     cost cost_median cost_high\n#&gt;    &lt;dbl&gt;       &lt;dbl&gt; &lt;lgl&gt;    \n#&gt; 1   1000       26783 FALSE    \n#&gt; 2    200       26783 FALSE    \n#&gt; 3  10000       26783 FALSE    \n#&gt; 4 100000       26783 TRUE     \n#&gt; 5  20000       26783 FALSE    \n#&gt; 6 487000       26783 TRUE\n\n\n\n\n4.3.2 Recoding with nested ifelse()\nCreate a variable, season, based on the incident_month variable.\n\nwildlife_impacts2 &lt;- wildlife_impacts %&gt;%\n  mutate(season = ifelse(\n    incident_month %in% c(3, 4, 5), 'spring', ifelse(\n    incident_month %in% c(6, 7, 8), 'summer', ifelse(\n    incident_month %in% c(9, 10, 11), 'fall', 'winter')))\n  ) \n\nwildlife_impacts2 %&gt;%\n  distinct(incident_month, season) %&gt;%\n  head()\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   incident_month season\n#&gt;            &lt;dbl&gt; &lt;chr&gt; \n#&gt; 1             12 winter\n#&gt; 2             11 fall  \n#&gt; 3             10 fall  \n#&gt; 4              9 fall  \n#&gt; 5              8 summer\n#&gt; 6              7 summer\n\n\n\n\n4.3.3 Recoding with case_when()\nCreate a variable, season, based on the incident_month variable.\nNote: If you don‚Äôt include the final TRUE ~ 'winter' condition, you‚Äôll get NA for those cases.\n\nwildlife_impacts2 &lt;- wildlife_impacts %&gt;%\n  mutate(season = case_when(\n    incident_month %in% c(3, 4, 5) ~ 'spring',\n    incident_month %in% c(6, 7, 8) ~ 'summer',\n    incident_month %in% c(9, 10, 11) ~ 'fall',\n    TRUE ~ 'winter')\n  ) \n\nwildlife_impacts2 %&gt;%\n  distinct(incident_month, season) %&gt;%\n  head()\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   incident_month season\n#&gt;            &lt;dbl&gt; &lt;chr&gt; \n#&gt; 1             12 winter\n#&gt; 2             11 fall  \n#&gt; 3             10 fall  \n#&gt; 4              9 fall  \n#&gt; 5              8 summer\n#&gt; 6              7 summer\n\n\n\n4.3.3.1 Recoding with case_when() with between()\nCreate a variable, season, based on the incident_month variable.\n\nwildlife_impacts2 &lt;- wildlife_impacts %&gt;%\n  mutate(season = case_when(\n    between(incident_month, 3, 5) ~ 'spring',\n    between(incident_month, 6, 8) ~ 'summer',\n    between(incident_month, 9, 11) ~ 'fall',\n    TRUE ~ 'winter') \n  )\n\nwildlife_impacts2 %&gt;%\n    distinct(incident_month, season) %&gt;%\n    head()\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   incident_month season\n#&gt;            &lt;dbl&gt; &lt;chr&gt; \n#&gt; 1             12 winter\n#&gt; 2             11 fall  \n#&gt; 3             10 fall  \n#&gt; 4              9 fall  \n#&gt; 5              8 summer\n#&gt; 6              7 summer\n\n\n\n\n4.3.3.2 case_when() is ‚Äúcleaner‚Äù than ifelse()\nConvert the num_engs variable into a word of the number.\nifelse()\n\nwildlife_impacts3 &lt;- wildlife_impacts %&gt;%\n  mutate(num_engs = ifelse(\n    num_engs == 1, 'one', ifelse(\n    num_engs == 2, 'two', ifelse(\n    num_engs == 3, 'three', ifelse(\n    num_engs == 4, 'four',\n    as.character(num_engs)))))\n  )\n\nunique(wildlife_impacts3$num_engs)\n\n#&gt; [1] \"two\"   NA      \"three\" \"four\"  \"one\"\n\n\ncase_when()\n\nwildlife_impacts3 &lt;- wildlife_impacts %&gt;%\n  mutate(num_engs = case_when(\n    num_engs == 1 ~ 'one',\n    num_engs == 2 ~ 'two',\n    num_engs == 3 ~ 'three',\n    num_engs == 4 ~ 'four')\n  )\n\nunique(wildlife_impacts3$num_engs)\n\n#&gt; [1] \"two\"   NA      \"three\" \"four\"  \"one\"\n\n\n\n\n\n4.3.4 Break a single variable into two with separate()\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(rate, into = c(\"cases\", \"population\"))\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country      year cases  population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n#&gt; 1 Afghanistan  1999 745    19987071  \n#&gt; 2 Afghanistan  2000 2666   20595360  \n#&gt; 3 Brazil       1999 37737  172006362 \n#&gt; 4 Brazil       2000 80488  174504898 \n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\n\n\n\n4.3.5 Break a single variable into two with separate()\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n      rate,\n      into = c(\"cases\", \"population\"),\n      sep = \"/\"\n  )\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country      year cases  population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n#&gt; 1 Afghanistan  1999 745    19987071  \n#&gt; 2 Afghanistan  2000 2666   20595360  \n#&gt; 3 Brazil       1999 37737  172006362 \n#&gt; 4 Brazil       2000 80488  174504898 \n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\n\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    rate, \n    into = c(\"cases\", \"population\"),\n    sep = \"/\", \n    convert = TRUE\n  )\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country      year  cases population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt;  &lt;int&gt;      &lt;int&gt;\n#&gt; 1 Afghanistan  1999    745   19987071\n#&gt; 2 Afghanistan  2000   2666   20595360\n#&gt; 3 Brazil       1999  37737  172006362\n#&gt; 4 Brazil       2000  80488  174504898\n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\n\nYou can also break up a variable by an index\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    year, \n    into = c(\"century\", \"year\"),\n    sep = 2\n  )\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country     century year  rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan 19      99    745/19987071     \n#&gt; 2 Afghanistan 20      00    2666/20595360    \n#&gt; 3 Brazil      19      99    37737/172006362  \n#&gt; 4 Brazil      20      00    80488/174504898  \n#&gt; 5 China       19      99    212258/1272915272\n#&gt; 6 China       20      00    213766/1280428583\n\n\n\n\n4.3.6 unite(): The opposite of separate()\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    year, \n    into = c(\"century\", \"year\"),\n    sep = 2\n  ) %&gt;%\n  unite(year_new, century, year)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country     year_new rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;            \n#&gt; 1 Afghanistan 19_99    745/19987071     \n#&gt; 2 Afghanistan 20_00    2666/20595360    \n#&gt; 3 Brazil      19_99    37737/172006362  \n#&gt; 4 Brazil      20_00    80488/174504898  \n#&gt; 5 China       19_99    212258/1272915272\n#&gt; 6 China       20_00    213766/1280428583\n\n\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    year, \n    into = c(\"century\", \"year\"),\n    sep = 2\n  ) %&gt;%\n  unite(year_new, century, year, sep = \"\")\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country     year_new rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;            \n#&gt; 1 Afghanistan 1999     745/19987071     \n#&gt; 2 Afghanistan 2000     2666/20595360    \n#&gt; 3 Brazil      1999     37737/172006362  \n#&gt; 4 Brazil      2000     80488/174504898  \n#&gt; 5 China       1999     212258/1272915272\n#&gt; 6 China       2000     213766/1280428583",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#dealing-with-dates-data",
    "href": "cleaning-data.html#dealing-with-dates-data",
    "title": "4¬† Cleaning Data",
    "section": "4.4 Dealing with Dates Data",
    "text": "4.4 Dealing with Dates Data\n\n\n\n\n4.4.1 Create Dates from Strings\norder is the ONLY thing that matters!\n\n4.4.1.1 Year-Month-Day\n\nymd('2020-02-26')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\nymd('2020-02-26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 Feb 26')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\nymd('2020-02-26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 Feb 26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 Feb. 26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 february 26')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\n\n4.4.1.2 Month-Day-Year\n\nmdy('February 26, 2020')\n\n#&gt; [1] \"2020-02-26\"\n\nmdy('Feb. 26, 2020')\n\n#&gt; [1] \"2020-02-26\"\n\nmdy('Feb 26 2020')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\n\n4.4.1.3 Day-Month-Year\n\ndmy('26 February 2020')\n\n#&gt; [1] \"2020-02-26\"\n\ndmy('26 Feb. 2020')\n\n#&gt; [1] \"2020-02-26\"\n\ndmy('26 Feb, 2020')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\n4.4.1.3.1 Check out the lubridate cheat sheet\n\n\n\n\n4.4.2 Extracting information from dates\n\ndate &lt;- today()\ndate\n\n#&gt; [1] \"2024-08-26\"\n\n\n\n# Get the year\nyear(date)\n\n#&gt; [1] 2024\n\n\n\ndate &lt;- today()\ndate\n\n#&gt; [1] \"2024-08-26\"\n\n\n\n# Get the year\nyear(date)\n\n#&gt; [1] 2024\n\n# Get the month\nmonth(date)\n\n#&gt; [1] 8\n\n# Get the month name\nmonth(date, label = TRUE, abbr = FALSE)\n\n#&gt; [1] August\n#&gt; 12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\n\n# Get the day\nday(date)\n\n#&gt; [1] 26\n\n# Get the weekday\nwday(date)\n\n#&gt; [1] 2\n\n# Get the weekday name\nwday(date, label = TRUE, abbr = TRUE)\n\n#&gt; [1] Mon\n#&gt; Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat\n\n\n\n\n4.4.3 Modifying date elements\n\ndate &lt;- today()\ndate\n\n#&gt; [1] \"2024-08-26\"\n\n\n\n# Change the year\nyear(date) &lt;- 2016\ndate\n\n#&gt; [1] \"2016-08-26\"\n\n\n\n# Change the day\nday(date) &lt;- 30\n\n\ndate\n\n#&gt; [1] \"2016-08-30\"",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#strategies-for-dealing-with-messy-excel-files",
    "href": "cleaning-data.html#strategies-for-dealing-with-messy-excel-files",
    "title": "4¬† Cleaning Data",
    "section": "4.5 Strategies for Dealing with Messy Excel Files",
    "text": "4.5 Strategies for Dealing with Messy Excel Files\nExample: When columns are repeated; like in the data for the winners of Nathan‚Äôs hot dog eating contest.\n\n4.5.1 Strategies\n\n4.5.1.1 1. divide & conquer\n\n\n4.5.1.2 2. pivot long, separate, pivot wide\n\n\n\n\n\n\n4.5.2 Strategy 1: divide & conquer\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\n\n\nhot_dogs &lt;- read_excel(here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens))\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 40\n#&gt; Columns: 7\n#&gt; $ year         &lt;chr&gt; \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\"‚Ä¶\n#&gt; $ mens         &lt;chr&gt; \"Paul Siederman & Joe Baldini\", \"Thomas DeBerry\", \"Ste‚Ä¶\n#&gt; $ dogs_eaten_3 &lt;chr&gt; \"9.1\", \"11\", \"11\", \"19.5\", \"9.5\", \"11.75\", \"15.5\", \"12‚Ä¶\n#&gt; $ country_4    &lt;chr&gt; \"United States\", \"United States\", \"United States\", \"Me‚Ä¶\n#&gt; $ womens       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ dogs_eaten_6 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ country_7    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n\n\nSteps\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nSplit data into two competitions with the same variable names\nCreate new variable in each data frame: competition\n\n\nhot_dogs_m &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor = mens,\n    dogs_eaten = dogs_eaten_3,\n    country    = country_4) %&gt;%\n  mutate(competition = 'Mens')\n\nhot_dogs_w &lt;- hot_dogs %&gt;%\n  select(\n      year,\n      competitor = womens,\n      dogs_eaten = dogs_eaten_6,\n      country    = country_7) %&gt;%\n  mutate(competition = 'Womens') %&gt;%\n  dplyr::filter(!is.na(competitor))\n\nSteps\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nSplit data into two competitions with the same variable names\nCreate new variable in each data frame: competition\nMerge data together with bind_rows()\nClean up final data frame\n\n\nhot_dogs &lt;- bind_rows(hot_dogs_m, hot_dogs_w) %&gt;%\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 49\n#&gt; Columns: 6\n#&gt; $ year        &lt;dbl&gt; 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1‚Ä¶\n#&gt; $ competitor  &lt;chr&gt; \"Paul Siederman & Joe Baldini\", \"Thomas DeBerry\", \"Stev‚Ä¶\n#&gt; $ dogs_eaten  &lt;dbl&gt; 9.10, 11.00, 11.00, 19.50, 9.50, 11.75, 15.50, 12.00, 1‚Ä¶\n#&gt; $ country     &lt;chr&gt; \"United States\", \"United States\", \"United States\", \"Mex‚Ä¶\n#&gt; $ competition &lt;chr&gt; \"Mens\", \"Mens\", \"Mens\", \"Mens\", \"Mens\", \"Mens\", \"Mens\",‚Ä¶\n#&gt; $ new_record  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,‚Ä¶\n\n\n\n\nhead(hot_dogs)\n\n#&gt; # A tibble: 6 √ó 6\n#&gt;    year competitor                  dogs_eaten country competition new_record\n#&gt;   &lt;dbl&gt; &lt;chr&gt;                            &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       &lt;lgl&gt;     \n#&gt; 1  1980 Paul Siederman & Joe Baldi‚Ä¶        9.1 United‚Ä¶ Mens        FALSE     \n#&gt; 2  1981 Thomas DeBerry                    11   United‚Ä¶ Mens        FALSE     \n#&gt; 3  1982 Steven Abrams                     11   United‚Ä¶ Mens        FALSE     \n#&gt; 4  1983 Luis Llamas                       19.5 Mexico  Mens        FALSE     \n#&gt; 5  1984 Birgit Felden                      9.5 Germany Mens        FALSE     \n#&gt; 6  1985 Oscar Rodriguez                   11.8 United‚Ä¶ Mens        FALSE\n\n\n\n\n4.5.3 Strategy 2: pivot long, separate, pivot wide\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\n\n\nhot_dogs &lt;- read_excel(here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens))\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 40\n#&gt; Columns: 7\n#&gt; $ year         &lt;chr&gt; \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\"‚Ä¶\n#&gt; $ mens         &lt;chr&gt; \"Paul Siederman & Joe Baldini\", \"Thomas DeBerry\", \"Ste‚Ä¶\n#&gt; $ dogs_eaten_3 &lt;chr&gt; \"9.1\", \"11\", \"11\", \"19.5\", \"9.5\", \"11.75\", \"15.5\", \"12‚Ä¶\n#&gt; $ country_4    &lt;chr&gt; \"United States\", \"United States\", \"United States\", \"Me‚Ä¶\n#&gt; $ womens       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ dogs_eaten_6 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ country_7    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n\n\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nRename variables\nGather all the ‚Äújoint‚Äù variables\n\n\nhot_dogs &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor.mens   = mens,\n    competitor.womens = womens,\n    dogs_eaten.mens   = dogs_eaten_3,\n    dogs_eaten.womens = dogs_eaten_6,\n    country.mens      = country_4,\n    country.womens    = country_7\n  ) %&gt;%\n  pivot_longer(\n    names_to = 'variable', \n    values_to = 'value',\n    competitor.mens:country.womens\n  )\n\nhead(hot_dogs, 3)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   year  variable          value                       \n#&gt;   &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                       \n#&gt; 1 1980  competitor.mens   Paul Siederman & Joe Baldini\n#&gt; 2 1980  competitor.womens &lt;NA&gt;                        \n#&gt; 3 1980  dogs_eaten.mens   9.1\n\n\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nRename variables\nGather all the ‚Äújoint‚Äù variables\nSeparate ‚Äújoint‚Äù variables into components\n\n\nhot_dogs &lt;- hot_dogs %&gt;%\n  separate(\n    variable, \n    into = c('variable', 'competition'),\n    sep = '\\\\.'\n  )\n\nhead(hot_dogs)\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   year  variable   competition value                       \n#&gt;   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;                       \n#&gt; 1 1980  competitor mens        Paul Siederman & Joe Baldini\n#&gt; 2 1980  competitor womens      &lt;NA&gt;                        \n#&gt; 3 1980  dogs_eaten mens        9.1                         \n#&gt; 4 1980  dogs_eaten womens      &lt;NA&gt;                        \n#&gt; 5 1980  country    mens        United States               \n#&gt; 6 1980  country    womens      &lt;NA&gt;\n\n\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nRename variables\nGather all the ‚Äújoint‚Äù variables\nSeparate ‚Äújoint‚Äù variables into components\nSpread variable and value back to columns\nClean up final data frame\n\n\nhot_dogs &lt;- hot_dogs %&gt;%\n  spread(key = variable, value = value) %&gt;%\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 80\n#&gt; Columns: 6\n#&gt; $ year        &lt;dbl&gt; 1980, 1980, 1981, 1981, 1982, 1982, 1983, 1983, 1984, 1‚Ä¶\n#&gt; $ competition &lt;chr&gt; \"mens\", \"womens\", \"mens\", \"womens\", \"mens\", \"womens\", \"‚Ä¶\n#&gt; $ competitor  &lt;chr&gt; \"Paul Siederman & Joe Baldini\", NA, \"Thomas DeBerry\", N‚Ä¶\n#&gt; $ country     &lt;chr&gt; \"United States\", NA, \"United States\", NA, \"United State‚Ä¶\n#&gt; $ dogs_eaten  &lt;dbl&gt; 9.10, NA, 11.00, NA, 11.00, NA, 19.50, NA, 9.50, NA, 11‚Ä¶\n#&gt; $ new_record  &lt;lgl&gt; FALSE, NA, FALSE, NA, FALSE, NA, FALSE, NA, FALSE, NA, ‚Ä¶\n\n\n\n\nDivide & conquer\n\nhot_dogs &lt;- read_excel(here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens))\n\n# Divide\nhot_dogs_m &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor = mens,\n    dogs_eaten = dogs_eaten_3,\n    country    = country_4) %&gt;%\n  mutate(competition = 'Mens')\nhot_dogs_w &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor = womens,\n    dogs_eaten = dogs_eaten_6,\n    country    = country_7) %&gt;%\n  mutate(competition = 'Womens') %&gt;%\n  dplyr::filter(!is.na(competitor))\n\n# Merge and finish cleaning\nhot_dogs &lt;- bind_rows(hot_dogs_m, hot_dogs_w) %&gt;%\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\n\n\nPivot long, separate, pivot wide\n\nhot_dogs &lt;- read_excel(\n  here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens)) %&gt;%\n\n  # Rename variables\n  select(\n    year,\n    competitor.mens   = mens,\n    competitor.womens = womens,\n    dogs_eaten.mens   = dogs_eaten_3,\n    dogs_eaten.womens = dogs_eaten_6,\n    country.mens      = country_4,\n    country.womens    = country_7\n  ) %&gt;%\n  # Gather \"joint\" variables\n  pivot_longer(\n    names_to = 'variable', \n    values_to = 'value',\n    competitor.mens:country.womens\n  ) %&gt;%\n  # Separate \"joint\" variables\n  separate(\n    variable, \n    into = c('variable', 'competition'),\n    sep = '\\\\.'\n  ) %&gt;%\n  # Spread \"joint\" variables\n  pivot_wider(\n    names_from = variable, \n    values_from = value\n  ) %&gt;%\n  # Finish cleaning\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\n\n\n\n\n4.5.4 Strategies for dealing with sub-headers\nExample: OICA passenger car sales data\n\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\n\n\npc_sales &lt;- read_excel(here::here('data', 'pc_sales_2018.xlsx'),\n  sheet = 'pc_sales', skip = 5) %&gt;%\n  clean_names() %&gt;%\n  rename(country = regions_countries)\n\nglimpse(pc_sales)\n\n#&gt; Rows: 160\n#&gt; Columns: 18\n#&gt; $ country &lt;chr&gt; NA, \"EUROPE\", \"EU 28 countries + EFTA\", \"EU 15 countries + ‚Ä¶\n#&gt; $ x2      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n#&gt; $ x3      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n#&gt; $ x4      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n#&gt; $ x2005   &lt;dbl&gt; NA, 17906455, 15622035, 14565695, 307915, 480088, 148819, 1‚Ä¶\n#&gt; $ x2006   &lt;dbl&gt; NA, 18685556, 15961138, 14820182, 308594, 526141, 156936, 1‚Ä¶\n#&gt; $ x2007   &lt;dbl&gt; NA, 19618588, 16147274, 14842186, 298182, 524795, 162686, 1‚Ä¶\n#&gt; $ x2008   &lt;dbl&gt; NA, 18821599, 14911880, 13602038, 293697, 535947, 150199, 1‚Ä¶\n#&gt; $ x2009   &lt;dbl&gt; NA, 16608761, 14533115, 13668808, 319403, 476194, 112454, 9‚Ä¶\n#&gt; $ x2010   &lt;dbl&gt; NA, 16499863, 13830694, 12984549, 328563, 547340, 153858, 1‚Ä¶\n#&gt; $ x2011   &lt;dbl&gt; NA, 17167600, 13642659, 12815435, 356145, 572211, 170036, 1‚Ä¶\n#&gt; $ x2012   &lt;dbl&gt; NA, 16191269, 12567903, 11773281, 336010, 486737, 170763, 1‚Ä¶\n#&gt; $ x2013   &lt;dbl&gt; NA, 15942273, 12344415, 11555153, 319035, 486065, 182086, 1‚Ä¶\n#&gt; $ x2014   &lt;dbl&gt; NA, 16154279, 13061461, 12148648, 303318, 482939, 189055, 1‚Ä¶\n#&gt; $ x2015   &lt;dbl&gt; NA, 16410563, 14287881, 13261258, 308555, 501066, 207717, 1‚Ä¶\n#&gt; $ x2016   &lt;dbl&gt; NA, 17291819, 15160239, 13971468, 329604, 539519, 222924, 1‚Ä¶\n#&gt; $ x2017   &lt;dbl&gt; NA, 17974281, 15631283, 14320223, 353320, 546558, 221821, 1‚Ä¶\n#&gt; $ x2018   &lt;dbl&gt; NA, 17912336, 15626509, 14210016, 341068, 549632, 218566, 1‚Ä¶\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\n\nUse datapasta to get rows to drop\n\ndrop &lt;- c(\n  'EUROPE', 'EU 28 countries + EFTA',\n  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',\n  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',\n  'NAFTA', 'CENTRAL & SOUTH AMERICA',\n  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')\n\npc_sales &lt;- pc_sales %&gt;%\n  # Drop bad columns\n  select(-c(x2:x4)) %&gt;%  \n  # Filter out bad rows\n  filter(\n    ! country %in% drop,\n    ! is.na(country)\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;   country   x2005   x2006   x2007   x2008   x2009  x2010  x2011  x2012  x2013\n#&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 AUSTRIA  307915  308594  298182  293697  319403 3.29e5 3.56e5 3.36e5 3.19e5\n#&gt; 2 BELGIUM  480088  526141  524795  535947  476194 5.47e5 5.72e5 4.87e5 4.86e5\n#&gt; 3 DENMARK  148819  156936  162686  150199  112454 1.54e5 1.70e5 1.71e5 1.82e5\n#&gt; 4 FINLAND  148161  145700  125608  139669   90574 1.12e5 1.26e5 1.11e5 1.03e5\n#&gt; 5 FRANCE  2118042 2045745 2109672 2091369 2302398 2.25e6 2.20e6 1.90e6 1.79e6\n#&gt; 6 GERMANY 3319259 3467961 3148163 3090040 3807175 2.92e6 3.17e6 3.08e6 2.95e6\n#&gt; # ‚Ñπ 5 more variables: x2014 &lt;dbl&gt;, x2015 &lt;dbl&gt;, x2016 &lt;dbl&gt;, x2017 &lt;dbl&gt;,\n#&gt; #   x2018 &lt;dbl&gt;\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\nGather the year variables\n\n\npc_sales &lt;- pc_sales %&gt;%\n  pivot_longer(\n    names_to = 'year', \n    values_to = 'num_cars', \n    cols = x2005:x2018\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country year  num_cars\n#&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;\n#&gt; 1 AUSTRIA x2005   307915\n#&gt; 2 AUSTRIA x2006   308594\n#&gt; 3 AUSTRIA x2007   298182\n#&gt; 4 AUSTRIA x2008   293697\n#&gt; 5 AUSTRIA x2009   319403\n#&gt; 6 AUSTRIA x2010   328563\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\nGather the year variables\nSeparate the ‚Äúx‚Äù from the year\n\n\npc_sales &lt;- pc_sales %&gt;%\n  separate(\n    year, \n    into = c('drop', 'year'), \n    sep = 'x',\n    convert = TRUE\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country drop   year num_cars\n#&gt;   &lt;chr&gt;   &lt;lgl&gt; &lt;int&gt;    &lt;dbl&gt;\n#&gt; 1 AUSTRIA NA     2005   307915\n#&gt; 2 AUSTRIA NA     2006   308594\n#&gt; 3 AUSTRIA NA     2007   298182\n#&gt; 4 AUSTRIA NA     2008   293697\n#&gt; 5 AUSTRIA NA     2009   319403\n#&gt; 6 AUSTRIA NA     2010   328563\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\nGather the year variables\nSeparate the ‚Äúx‚Äù from the year\nRemove the drop column\nFinish cleaning\n\n\npc_sales &lt;- pc_sales %&gt;%\n  select(-drop) %&gt;%\n  mutate(country  = str_to_title(country))\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country  year num_cars\n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt;\n#&gt; 1 Austria  2005   307915\n#&gt; 2 Austria  2006   308594\n#&gt; 3 Austria  2007   298182\n#&gt; 4 Austria  2008   293697\n#&gt; 5 Austria  2009   319403\n#&gt; 6 Austria  2010   328563\n\n\n\n4.5.4.0.1 What if I wanted to keep the continents?\n\n\n\n4.5.5 Strategy: Join a new data frame linking country -&gt; continent\n\ndrop &lt;- c(\n  'EUROPE', 'EU 28 countries + EFTA',\n  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',\n  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',\n  'NAFTA', 'CENTRAL & SOUTH AMERICA',\n  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')\n\npc_sales &lt;- read_excel(\n  here::here('data', 'pc_sales_2018.xlsx'),\n  sheet = 'pc_sales', skip = 5) %&gt;%\n  clean_names() %&gt;%\n  rename(country = regions_countries) %&gt;% \n  # Drop bad columns\n  select(-c(x2:x4)) %&gt;%  \n  # Filter out bad rows\n  filter(\n    ! country %in% drop,\n    ! is.na(country)\n  ) %&gt;% \n  pivot_longer(\n    names_to = 'year', values_to = 'num_cars', \n    cols = x2005:x2018\n  ) %&gt;%\n  separate(\n    year, \n    into = c('drop', 'year'), \n    sep = 'x',\n    convert = TRUE\n  ) %&gt;% \n  select(-drop)\n\nhead(pc_sales, 3)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   country  year num_cars\n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt;\n#&gt; 1 AUSTRIA  2005   307915\n#&gt; 2 AUSTRIA  2006   308594\n#&gt; 3 AUSTRIA  2007   298182\n\n\n\n\n4.5.6 Strategy 1: Find another source\n\n\n4.5.7 Strategy 2: Hand-make it\n\npc_regions &lt;- read_csv(here::here(\"data\", \"pc_regions.csv\"))\n\nhead(pc_regions)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country region subregion             \n#&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;                 \n#&gt; 1 AUSTRIA EUROPE EU 15 countries + EFTA\n#&gt; 2 BELGIUM EUROPE EU 15 countries + EFTA\n#&gt; 3 DENMARK EUROPE EU 15 countries + EFTA\n#&gt; 4 FINLAND EUROPE EU 15 countries + EFTA\n#&gt; 5 FRANCE  EUROPE EU 15 countries + EFTA\n#&gt; 6 GERMANY EUROPE EU 15 countries + EFTA\n\n\n\npc_sales &lt;- pc_sales %&gt;% \n  left_join(pc_regions)\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 5\n#&gt;   country  year num_cars region subregion             \n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 \n#&gt; 1 AUSTRIA  2005   307915 EUROPE EU 15 countries + EFTA\n#&gt; 2 AUSTRIA  2006   308594 EUROPE EU 15 countries + EFTA\n#&gt; 3 AUSTRIA  2007   298182 EUROPE EU 15 countries + EFTA\n#&gt; 4 AUSTRIA  2008   293697 EUROPE EU 15 countries + EFTA\n#&gt; 5 AUSTRIA  2009   319403 EUROPE EU 15 countries + EFTA\n#&gt; 6 AUSTRIA  2010   328563 EUROPE EU 15 countries + EFTA\n\n\n\n\ndrop &lt;- c(\n  'EUROPE', 'EU 28 countries + EFTA',\n  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',\n  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',\n  'NAFTA', 'CENTRAL & SOUTH AMERICA',\n  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')\n\npc_regions &lt;- read_csv(here::here(\"data\", \"pc_regions.csv\"))\n\npc_sales &lt;- read_excel(\n  here::here('data', 'pc_sales_2018.xlsx'),\n  sheet = 'pc_sales', skip = 5) %&gt;%\n  clean_names() %&gt;%\n  rename(country = regions_countries) %&gt;% \n  # Drop bad columns\n  select(-c(x2:x4)) %&gt;%       \n  # Filter out bad rows\n  filter(\n    ! country %in% drop,\n    ! is.na(country)\n  ) %&gt;% \n  pivot_longer(\n    names_to = 'year', values_to = 'num_cars', \n    cols = x2005:x2018\n  ) %&gt;%\n  separate(\n    year, into = c('drop', 'year'), sep = 'x',\n    convert = TRUE\n  ) %&gt;% \n  select(-drop) %&gt;% \n  left_join(pc_regions) %&gt;% \n  mutate(\n    country  = str_to_title(country), \n    region  = str_to_title(region), \n    subregion  = str_to_title(subregion)\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 5\n#&gt;   country  year num_cars region subregion             \n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 \n#&gt; 1 Austria  2005   307915 Europe Eu 15 Countries + Efta\n#&gt; 2 Austria  2006   308594 Europe Eu 15 Countries + Efta\n#&gt; 3 Austria  2007   298182 Europe Eu 15 Countries + Efta\n#&gt; 4 Austria  2008   293697 Europe Eu 15 Countries + Efta\n#&gt; 5 Austria  2009   319403 Europe Eu 15 Countries + Efta\n#&gt; 6 Austria  2010   328563 Europe Eu 15 Countries + Efta",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "part2-exploring.html",
    "href": "part2-exploring.html",
    "title": "Exploring Data",
    "section": "",
    "text": "This section includes chapters on data cleaning, data transformation, and summarizing data using the Tidyverse. Most dataviz books typically focus on the visualization part of the data analysis process, but in practice making a good chart usually involves a lot of data cleaning and transformation. In fact, most people spend more time in the preparation phase than the actual chart-making phase when creating a chart, so we felt it was important to first emphasize some important data cleaning and transformation techniques.",
    "crumbs": [
      "Exploring Data"
    ]
  },
  {
    "objectID": "part1-getting-started.html",
    "href": "part1-getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "This section offers a quick introduction to the {ggplot2} package for making charts and Quarto for making reproducible reports.\nWe like using Quarto for exploring data and making data visualizations because it allows us to easily blend code, text, and charts, enabling us to document our entire analysis from start to finish.",
    "crumbs": [
      "Getting Started"
    ]
  }
]