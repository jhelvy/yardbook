[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yet Another R Dataviz Book",
    "section": "",
    "text": "Preface\nThis book is still very much in development, but we‚Äôre actively editing it in preparation for the Fall 2024 semester, so come back soon for an updated version!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1¬† Introduction",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n#&gt; [1] 2",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "2¬† Quarto Basics",
    "section": "",
    "text": "2.1 Working with Quarto\nQuarto is a multilingual version of RMarkdown built on Pandoc that allows us to seamlessly combine text and code to create dynamic outputs. Like RMarkdown, it utilizes Knittr to render outputs in the form of documents, web pages, and more.\nUse R Projects (.Rproj files) to organize your analysis - don‚Äôt double-click .R files!",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "quarto.html#working-with-quarto",
    "href": "quarto.html#working-with-quarto",
    "title": "2¬† Quarto Basics",
    "section": "",
    "text": "2.1.1 Render to multiple outputs\nPDF uses LaTeX:\n\n---\ntitle: Your title\nauthor: Author name\nformat: pdf \n---\n\nIf you don‚Äôt have LaTeX on your computer, install tinytex in R:\n\ntinytex::install_tinytex()\n\nMicrosoft Word:\n\n---\ntitle: Your title\nauthor: Author name\nformat: docx\n---",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "quarto.html#anatomy-of-a-quarto-markdown-document",
    "href": "quarto.html#anatomy-of-a-quarto-markdown-document",
    "title": "2¬† Quarto Basics",
    "section": "2.2 Anatomy of a Quarto Markdown Document",
    "text": "2.2 Anatomy of a Quarto Markdown Document\nA Quarto Markdown document (.qmd) has three main parts:\n\nHeader\nMarkdown text\nR code\n\n\n2.2.1 Header\nDefine overall document options in the header\n\n---\ntitle: Your title\nauthor: Author name\nformat: html\n---\n\nAdd table of contents, change theme\n\n---\ntitle: Your title\nauthor: Author name\ntoc: true \nformat:\n  html:\n    theme: united\n---\n\n\n\n2.2.2 Markdown Text\nThis\n# HEADER 1\n\n## HEADER 2\n\n### HEADER 3\n\n#### HEADER 4\n\n##### HEADER 5\n\n###### HEADER 6\nGives us this\n\n\nType this‚Ä¶\n\nnormal text\n_italic text_\n*italic text*\n**bold text**\n***bold italic text***\n~~strikethrough~~\n`code text`\n\n..to get this\n\nnormal text\nitalic text\nitalic text\nbold text\nbold italic text\nstrikethrough\ncode text\n\nBullet list:\n\n- first item\n- second item\n- third item\n\n\nfirst item\nsecond item\nthird item\n\nNumbered list:\n\n1. first item\n2. second item\n3. third item\n\n\nfirst item\nsecond item\nthird item\n\nSimple url link to another site:\n\n[Download R](http://www.r-project.org/)\n\nDownload R\n\n2.2.2.1 Don‚Äôt want to use Markdown?\n\n\n2.2.2.2 Use Visual Mode!\n\n\n\n\n\n\n2.2.3 R Code\n\n2.2.3.1 Inline R code\n\n`r insert code here`\n\n\nThe sum of 3 and 4 is `r 3 + 4`\n\nProduces this:\nThe sum of 3 and 4 is 7\n\n\n2.2.3.2 R Code chunks\n```{r}\ninsert code here\ninsert more code here\n```\nThis code chunk‚Ä¶\n```{r}\nlibrary(palmerpenguins)\n\nhead(penguins)\n```\n‚Ä¶will produce this when compiled:\n\n\n#&gt; # A tibble: 6 √ó 8\n#&gt;   species island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n#&gt;   &lt;fct&gt;   &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n#&gt; 1 Adelie  Torgers‚Ä¶           39.1          18.7               181        3750\n#&gt; 2 Adelie  Torgers‚Ä¶           39.5          17.4               186        3800\n#&gt; 3 Adelie  Torgers‚Ä¶           40.3          18                 195        3250\n#&gt; 4 Adelie  Torgers‚Ä¶           NA            NA                  NA          NA\n#&gt; 5 Adelie  Torgers‚Ä¶           36.7          19.3               193        3450\n#&gt; 6 Adelie  Torgers‚Ä¶           39.3          20.6               190        3650\n#&gt; # ‚Ñπ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n2.2.3.3 Chunk Options\nControl what chunks output using options\nAll options here\n\n\n\n\n\n\n\n\n\nBy default, code chunks print code + output\n```{r}\n#| echo: false\n\ncat('hello world!')\n```\nPrints only output(doesn‚Äôt show code)\n\n\n#&gt; hello world!\n\n\n```{r}\n#| eval: false\n\ncat('hello world!')\n```\nPrints only code(doesn‚Äôt run the code)\n\ncat('hello world!')\n\n```{r}\n#| include: false\n\ncat('hello world!')\n```\nRuns, but doesn‚Äôt print anything\n\n\n2.2.3.4 A Global setup Chunk üåç\n```{r}\n#| label: setup\n#| include: false\n\nknitr::opts_chunk$set(\n    warning = FALSE,\n    message = FALSE,\n    fig.path = \"figs/\",\n    fig.width = 7.252,\n    fig.height = 4,\n    comment = \"#&gt;\",\n    fig.retina = 3\n)\n```\n\nTypically the first chunk\nAll following chunks will use these options (i.e., sets global chunk options)\nYou can (and should) use individual chunk options too\nOften where we load libraries, etc.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Quarto Basics</span>"
    ]
  },
  {
    "objectID": "ggplot.html",
    "href": "ggplot.html",
    "title": "3¬† Ggplot Basics",
    "section": "",
    "text": "3.1 Reading in Data\nUse the here package to create file paths\npath &lt;- here::here(\"folder\", \"file.csv\")\nImport data with these functions:",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Ggplot Basics</span>"
    ]
  },
  {
    "objectID": "ggplot.html#reading-in-data",
    "href": "ggplot.html#reading-in-data",
    "title": "3¬† Ggplot Basics",
    "section": "",
    "text": "File type\nFunction\nLibrary\n\n\n\n\n.csv\nread_csv()\nreadr\n\n\n.txt\nread.table()\nutils\n\n\n.xlsx\nread_excel()\nreadxl\n\n\n\n\n3.1.0.1 Importing Comma Separated Values (.csv)\nRead in .csv files with read_csv():\n\nlibrary(tidyverse)\nlibrary(here)\n\ncsvPath &lt;- here('data', 'milk_production.csv')\nmilk_production &lt;- read_csv(csvPath)\n\nhead(milk_production)\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   region    state          year milk_produced\n#&gt;   &lt;chr&gt;     &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 Northeast Maine          1970     619000000\n#&gt; 2 Northeast New Hampshire  1970     356000000\n#&gt; 3 Northeast Vermont        1970    1970000000\n#&gt; 4 Northeast Massachusetts  1970     658000000\n#&gt; 5 Northeast Rhode Island   1970      75000000\n#&gt; 6 Northeast Connecticut    1970     661000000\n\n\n\n\n3.1.0.2 Importing Text Files (.txt)\nRead in .txt files with read.table():\n\ntxtPath &lt;- here('data', 'nasa_global_temps.txt')\nglobal_temps &lt;- read.table(txtPath, skip = 5, header = FALSE)\n\nhead(global_temps)\n\n#&gt;     V1    V2    V3\n#&gt; 1 1880 -0.15 -0.08\n#&gt; 2 1881 -0.07 -0.12\n#&gt; 3 1882 -0.10 -0.15\n#&gt; 4 1883 -0.16 -0.19\n#&gt; 5 1884 -0.27 -0.23\n#&gt; 6 1885 -0.32 -0.25\n\n\n\n\n3.1.0.3 Importing Text Files (.txt)\nRead in .txt files with read.table():\n\ntxtPath &lt;- here('data', 'nasa_global_temps.txt')\nglobal_temps &lt;- read.table(txtPath, skip = 5, header = FALSE)\nnames(global_temps) &lt;- c('year', 'no_smoothing', 'loess') # Add header\n\nhead(global_temps)\n\n#&gt;   year no_smoothing loess\n#&gt; 1 1880        -0.15 -0.08\n#&gt; 2 1881        -0.07 -0.12\n#&gt; 3 1882        -0.10 -0.15\n#&gt; 4 1883        -0.16 -0.19\n#&gt; 5 1884        -0.27 -0.23\n#&gt; 6 1885        -0.32 -0.25\n\n\n\n\n3.1.0.4 Importing Excel Files (.xlsx)\nRead in .xlsx files with read_excel():\n\nlibrary(readxl)\n\nxlsxPath &lt;- here('data', 'pv_cell_production.xlsx')\npv_cells &lt;- read_excel(xlsxPath, sheet = 'Cell Prod by Country', skip = 2)\n\n\nglimpse(pv_cells)\n\n#&gt; Rows: 25\n#&gt; Columns: 10\n#&gt; $ Year            &lt;chr&gt; NA, NA, \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"20‚Ä¶\n#&gt; $ China           &lt;chr&gt; \"Megawatts\", NA, \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"2.5‚Ä¶\n#&gt; $ Taiwan          &lt;chr&gt; NA, NA, \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"3.5\", ‚Ä¶\n#&gt; $ Japan           &lt;dbl&gt; NA, NA, 16.4, 21.2, 35.0, 49.0, 80.0, 128.6, 171.2,‚Ä¶\n#&gt; $ Malaysia        &lt;chr&gt; NA, NA, \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"0\", \"0‚Ä¶\n#&gt; $ Germany         &lt;chr&gt; NA, NA, \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"22.5\", \"23.5‚Ä¶\n#&gt; $ `South Korea`   &lt;chr&gt; NA, NA, \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"0\", \"0‚Ä¶\n#&gt; $ `United States` &lt;dbl&gt; NA, NA, 34.7500, 38.8500, 51.0000, 53.7000, 60.8000‚Ä¶\n#&gt; $ Others          &lt;chr&gt; NA, NA, \"NA\", \"NA\", \"NA\", \"NA\", \"NA\", \"48.200000000‚Ä¶\n#&gt; $ World           &lt;dbl&gt; NA, NA, 77.600, 88.600, 125.800, 154.900, 201.300, ‚Ä¶",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Ggplot Basics</span>"
    ]
  },
  {
    "objectID": "ggplot.html#basic-plots-in-r",
    "href": "ggplot.html#basic-plots-in-r",
    "title": "3¬† Ggplot Basics",
    "section": "3.2 Basic plots in R",
    "text": "3.2 Basic plots in R\nR has a number of built-in tools for basic graph types. Let‚Äôs start with two basic functions for scatter plots and histograms.\n\n3.2.1 Scatter plots with plot()\nA scatter plot provides a graphical view of the relationship between two variables. Typically these are used for ‚Äúcontinuous‚Äù variables, like time, age, money, etc‚Ä¶things that are not categorical in nature (as opposed to ‚Äúdiscrete‚Äù variables, like nationality). Here‚Äôs a scatterplot of the fuel efficiency (miles per gallon) of cars over their respective horsepower using the mtcars dataset:\n\nplot(x = mtcars$hp, y = mtcars$mpg)\n\n\n\n\n\n\n\n\nThe basic inputs to the plot() function are x and y, which must be vectors of the same length. You can customize many features (fonts, colors, axes, shape, titles, etc.) through graphic options. Here‚Äôs the same plot with a few customizations:\n\nplot(\n  x    = mtcars$hp,\n  y    = mtcars$mpg,\n  col  = 'darkblue', # \"col\" changes the point color\n  pch  = 19, # \"pch\" changes the point shape\n  main = \"\",\n  xlab = \"Horsepower\",\n  ylab = \"Miles Per Gallon\"\n)\n\n\n\n\n\n\n\n\nFrom this scatter plot, we can observe the relationship between a car‚Äôs horsepower and its fuel efficiency. As you may have guessed, cars with more horsepower or more powerful engines have less fuel efficiency.\n\n\n3.2.2 Histograms with hist()\nThe histogram is one of the most common ways to visualize the distribution of a variable. The hist() function takes just one variable: x. Here‚Äôs a histogram of the waiting variable showing the wait times between eruptions of the Old Faithful geyser:\n\nhist(x = faithful$waiting)\n\n\n\n\n\n\n\n\nWith this plot, we can see a trend where the geyser mostly erupts in roughly 50 or 80 minute intervals. As with the plot() function, you can customize a lot of the histogram features. One common customization is to modify the number of ‚Äúbins‚Äù in the histogram by changing the breaks argument. Here we‚Äôll fix the number of bins to 20 to get a clearer look at the data:\n\nhist(\n  x      = faithful$waiting,\n  breaks = 20,\n  col    = 'lightblue3',\n  main   = \"Waiting Times Between Eruptions\",\n  xlab   = \"Waiting Time (in minutes)\",\n  ylab   = \"Count\"\n)\n\n\n\n\n\n\n\n\nWith our changes, the chart is cleaner and it is clearer which waiting times the were most common.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Ggplot Basics</span>"
    ]
  },
  {
    "objectID": "ggplot.html#advanced-figures-with-ggplot2",
    "href": "ggplot.html#advanced-figures-with-ggplot2",
    "title": "3¬† Ggplot Basics",
    "section": "3.3 Advanced figures with ggplot2",
    "text": "3.3 Advanced figures with ggplot2\n Art by Allison Horst\nWhile Base R plot functions are useful for making simple, quick plots, many R users have adopted the ggplot2 package as their primary tool for visualizing data.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Ggplot Basics</span>"
    ]
  },
  {
    "objectID": "ggplot.html#layering-with-ggplot",
    "href": "ggplot.html#layering-with-ggplot",
    "title": "3¬† Ggplot Basics",
    "section": "3.4 Layering with ggplot",
    "text": "3.4 Layering with ggplot\n\n3.4.0.1 ‚ÄúGrammar of Graphics‚Äù\nThe ggplot2 library is built on the ‚ÄúGrammar of Graphics‚Äù concept developed by Leland Wilkinson (1999). A ‚Äúgrammar of graphics‚Äù (that‚Äôs what the ‚Äúgg‚Äù in ‚Äúggplot2‚Äù stands for) is a framework that uses layers to describe and construct visualizations or graphics in a structured manner. Here‚Äôs a visual summary of the concept:\n\n\n\nggplot2 package developed by Hadley Wickham (2005)\n\n\n3.4.0.2 Making plot layers with ggplot2\n\n3.4.0.2.1 1. The data\n\n\n3.4.0.2.2 2. The aesthetic mapping (what goes on the axes?)\n\n\n3.4.0.2.3 3. The geometries (points? bars? etc.)\n\n\n3.4.0.2.4 4. The annotations / labels\n\n\n3.4.0.2.5 5. The theme\n\n\n\n3.4.0.3 Layer 1: The data\n\nhead(mpg)\n\n#&gt; # A tibble: 6 √ó 11\n#&gt;   manufacturer model displ  year   cyl trans    drv     cty   hwy fl    class\n#&gt;   &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 audi         a4      1.8  1999     4 auto(l5) f        18    29 p     comp‚Ä¶\n#&gt; 2 audi         a4      1.8  1999     4 manual(‚Ä¶ f        21    29 p     comp‚Ä¶\n#&gt; 3 audi         a4      2    2008     4 manual(‚Ä¶ f        20    31 p     comp‚Ä¶\n#&gt; 4 audi         a4      2    2008     4 auto(av) f        21    30 p     comp‚Ä¶\n#&gt; 5 audi         a4      2.8  1999     6 auto(l5) f        16    26 p     comp‚Ä¶\n#&gt; 6 audi         a4      2.8  1999     6 manual(‚Ä¶ f        18    26 p     comp‚Ä¶\n\n\nThe ggplot() function initializes the plot with whatever data you‚Äôre using\n\nmpg %&gt;% \n  ggplot()\n\n\n\n\n\n\n\n\n\n\n3.4.0.4 Layer 2: The aesthetic mapping\nThe aes() function determines which variables will be mapped to the geometries(e.g.¬†the axes)\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy))\n\n\n\n\n\n\n\n\n\n\n3.4.0.5 Layer 3: The geometries\nUse + to add geometries, e.g.¬†geom_points() for points\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n3.4.0.6 Layer 4: The annotations / labels\nUse labs() to modify most labels\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  labs(\n    x = \"Engine displacement (liters)\",\n    y = \"Highway fuel economy (mpg)\",\n    title = \"Most larger engine vehicles are less fuel efficient\"\n  )\n\n\n\n\n\n\n\n\n\n\n3.4.0.7 Layer 5: The theme\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  labs(\n    x = \"Engine displacement (liters)\",  \n    y = \"Highway fuel economy (mpg)\", \n    title = \"Most larger engine vehicles are less fuel efficient\"\n  ) + \n  theme_bw()\n\n\n\n\n\n\n\n\n\n3.4.0.7.1 Common themes\ntheme_bw()\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\ntheme_minimal()\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\n\n\ntheme_classic()\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  theme_classic()\n\n\n\n\n\n\n\n\ntheme_void()\n\nmpg %&gt;% \n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  theme_void()",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Ggplot Basics</span>"
    ]
  },
  {
    "objectID": "ggplot.html#making-a-good-ggplot",
    "href": "ggplot.html#making-a-good-ggplot",
    "title": "3¬† Ggplot Basics",
    "section": "3.5 Making a (good) ggplot",
    "text": "3.5 Making a (good) ggplot\n\nFormat data frame\nAdd geoms\nFlip coordinates?\nReorder factors?\nAdjust scales\nAdjust theme\nAnnotate\n\n\n3.5.0.1 1) Format data frame\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator)\n\n#&gt; # A tibble: 4 √ó 2\n#&gt;   operator               n\n#&gt;   &lt;chr&gt;              &lt;int&gt;\n#&gt; 1 AMERICAN AIRLINES  14887\n#&gt; 2 DELTA AIR LINES     9005\n#&gt; 3 SOUTHWEST AIRLINES 17970\n#&gt; 4 UNITED AIRLINES    15116\n\n\n\n\n3.5.0.2 2) Add geoms\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = operator, y = n),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n3.5.0.3 3) Flip coordinates - can you read the labels?\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\n ggplot() +\n  geom_col(\n      aes(x = operator, y = n),\n      width = 0.7, alpha = 0.8) +\n\n# Flip coordinates\n  coord_flip()\n\n\n\n\n\n\n\n\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n    aes(x = n, y = operator),\n    width = 0.7, alpha = 0.8\n  )\n\n\n\n\n\n\n\n\n\n\n3.5.0.4 4) Reorder factors with reorder()\n\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n      aes(x = n, y = reorder(operator, n)),\n      width = 0.7, alpha = 0.8)\n\n\n\n\n\n\n\n\n\n\n3.5.0.5 5) Adjust scales\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n      aes(x = n, y = reorder(operator, n)),\n      width = 0.7, alpha = 0.8) +\n\n# Adjust x axis scale\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05)))\n\n\n\n\n\n\n\n\n\n3.5.0.5.1 Customize break points (if you want)\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\nggplot() +\n  geom_col(\n      aes(x = n, y = reorder(operator, n)),\n      width = 0.7, alpha = 0.8) +\n\n# Adjust x axis scale\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05)),\n    breaks = c(0, 10000, 20000),\n    limits = c(0, 20000))\n\n\n\n\n\n\n\n\n\n\n\n3.5.0.6 6) Adjust theme\n\n3.5.0.6.1 Four cowplot themes you should know\n\n\n\nFor horizontal bars, add only vertical grid\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n\n# Add geoms\n  ggplot() +\n  geom_col(\n      aes(x = n, y = reorder(operator, n)),\n      width = 0.7, alpha = 0.8) +\n\n# Adjust x axis scale\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n\n# Adjust theme\n  theme_minimal_vgrid()\n\n\n\n\n\n\n\n\n\n\n\n3.5.0.7 7) Annotate\n\n# Format the data frame\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n  mutate(operator = str_to_title(operator)) %&gt;%\n\n# Add geoms\n  ggplot() +\n  geom_col(\n      aes(x = n, y = reorder(operator, n)),\n      width = 0.7, alpha = 0.8) +\n\n# Adjust x axis scale\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n\n# Adjust theme\n  theme_minimal_vgrid() +\n\n# Annotate\n  labs(\n    x = 'Count',\n    y = NULL)\n\n\n\n\n\n\n\n\n\n\n3.5.0.8 Finished product\n\nwildlife_impacts %&gt;%\n  count(operator) %&gt;%\n  mutate(operator = str_to_title(operator)) %&gt;%\n  ggplot() +\n  geom_col(\n      aes(x = n, y = reorder(operator, n)),\n      width = 0.7, alpha = 0.8) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  labs(\n    x = 'Count',\n    y = NULL)",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Ggplot Basics</span>"
    ]
  },
  {
    "objectID": "tidy-data.html",
    "href": "tidy-data.html",
    "title": "4¬† Tidy Data",
    "section": "",
    "text": "4.1 ‚ÄúWide‚Äù and ‚ÄúLong‚Äù Formatted Data",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "tidy-data.html#wide-and-long-formatted-data",
    "href": "tidy-data.html#wide-and-long-formatted-data",
    "title": "4¬† Tidy Data",
    "section": "",
    "text": "4.1.1 The Data: Federal R&D Spending by Department\n\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DHS   DOC   DOD   DOE   DOT   EPA   HHS Interior  NASA   NIH   NSF\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976     0   819 35696 10882  1142   968  9226     1152 12513  8025  2372\n#&gt; 2  1977     0   837 37967 13741  1095   966  9507     1082 12553  8214  2395\n#&gt; 3  1978     0   871 37022 15663  1156  1175 10533     1125 12516  8802  2446\n#&gt; 4  1979     0   952 37174 15612  1004  1102 10127     1176 13079  9243  2404\n#&gt; 5  1980     0   945 37005 15226  1048   903 10045     1082 13837  9093  2407\n#&gt; 6  1981     0   829 41737 14798   978   901  9644      990 13276  8580  2300\n#&gt; # ‚Ñπ 3 more variables: Other &lt;dbl&gt;, USDA &lt;dbl&gt;, VA &lt;dbl&gt;\n\n\n\n\n4.1.2 ‚ÄúWide‚Äù format\n\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DHS   DOC   DOD   DOE   DOT   EPA   HHS Interior  NASA   NIH   NSF\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976     0   819 35696 10882  1142   968  9226     1152 12513  8025  2372\n#&gt; 2  1977     0   837 37967 13741  1095   966  9507     1082 12553  8214  2395\n#&gt; 3  1978     0   871 37022 15663  1156  1175 10533     1125 12516  8802  2446\n#&gt; 4  1979     0   952 37174 15612  1004  1102 10127     1176 13079  9243  2404\n#&gt; 5  1980     0   945 37005 15226  1048   903 10045     1082 13837  9093  2407\n#&gt; 6  1981     0   829 41737 14798   978   901  9644      990 13276  8580  2300\n#&gt; # ‚Ñπ 3 more variables: Other &lt;dbl&gt;, USDA &lt;dbl&gt;, VA &lt;dbl&gt;\n\n\nDimensions:\n\n\n#&gt; [1] 42 15\n\n\n\n\n4.1.3 ‚ÄúLong‚Äù format\n\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   department  year rd_budget_mil\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 DOD         1976         35696\n#&gt; 2 NASA        1976         12513\n#&gt; 3 DOE         1976         10882\n#&gt; 4 HHS         1976          9226\n#&gt; 5 NIH         1976          8025\n#&gt; 6 NSF         1976          2372\n\n\nDimensions:\n\n\n#&gt; [1] 588   3\n\n\n\n\n4.1.4 Tidy data = ‚ÄúLong‚Äù format\n\nEach variable has its own column\nEach observation has its own row\n\n\n\n\n\n\n4.1.5 Do the names describe the values?\n\n4.1.5.1 Yes: ‚ÄúLong‚Äù format\n\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   department  year rd_budget_mil\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 DOD         1976         35696\n#&gt; 2 NASA        1976         12513\n#&gt; 3 DOE         1976         10882\n#&gt; 4 HHS         1976          9226\n#&gt; 5 NIH         1976          8025\n#&gt; 6 NSF         1976          2372\n\n\n\n\n4.1.5.2 No: ‚ÄúWide‚Äù format\n\n\n#&gt; # A tibble: 6 √ó 8\n#&gt;    year   DHS   DOC   DOD   DOE   DOT   EPA   HHS\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976     0   819 35696 10882  1142   968  9226\n#&gt; 2  1977     0   837 37967 13741  1095   966  9507\n#&gt; 3  1978     0   871 37022 15663  1156  1175 10533\n#&gt; 4  1979     0   952 37174 15612  1004  1102 10127\n#&gt; 5  1980     0   945 37005 15226  1048   903 10045\n#&gt; 6  1981     0   829 41737 14798   978   901  9644\n\n\n\n\n\n4.1.6 Reshaping data\n\n4.1.6.1 pivot_longer() and pivot_wider()\n\n\n\n\n\n4.1.6.2 From ‚Äúlong‚Äù to ‚Äúwide‚Äù with pivot_wider()\n\n\n\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   department  year rd_budget_mil\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 DOD         1976         35696\n#&gt; 2 NASA        1976         12513\n#&gt; 3 DOE         1976         10882\n#&gt; 4 HHS         1976          9226\n#&gt; 5 NIH         1976          8025\n#&gt; 6 NSF         1976          2372\n\n\n\nfed_spend_wide &lt;- fed_spend_long %&gt;%\n  pivot_wider(\n    names_from = department,\n    values_from = rd_budget_mil)\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DOD  NASA   DOE   HHS   NIH   NSF  USDA Interior   DOT   EPA   DOC\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 35696 12513 10882  9226  8025  2372  1837     1152  1142   968   819\n#&gt; 2  1977 37967 12553 13741  9507  8214  2395  1796     1082  1095   966   837\n#&gt; 3  1978 37022 12516 15663 10533  8802  2446  1962     1125  1156  1175   871\n#&gt; 4  1979 37174 13079 15612 10127  9243  2404  2054     1176  1004  1102   952\n#&gt; 5  1980 37005 13837 15226 10045  9093  2407  1887     1082  1048   903   945\n#&gt; 6  1981 41737 13276 14798  9644  8580  2300  1964      990   978   901   829\n#&gt; # ‚Ñπ 3 more variables: DHS &lt;dbl&gt;, VA &lt;dbl&gt;, Other &lt;dbl&gt;\n\n\n\n\n4.1.6.3 From ‚Äúwide‚Äù to ‚Äúlong‚Äù with pivot_longer()\n\n\n\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DOD  NASA   DOE   HHS   NIH   NSF  USDA Interior   DOT   EPA   DOC\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 35696 12513 10882  9226  8025  2372  1837     1152  1142   968   819\n#&gt; 2  1977 37967 12553 13741  9507  8214  2395  1796     1082  1095   966   837\n#&gt; 3  1978 37022 12516 15663 10533  8802  2446  1962     1125  1156  1175   871\n#&gt; 4  1979 37174 13079 15612 10127  9243  2404  2054     1176  1004  1102   952\n#&gt; 5  1980 37005 13837 15226 10045  9093  2407  1887     1082  1048   903   945\n#&gt; 6  1981 41737 13276 14798  9644  8580  2300  1964      990   978   901   829\n#&gt; # ‚Ñπ 3 more variables: DHS &lt;dbl&gt;, VA &lt;dbl&gt;, Other &lt;dbl&gt;\n\n\n\nfed_spend_long &lt;- fed_spend_wide %&gt;%\n  pivot_longer( \n    names_to = \"department\",\n    values_to = \"rd_budget_mil\",\n    cols = DOD:Other\n  )\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;    year department rd_budget_mil\n#&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n#&gt; 1  1976 DOD                35696\n#&gt; 2  1976 NASA               12513\n#&gt; 3  1976 DOE                10882\n#&gt; 4  1976 HHS                 9226\n#&gt; 5  1976 NIH                 8025\n#&gt; 6  1976 NSF                 2372\n\n\n\n\n4.1.6.4 Can also set cols by selecting which columns not to use\n\nnames(fed_spend_wide)\n\n#&gt;  [1] \"year\"     \"DOD\"      \"NASA\"     \"DOE\"      \"HHS\"      \"NIH\"     \n#&gt;  [7] \"NSF\"      \"USDA\"     \"Interior\" \"DOT\"      \"EPA\"      \"DOC\"     \n#&gt; [13] \"DHS\"      \"VA\"       \"Other\"\n\n\n\nfed_spend_long &lt;- fed_spend_wide %&gt;%\n  pivot_longer(\n    names_to = \"department\", \n    values_to = \"rd_budget_mil\",\n    cols = -year\n  )\n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;    year department rd_budget_mil\n#&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n#&gt; 1  1976 DOD                35696\n#&gt; 2  1976 NASA               12513\n#&gt; 3  1976 DOE                10882\n#&gt; 4  1976 HHS                 9226\n#&gt; 5  1976 NIH                 8025\n#&gt; 6  1976 NSF                 2372",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "tidy-data.html#tidy-data-wrangling",
    "href": "tidy-data.html#tidy-data-wrangling",
    "title": "4¬† Tidy Data",
    "section": "4.2 Tidy data wrangling",
    "text": "4.2 Tidy data wrangling\nWhat is tidy data wrangling? (a quick explanation with cute graphics, by Allison Horst)\n\n\n\n\n\n\n\n\n\nCompute the total R&D spending in each year\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DOD  NASA   DOE   HHS   NIH   NSF  USDA Interior   DOT   EPA   DOC\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 35696 12513 10882  9226  8025  2372  1837     1152  1142   968   819\n#&gt; 2  1977 37967 12553 13741  9507  8214  2395  1796     1082  1095   966   837\n#&gt; 3  1978 37022 12516 15663 10533  8802  2446  1962     1125  1156  1175   871\n#&gt; 4  1979 37174 13079 15612 10127  9243  2404  2054     1176  1004  1102   952\n#&gt; 5  1980 37005 13837 15226 10045  9093  2407  1887     1082  1048   903   945\n#&gt; 6  1981 41737 13276 14798  9644  8580  2300  1964      990   978   901   829\n#&gt; # ‚Ñπ 3 more variables: DHS &lt;dbl&gt;, VA &lt;dbl&gt;, Other &lt;dbl&gt;\n\n\nLet‚Äôs compute the total R&D spending in each year\nApproach 1: Create new total by adding each variable\n\nfed_spend_wide %&gt;%\n  mutate(total = DHS + DOC + DOD + DOE + DOT + EPA + HHS + Interior + NASA + NIH + NSF + Other + USDA + VA) %&gt;%\n  select(year, total)\n\n#&gt; # A tibble: 42 √ó 2\n#&gt;    year total\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 86227\n#&gt; 2  1977 91807\n#&gt; 3  1978 94864\n#&gt; 4  1979 96601\n#&gt; 5  1980 96305\n#&gt; 6  1981 98304\n#&gt; # ‚Ñπ 36 more rows\n\n\nApproach 2: Reshape first, then summarise\n\nfed_spend_long &lt;- fed_spend_wide %&gt;%\n  pivot_longer(\n    names_to = \"department\", \n    values_to = \"rd_budget_mil\",\n    cols = -year\n  ) \n\nhead(fed_spend_long)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;    year department rd_budget_mil\n#&gt;   &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt;\n#&gt; 1  1976 DOD                35696\n#&gt; 2  1976 NASA               12513\n#&gt; 3  1976 DOE                10882\n#&gt; 4  1976 HHS                 9226\n#&gt; 5  1976 NIH                 8025\n#&gt; 6  1976 NSF                 2372\n\n\n\nfed_spend_long %&gt;%\n  group_by(year) %&gt;%\n  summarise(total = sum(rd_budget_mil))\n\n#&gt; # A tibble: 42 √ó 2\n#&gt;    year total\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 86227\n#&gt; 2  1977 91807\n#&gt; 3  1978 94864\n#&gt; 4  1979 96601\n#&gt; 5  1980 96305\n#&gt; 6  1981 98304\n#&gt; # ‚Ñπ 36 more rows\n\n\n\ntotal &lt;- fed_spend_wide %&gt;%\n  pivot_longer(\n    names_to = \"department\", \n    values_to = \"rd_budget_mil\",\n    cols = -year\n  ) %&gt;% \n  group_by(year) %&gt;%\n  summarise(total = sum(rd_budget_mil))\n\n\nhead(total)\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;    year total\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 86227\n#&gt; 2  1977 91807\n#&gt; 3  1978 94864\n#&gt; 4  1979 96601\n#&gt; 5  1980 96305\n#&gt; 6  1981 98304",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "tidy-data.html#tidy-data-vizualization",
    "href": "tidy-data.html#tidy-data-vizualization",
    "title": "4¬† Tidy Data",
    "section": "4.3 Tidy data vizualization",
    "text": "4.3 Tidy data vizualization\n\nhead(fed_spend_wide)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;    year   DOD  NASA   DOE   HHS   NIH   NSF  USDA Interior   DOT   EPA   DOC\n#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1  1976 35696 12513 10882  9226  8025  2372  1837     1152  1142   968   819\n#&gt; 2  1977 37967 12553 13741  9507  8214  2395  1796     1082  1095   966   837\n#&gt; 3  1978 37022 12516 15663 10533  8802  2446  1962     1125  1156  1175   871\n#&gt; 4  1979 37174 13079 15612 10127  9243  2404  2054     1176  1004  1102   952\n#&gt; 5  1980 37005 13837 15226 10045  9093  2407  1887     1082  1048   903   945\n#&gt; 6  1981 41737 13276 14798  9644  8580  2300  1964      990   978   901   829\n#&gt; # ‚Ñπ 3 more variables: DHS &lt;dbl&gt;, VA &lt;dbl&gt;, Other &lt;dbl&gt;\n\n\n\nggplot(fed_spend_wide) +\n  geom_col(aes(x = rd_budget_mil, y = department)) +\n  theme_bw() +\n  labs(\n      x = \"R&D Spending ($Millions)\",\n      y = \"Federal Agency\"\n  )\n\n#&gt; Error in `geom_col()`:\n#&gt; ! Problem while computing aesthetics.\n#&gt; ‚Ñπ Error occurred in the 1st layer.\n#&gt; Caused by error:\n#&gt; ! object 'rd_budget_mil' not found\n\n\n\nfed_spend_wide %&gt;%\n  pivot_longer(\n    names_to = \"department\",\n    values_to = \"rd_budget_mil\",\n    cols = -year\n  ) %&gt;%\n  ggplot() +\n  geom_col(aes(x = rd_budget_mil, y = department)) +\n  theme_bw() +\n  labs(\n    x = \"R&D Spending ($Millions)\",\n    y = \"Federal Agency\"\n  )",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Tidy Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html",
    "href": "cleaning-data.html",
    "title": "5¬† Cleaning Data",
    "section": "",
    "text": "5.1 Merging Data Sets with Joins\nTo start off, let‚Äôs take a look at this map. What‚Äôs wrong with it?\nClearly, the abbreviations are all mixed up. The likely culprit: merging two columns\nhead(names)\n\n#&gt;   state_name\n#&gt; 1    Alabama\n#&gt; 2     Alaska\n#&gt; 3    Arizona\n#&gt; 4   Arkansas\n#&gt; 5 California\n#&gt; 6   Colorado\n\nhead(abbs)\n\n#&gt;   state_abb\n#&gt; 1        AK\n#&gt; 2        AL\n#&gt; 3        AR\n#&gt; 4        AZ\n#&gt; 5        CA\n#&gt; 6        CO\nresult &lt;- bind_cols(names, abbs)\nhead(result)\n\n#&gt;   state_name state_abb\n#&gt; 1    Alabama        AK\n#&gt; 2     Alaska        AL\n#&gt; 3    Arizona        AR\n#&gt; 4   Arkansas        AZ\n#&gt; 5 California        CA\n#&gt; 6   Colorado        CO\nAs shown above, simply binding or merging two data sets is not the best choice. This is where joins come into play.\nThere are three types of joins that we can utilize to properly merge data sets.\nTake a look at the different joins applied to the band_members & band_instruments data sets.\nband_members\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  band   \n#&gt;   &lt;chr&gt; &lt;chr&gt;  \n#&gt; 1 Mick  Stones \n#&gt; 2 John  Beatles\n#&gt; 3 Paul  Beatles\nband_instruments\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  plays \n#&gt;   &lt;chr&gt; &lt;chr&gt; \n#&gt; 1 John  guitar\n#&gt; 2 Paul  bass  \n#&gt; 3 Keith guitar",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#merging-data-sets-with-joins",
    "href": "cleaning-data.html#merging-data-sets-with-joins",
    "title": "5¬† Cleaning Data",
    "section": "",
    "text": "inner_join()\nleft_join() / right_join()\nfull_join()\n\n\n\n\n\n5.1.0.1 inner_join()\n\nband_members %&gt;%\n    inner_join(band_instruments)\n\n#&gt; # A tibble: 2 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 John  Beatles guitar\n#&gt; 2 Paul  Beatles bass\n\n\n\n\n\n\n\n5.1.0.2 full_join()\n\nband_members %&gt;%\n    full_join(band_instruments)\n\n#&gt; # A tibble: 4 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass  \n#&gt; 4 Keith &lt;NA&gt;    guitar\n\n\n\n\n\n\n\n5.1.0.3 left_join()\n\nband_members %&gt;%\n    left_join(band_instruments)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\n\n\n\n\n\n5.1.0.4 right_join()\n\nband_members %&gt;%\n    right_join(band_instruments)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 John  Beatles guitar\n#&gt; 2 Paul  Beatles bass  \n#&gt; 3 Keith &lt;NA&gt;    guitar\n\n\n\n\n\n\n\n5.1.0.5 We can also specify the joining variable name\n\nband_members %&gt;%\n    left_join(band_instruments)\n\n#&gt; Joining with `by = join_by(name)`\n\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\n\nband_members %&gt;%\n    left_join(\n        band_instruments,\n        by = 'name'\n    )\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\n\n\n5.1.0.6 If the names differ, use by = c(\"left_name\" = \"joining_name\")\n\nband_members\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  band   \n#&gt;   &lt;chr&gt; &lt;chr&gt;  \n#&gt; 1 Mick  Stones \n#&gt; 2 John  Beatles\n#&gt; 3 Paul  Beatles\n\n\n\nband_instruments2\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   artist plays \n#&gt;   &lt;chr&gt;  &lt;chr&gt; \n#&gt; 1 John   guitar\n#&gt; 2 Paul   bass  \n#&gt; 3 Keith  guitar\n\n\n\nband_members %&gt;%\n  left_join(\n    band_instruments2,\n    by = c(\"name\" = \"artist\")\n  ) \n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   name  band    plays \n#&gt;   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick  Stones  &lt;NA&gt;  \n#&gt; 2 John  Beatles guitar\n#&gt; 3 Paul  Beatles bass\n\n\nOr, just rename the joining variable in a pipe.\n\nband_members\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   name  band   \n#&gt;   &lt;chr&gt; &lt;chr&gt;  \n#&gt; 1 Mick  Stones \n#&gt; 2 John  Beatles\n#&gt; 3 Paul  Beatles\n\n\n\nband_instruments2\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   artist plays \n#&gt;   &lt;chr&gt;  &lt;chr&gt; \n#&gt; 1 John   guitar\n#&gt; 2 Paul   bass  \n#&gt; 3 Keith  guitar\n\n\n\nband_members %&gt;%\n  rename(artist = name) %&gt;%\n  left_join(\n    band_instruments2,\n    by = \"artist\"\n  )\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   artist band    plays \n#&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; \n#&gt; 1 Mick   Stones  &lt;NA&gt;  \n#&gt; 2 John   Beatles guitar\n#&gt; 3 Paul   Beatles bass",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#variable-types-and-names",
    "href": "cleaning-data.html#variable-types-and-names",
    "title": "5¬† Cleaning Data",
    "section": "5.2 Variable Types and Names",
    "text": "5.2 Variable Types and Names\n\n5.2.1 Variable Types\n\n5.2.1.1 Always check variable types after reading in data!\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx'))\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ Ranking                         &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", ‚Ä¶\n#&gt; $ State                           &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIF‚Ä¶\n#&gt; $ `Installed Capacity (MW)`       &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464‚Ä¶\n#&gt; $ `Equivalent Homes Powered`      &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.‚Ä¶\n#&gt; $ `Total Investment ($ Millions)` &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"1‚Ä¶\n#&gt; $ `Wind Projects Online`          &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, ‚Ä¶\n#&gt; $ `# of Wind Turbines`            &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"697‚Ä¶\n\n\n\n\n5.2.1.2 Be careful converting strings to numbers!\n\n5.2.1.2.1 as.numeric()\n\nas.numeric(c(\"2.1\", \"3.7\", \"4.50\"))\n\n#&gt; [1] 2.1 3.7 4.5\n\nas.numeric(c(\"$2.1\", \"$3.7\", \"$4.50\"))\n\n#&gt; [1] NA NA NA\n\n\n\n\n5.2.1.2.2 parse_number()\n\nparse_number(c(\"2.1\", \"3.7\", \"4.50\"))\n\n#&gt; [1] 2.1 3.7 4.5\n\nparse_number(c(\"$2.1\", \"$3.7\", \"$4.50\"))\n\n#&gt; [1] 2.1 3.7 4.5\n\nparse_number(c(\"1-800-123-4567\"))\n\n#&gt; [1] 1\n\n\nOnce applied we get:\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  mutate(\n    Ranking = as.numeric(Ranking),\n    `Equivalent Homes Powered` = as.numeric(`Equivalent Homes Powered`),\n    `Total Investment ($ Millions)` = as.numeric(`Total Investment ($ Millions)`),\n    `# of Wind Turbines` = as.numeric(`# of Wind Turbines`)\n  )\n    \nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ Ranking                         &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ‚Ä¶\n#&gt; $ State                           &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIF‚Ä¶\n#&gt; $ `Installed Capacity (MW)`       &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464‚Ä¶\n#&gt; $ `Equivalent Homes Powered`      &lt;dbl&gt; 6235000, 2268000, 1935000, 1298000,‚Ä¶\n#&gt; $ `Total Investment ($ Millions)` &lt;dbl&gt; 42000, 13700, 14200, 12600, 9400, 8‚Ä¶\n#&gt; $ `Wind Projects Online`          &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, ‚Ä¶\n#&gt; $ `# of Wind Turbines`            &lt;dbl&gt; 12750, 3717, 4145, 6972, 2795, 2632‚Ä¶\n\n\n\n\n\n\n\n5.2.2 Renaming made easy\njanitor::clean_names()\nThe janitor package is a great tool to ‚Äúclean‚Äù names of columns in data sets.\n\n\n\nIf we take the wind data ..\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx'))\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ Ranking                         &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", ‚Ä¶\n#&gt; $ State                           &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIF‚Ä¶\n#&gt; $ `Installed Capacity (MW)`       &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464‚Ä¶\n#&gt; $ `Equivalent Homes Powered`      &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.‚Ä¶\n#&gt; $ `Total Investment ($ Millions)` &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"1‚Ä¶\n#&gt; $ `Wind Projects Online`          &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, ‚Ä¶\n#&gt; $ `# of Wind Turbines`            &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"697‚Ä¶\n\n\n.. and use janitor, we can easily ‚Äúclean‚Äù the names.\n\nlibrary(janitor)\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  clean_names()\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ ranking                   &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\",‚Ä¶\n#&gt; $ state                     &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIFORNIA\"‚Ä¶\n#&gt; $ installed_capacity_mw     &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464, 3699‚Ä¶\n#&gt; $ equivalent_homes_powered  &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.0\", \"1‚Ä¶\n#&gt; $ total_investment_millions &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"12600.0‚Ä¶\n#&gt; $ wind_projects_online      &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, 25, 20‚Ä¶\n#&gt; $ number_of_wind_turbines   &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"6972.0\", ‚Ä¶\n\n\nWe can even change the style of the names.\n\nlibrary(janitor)\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  clean_names(case = 'lower_camel')\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ ranking                 &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"‚Ä¶\n#&gt; $ state                   &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIFORNIA\", ‚Ä¶\n#&gt; $ installedCapacityMw     &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464, 3699, ‚Ä¶\n#&gt; $ equivalentHomesPowered  &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.0\", \"129‚Ä¶\n#&gt; $ totalInvestmentMillions &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"12600.0\",‚Ä¶\n#&gt; $ windProjectsOnline      &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, 25, 20, ‚Ä¶\n#&gt; $ numberOfWindTurbines    &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"6972.0\", \"2‚Ä¶\n\n\n\nlibrary(janitor)\n\nwind &lt;- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %&gt;%\n  clean_names(case = 'screaming_snake')\n\nglimpse(wind)\n\n#&gt; Rows: 50\n#&gt; Columns: 7\n#&gt; $ RANKING                   &lt;chr&gt; \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\",‚Ä¶\n#&gt; $ STATE                     &lt;chr&gt; \"TEXAS\", \"OKLAHOMA\", \"IOWA\", \"CALIFORNIA\"‚Ä¶\n#&gt; $ INSTALLED_CAPACITY_MW     &lt;dbl&gt; 23262, 7495, 7312, 5686, 5110, 4464, 3699‚Ä¶\n#&gt; $ EQUIVALENT_HOMES_POWERED  &lt;chr&gt; \"6235000.0\", \"2268000.0\", \"1935000.0\", \"1‚Ä¶\n#&gt; $ TOTAL_INVESTMENT_MILLIONS &lt;chr&gt; \"42000.0\", \"13700.0\", \"14200.0\", \"12600.0‚Ä¶\n#&gt; $ WIND_PROJECTS_ONLINE      &lt;dbl&gt; 136, 45, 107, 104, 35, 49, 98, 31, 25, 20‚Ä¶\n#&gt; $ NUMBER_OF_WIND_TURBINES   &lt;chr&gt; \"12750.0\", \"3717.0\", \"4145.0\", \"6972.0\", ‚Ä¶\n\n\n\n5.2.2.1 select() : More Powerful Than You Probably Thought\nExample: data on sleeping patterns of different mammals\n\nglimpse(msleep)\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\nUse select() to choose which columns to keep\n\nmsleep %&gt;%\n  select(name:order, sleep_total:sleep_cycle) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 7\n#&gt; $ name        &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater sh‚Ä¶\n#&gt; $ genus       &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"B‚Ä¶\n#&gt; $ vore        &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"ca‚Ä¶\n#&gt; $ order       &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"A‚Ä¶\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n\n\nUse select() to choose which columns to drop\n\nmsleep %&gt;%\n  select(-(name:order)) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 7\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\n\n5.2.2.1.1 We can also select columns based on partial column names\nFor example, we can select columns that start with ‚Äúsleep‚Äù:\n\nmsleep %&gt;%\n  select(name, starts_with(\"sleep\")) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 4\n#&gt; $ name        &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater sh‚Ä¶\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n\n\nOr we can select columns that contain ‚Äúeep‚Äù and end with ‚Äúwt‚Äù:\n\nmsleep %&gt;%\n  select(contains(\"eep\"), ends_with(\"wt\")) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 5\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n#&gt; $ brainwt     &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000,‚Ä¶\n#&gt; $ bodywt      &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0.‚Ä¶\n\n\n\n\n5.2.2.1.2 Use select() to select columns based on their data type\nSelect only numeric columns:\n\nmsleep %&gt;%\n    select_if(is.numeric) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 6\n#&gt; $ sleep_total &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0,‚Ä¶\n#&gt; $ sleep_rem   &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.8‚Ä¶\n#&gt; $ sleep_cycle &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333,‚Ä¶\n#&gt; $ awake       &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0,‚Ä¶\n#&gt; $ brainwt     &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000,‚Ä¶\n#&gt; $ bodywt      &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0.‚Ä¶\n\n\nSelect only character columns:\n\nmsleep %&gt;%\n    select_if(is.character) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 5\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n\n\n\n\n5.2.2.1.3 Use select() to reorder variables\n\nmsleep %&gt;%\n    select(everything()) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\n\nmsleep %&gt;%\n    select(conservation, awake, everything()) %&gt;%\n    glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ conservation &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", NA, \"d‚Ä¶\n#&gt; $ awake        &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9, 21.0‚Ä¶\n#&gt; $ name         &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Greater s‚Ä¶\n#&gt; $ genus        &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bos\", \"‚Ä¶\n#&gt; $ vore         &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi\", \"c‚Ä¶\n#&gt; $ order        &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorpha\", \"‚Ä¶\n#&gt; $ sleep_total  &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1, 3.0‚Ä¶\n#&gt; $ sleep_rem    &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.6, 0.‚Ä¶\n#&gt; $ sleep_cycle  &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.3833333‚Ä¶\n#&gt; $ brainwt      &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.07000‚Ä¶\n#&gt; $ bodywt       &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.490, 0‚Ä¶\n\n\n\n\n5.2.2.1.4 Use select() to rename variables\nUse rename() to just change the name\n\nmsleep %&gt;%\n  rename(\n    animal = name,\n    extinction_threat = conservation\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ genus             &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bo‚Ä¶\n#&gt; $ vore              &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi‚Ä¶\n#&gt; $ order             &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorph‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n#&gt; $ sleep_total       &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1‚Ä¶\n#&gt; $ sleep_rem         &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.‚Ä¶\n#&gt; $ sleep_cycle       &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38‚Ä¶\n#&gt; $ awake             &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,‚Ä¶\n#&gt; $ brainwt           &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.‚Ä¶\n#&gt; $ bodywt            &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4‚Ä¶\n\n\nUse select() to change the name and drop everything else\n\nmsleep %&gt;%\n  select(\n    animal = name,\n    extinction_threat = conservation\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 2\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n\n\n\n\n5.2.2.1.5 Use select() to rename variables\nUse rename() to just change the name\n\nmsleep %&gt;%\n  rename(\n    animal = name,\n    extinction_threat = conservation\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ genus             &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bo‚Ä¶\n#&gt; $ vore              &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi‚Ä¶\n#&gt; $ order             &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorph‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n#&gt; $ sleep_total       &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1‚Ä¶\n#&gt; $ sleep_rem         &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.‚Ä¶\n#&gt; $ sleep_cycle       &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38‚Ä¶\n#&gt; $ awake             &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,‚Ä¶\n#&gt; $ brainwt           &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.‚Ä¶\n#&gt; $ bodywt            &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4‚Ä¶\n\n\nUse select() + everything() to change names and keep everything else\n\nmsleep %&gt;%\n  select(\n    animal = name,\n    extinction_threat = conservation,\n    everything()\n  ) %&gt;%\n  glimpse()\n\n#&gt; Rows: 83\n#&gt; Columns: 11\n#&gt; $ animal            &lt;chr&gt; \"Cheetah\", \"Owl monkey\", \"Mountain beaver\", \"Grea‚Ä¶\n#&gt; $ extinction_threat &lt;chr&gt; \"lc\", NA, \"nt\", \"lc\", \"domesticated\", NA, \"vu\", N‚Ä¶\n#&gt; $ genus             &lt;chr&gt; \"Acinonyx\", \"Aotus\", \"Aplodontia\", \"Blarina\", \"Bo‚Ä¶\n#&gt; $ vore              &lt;chr&gt; \"carni\", \"omni\", \"herbi\", \"omni\", \"herbi\", \"herbi‚Ä¶\n#&gt; $ order             &lt;chr&gt; \"Carnivora\", \"Primates\", \"Rodentia\", \"Soricomorph‚Ä¶\n#&gt; $ sleep_total       &lt;dbl&gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1‚Ä¶\n#&gt; $ sleep_rem         &lt;dbl&gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0.‚Ä¶\n#&gt; $ sleep_cycle       &lt;dbl&gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38‚Ä¶\n#&gt; $ awake             &lt;dbl&gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,‚Ä¶\n#&gt; $ brainwt           &lt;dbl&gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0.‚Ä¶\n#&gt; $ bodywt            &lt;dbl&gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4‚Ä¶",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#recoding-variables",
    "href": "cleaning-data.html#recoding-variables",
    "title": "5¬† Cleaning Data",
    "section": "5.3 Recoding Variables",
    "text": "5.3 Recoding Variables\n\n5.3.1 Recoding with ifelse()\nExample: Create a variable, cost_high, that is TRUE if the repair costs were greater than the median costs and FALSE otherwise.\n\nwildlife_impacts1 &lt;- wildlife_impacts %&gt;%\n  rename(cost = cost_repairs_infl_adj) %&gt;%\n  filter(!is.na(cost)) %&gt;%\n  mutate(\n    cost_median = median(cost),\n    cost_high = ifelse(cost &gt; cost_median, TRUE, FALSE)\n  )\n\nwildlife_impacts1 %&gt;%\n  select(cost, cost_median, cost_high) %&gt;%\n  head()\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;     cost cost_median cost_high\n#&gt;    &lt;dbl&gt;       &lt;dbl&gt; &lt;lgl&gt;    \n#&gt; 1   1000       26783 FALSE    \n#&gt; 2    200       26783 FALSE    \n#&gt; 3  10000       26783 FALSE    \n#&gt; 4 100000       26783 TRUE     \n#&gt; 5  20000       26783 FALSE    \n#&gt; 6 487000       26783 TRUE\n\n\n\n\n5.3.2 Recoding with nested ifelse()\nCreate a variable, season, based on the incident_month variable.\n\nwildlife_impacts2 &lt;- wildlife_impacts %&gt;%\n  mutate(season = ifelse(\n    incident_month %in% c(3, 4, 5), 'spring', ifelse(\n    incident_month %in% c(6, 7, 8), 'summer', ifelse(\n    incident_month %in% c(9, 10, 11), 'fall', 'winter')))\n  ) \n\nwildlife_impacts2 %&gt;%\n  distinct(incident_month, season) %&gt;%\n  head()\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   incident_month season\n#&gt;            &lt;dbl&gt; &lt;chr&gt; \n#&gt; 1             12 winter\n#&gt; 2             11 fall  \n#&gt; 3             10 fall  \n#&gt; 4              9 fall  \n#&gt; 5              8 summer\n#&gt; 6              7 summer\n\n\n\n\n5.3.3 Recoding with case_when()\nCreate a variable, season, based on the incident_month variable.\nNote: If you don‚Äôt include the final TRUE ~ 'winter' condition, you‚Äôll get NA for those cases.\n\nwildlife_impacts2 &lt;- wildlife_impacts %&gt;%\n  mutate(season = case_when(\n    incident_month %in% c(3, 4, 5) ~ 'spring',\n    incident_month %in% c(6, 7, 8) ~ 'summer',\n    incident_month %in% c(9, 10, 11) ~ 'fall',\n    TRUE ~ 'winter')\n  ) \n\nwildlife_impacts2 %&gt;%\n  distinct(incident_month, season) %&gt;%\n  head()\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   incident_month season\n#&gt;            &lt;dbl&gt; &lt;chr&gt; \n#&gt; 1             12 winter\n#&gt; 2             11 fall  \n#&gt; 3             10 fall  \n#&gt; 4              9 fall  \n#&gt; 5              8 summer\n#&gt; 6              7 summer\n\n\n\n5.3.3.1 Recoding with case_when() with between()\nCreate a variable, season, based on the incident_month variable.\n\nwildlife_impacts2 &lt;- wildlife_impacts %&gt;%\n  mutate(season = case_when(\n    between(incident_month, 3, 5) ~ 'spring',\n    between(incident_month, 6, 8) ~ 'summer',\n    between(incident_month, 9, 11) ~ 'fall',\n    TRUE ~ 'winter') \n  )\n\nwildlife_impacts2 %&gt;%\n    distinct(incident_month, season) %&gt;%\n    head()\n\n#&gt; # A tibble: 6 √ó 2\n#&gt;   incident_month season\n#&gt;            &lt;dbl&gt; &lt;chr&gt; \n#&gt; 1             12 winter\n#&gt; 2             11 fall  \n#&gt; 3             10 fall  \n#&gt; 4              9 fall  \n#&gt; 5              8 summer\n#&gt; 6              7 summer\n\n\n\n\n5.3.3.2 case_when() is ‚Äúcleaner‚Äù than ifelse()\nConvert the num_engs variable into a word of the number.\nifelse()\n\nwildlife_impacts3 &lt;- wildlife_impacts %&gt;%\n  mutate(num_engs = ifelse(\n    num_engs == 1, 'one', ifelse(\n    num_engs == 2, 'two', ifelse(\n    num_engs == 3, 'three', ifelse(\n    num_engs == 4, 'four',\n    as.character(num_engs)))))\n  )\n\nunique(wildlife_impacts3$num_engs)\n\n#&gt; [1] \"two\"   NA      \"three\" \"four\"  \"one\"\n\n\ncase_when()\n\nwildlife_impacts3 &lt;- wildlife_impacts %&gt;%\n  mutate(num_engs = case_when(\n    num_engs == 1 ~ 'one',\n    num_engs == 2 ~ 'two',\n    num_engs == 3 ~ 'three',\n    num_engs == 4 ~ 'four')\n  )\n\nunique(wildlife_impacts3$num_engs)\n\n#&gt; [1] \"two\"   NA      \"three\" \"four\"  \"one\"\n\n\n\n\n\n5.3.4 Break a single variable into two with separate()\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(rate, into = c(\"cases\", \"population\"))\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country      year cases  population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n#&gt; 1 Afghanistan  1999 745    19987071  \n#&gt; 2 Afghanistan  2000 2666   20595360  \n#&gt; 3 Brazil       1999 37737  172006362 \n#&gt; 4 Brazil       2000 80488  174504898 \n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\n\n\n\n5.3.5 Break a single variable into two with separate()\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n      rate,\n      into = c(\"cases\", \"population\"),\n      sep = \"/\"\n  )\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country      year cases  population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n#&gt; 1 Afghanistan  1999 745    19987071  \n#&gt; 2 Afghanistan  2000 2666   20595360  \n#&gt; 3 Brazil       1999 37737  172006362 \n#&gt; 4 Brazil       2000 80488  174504898 \n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\n\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    rate, \n    into = c(\"cases\", \"population\"),\n    sep = \"/\", \n    convert = TRUE\n  )\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country      year  cases population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt;  &lt;int&gt;      &lt;int&gt;\n#&gt; 1 Afghanistan  1999    745   19987071\n#&gt; 2 Afghanistan  2000   2666   20595360\n#&gt; 3 Brazil       1999  37737  172006362\n#&gt; 4 Brazil       2000  80488  174504898\n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\n\nYou can also break up a variable by an index\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    year, \n    into = c(\"century\", \"year\"),\n    sep = 2\n  )\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country     century year  rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan 19      99    745/19987071     \n#&gt; 2 Afghanistan 20      00    2666/20595360    \n#&gt; 3 Brazil      19      99    37737/172006362  \n#&gt; 4 Brazil      20      00    80488/174504898  \n#&gt; 5 China       19      99    212258/1272915272\n#&gt; 6 China       20      00    213766/1280428583\n\n\n\n\n5.3.6 unite(): The opposite of separate()\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    year, \n    into = c(\"century\", \"year\"),\n    sep = 2\n  ) %&gt;%\n  unite(year_new, century, year)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country     year_new rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;            \n#&gt; 1 Afghanistan 19_99    745/19987071     \n#&gt; 2 Afghanistan 20_00    2666/20595360    \n#&gt; 3 Brazil      19_99    37737/172006362  \n#&gt; 4 Brazil      20_00    80488/174504898  \n#&gt; 5 China       19_99    212258/1272915272\n#&gt; 6 China       20_00    213766/1280428583\n\n\n\ntb_rates\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\n\n\n\ntb_rates %&gt;%\n  separate(\n    year, \n    into = c(\"century\", \"year\"),\n    sep = 2\n  ) %&gt;%\n  unite(year_new, century, year, sep = \"\")\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country     year_new rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;            \n#&gt; 1 Afghanistan 1999     745/19987071     \n#&gt; 2 Afghanistan 2000     2666/20595360    \n#&gt; 3 Brazil      1999     37737/172006362  \n#&gt; 4 Brazil      2000     80488/174504898  \n#&gt; 5 China       1999     212258/1272915272\n#&gt; 6 China       2000     213766/1280428583",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#dealing-with-dates-data",
    "href": "cleaning-data.html#dealing-with-dates-data",
    "title": "5¬† Cleaning Data",
    "section": "5.4 Dealing with Dates Data",
    "text": "5.4 Dealing with Dates Data\n\n\n\n\n5.4.1 Create Dates from Strings\norder is the ONLY thing that matters!\n\n5.4.1.1 Year-Month-Day\n\nymd('2020-02-26')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\nymd('2020-02-26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 Feb 26')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\nymd('2020-02-26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 Feb 26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 Feb. 26')\n\n#&gt; [1] \"2020-02-26\"\n\nymd('2020 february 26')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\n\n5.4.1.2 Month-Day-Year\n\nmdy('February 26, 2020')\n\n#&gt; [1] \"2020-02-26\"\n\nmdy('Feb. 26, 2020')\n\n#&gt; [1] \"2020-02-26\"\n\nmdy('Feb 26 2020')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\n\n5.4.1.3 Day-Month-Year\n\ndmy('26 February 2020')\n\n#&gt; [1] \"2020-02-26\"\n\ndmy('26 Feb. 2020')\n\n#&gt; [1] \"2020-02-26\"\n\ndmy('26 Feb, 2020')\n\n#&gt; [1] \"2020-02-26\"\n\n\n\n5.4.1.3.1 Check out the lubridate cheat sheet\n\n\n\n\n5.4.2 Extracting information from dates\n\ndate &lt;- today()\ndate\n\n#&gt; [1] \"2024-08-16\"\n\n\n\n# Get the year\nyear(date)\n\n#&gt; [1] 2024\n\n\n\ndate &lt;- today()\ndate\n\n#&gt; [1] \"2024-08-16\"\n\n\n\n# Get the year\nyear(date)\n\n#&gt; [1] 2024\n\n# Get the month\nmonth(date)\n\n#&gt; [1] 8\n\n# Get the month name\nmonth(date, label = TRUE, abbr = FALSE)\n\n#&gt; [1] August\n#&gt; 12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\n\n\n# Get the day\nday(date)\n\n#&gt; [1] 16\n\n# Get the weekday\nwday(date)\n\n#&gt; [1] 6\n\n# Get the weekday name\nwday(date, label = TRUE, abbr = TRUE)\n\n#&gt; [1] Fri\n#&gt; Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat\n\n\n\n\n5.4.3 Modifying date elements\n\ndate &lt;- today()\ndate\n\n#&gt; [1] \"2024-08-16\"\n\n\n\n# Change the year\nyear(date) &lt;- 2016\ndate\n\n#&gt; [1] \"2016-08-16\"\n\n\n\n# Change the day\nday(date) &lt;- 30\n\n\ndate\n\n#&gt; [1] \"2016-08-30\"",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "cleaning-data.html#strategies-for-dealing-with-messy-excel-files",
    "href": "cleaning-data.html#strategies-for-dealing-with-messy-excel-files",
    "title": "5¬† Cleaning Data",
    "section": "5.5 Strategies for Dealing with Messy Excel Files",
    "text": "5.5 Strategies for Dealing with Messy Excel Files\nExample: When columns are repeated; like in the data for the winners of Nathan‚Äôs hot dog eating contest.\n\n5.5.1 Strategies\n\n5.5.1.1 1. divide & conquer\n\n\n5.5.1.2 2. pivot long, separate, pivot wide\n\n\n\n\n\n\n5.5.2 Strategy 1: divide & conquer\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\n\n\nhot_dogs &lt;- read_excel(here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens))\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 40\n#&gt; Columns: 7\n#&gt; $ year         &lt;chr&gt; \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\"‚Ä¶\n#&gt; $ mens         &lt;chr&gt; \"Paul Siederman & Joe Baldini\", \"Thomas DeBerry\", \"Ste‚Ä¶\n#&gt; $ dogs_eaten_3 &lt;chr&gt; \"9.1\", \"11\", \"11\", \"19.5\", \"9.5\", \"11.75\", \"15.5\", \"12‚Ä¶\n#&gt; $ country_4    &lt;chr&gt; \"United States\", \"United States\", \"United States\", \"Me‚Ä¶\n#&gt; $ womens       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ dogs_eaten_6 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ country_7    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n\n\nSteps\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nSplit data into two competitions with the same variable names\nCreate new variable in each data frame: competition\n\n\nhot_dogs_m &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor = mens,\n    dogs_eaten = dogs_eaten_3,\n    country    = country_4) %&gt;%\n  mutate(competition = 'Mens')\n\nhot_dogs_w &lt;- hot_dogs %&gt;%\n  select(\n      year,\n      competitor = womens,\n      dogs_eaten = dogs_eaten_6,\n      country    = country_7) %&gt;%\n  mutate(competition = 'Womens') %&gt;%\n  dplyr::filter(!is.na(competitor))\n\nSteps\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nSplit data into two competitions with the same variable names\nCreate new variable in each data frame: competition\nMerge data together with bind_rows()\nClean up final data frame\n\n\nhot_dogs &lt;- bind_rows(hot_dogs_m, hot_dogs_w) %&gt;%\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 49\n#&gt; Columns: 6\n#&gt; $ year        &lt;dbl&gt; 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1‚Ä¶\n#&gt; $ competitor  &lt;chr&gt; \"Paul Siederman & Joe Baldini\", \"Thomas DeBerry\", \"Stev‚Ä¶\n#&gt; $ dogs_eaten  &lt;dbl&gt; 9.10, 11.00, 11.00, 19.50, 9.50, 11.75, 15.50, 12.00, 1‚Ä¶\n#&gt; $ country     &lt;chr&gt; \"United States\", \"United States\", \"United States\", \"Mex‚Ä¶\n#&gt; $ competition &lt;chr&gt; \"Mens\", \"Mens\", \"Mens\", \"Mens\", \"Mens\", \"Mens\", \"Mens\",‚Ä¶\n#&gt; $ new_record  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,‚Ä¶\n\n\n\n\nhead(hot_dogs)\n\n#&gt; # A tibble: 6 √ó 6\n#&gt;    year competitor                  dogs_eaten country competition new_record\n#&gt;   &lt;dbl&gt; &lt;chr&gt;                            &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;       &lt;lgl&gt;     \n#&gt; 1  1980 Paul Siederman & Joe Baldi‚Ä¶        9.1 United‚Ä¶ Mens        FALSE     \n#&gt; 2  1981 Thomas DeBerry                    11   United‚Ä¶ Mens        FALSE     \n#&gt; 3  1982 Steven Abrams                     11   United‚Ä¶ Mens        FALSE     \n#&gt; 4  1983 Luis Llamas                       19.5 Mexico  Mens        FALSE     \n#&gt; 5  1984 Birgit Felden                      9.5 Germany Mens        FALSE     \n#&gt; 6  1985 Oscar Rodriguez                   11.8 United‚Ä¶ Mens        FALSE\n\n\n\n\n5.5.3 Strategy 2: pivot long, separate, pivot wide\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\n\n\nhot_dogs &lt;- read_excel(here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens))\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 40\n#&gt; Columns: 7\n#&gt; $ year         &lt;chr&gt; \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\"‚Ä¶\n#&gt; $ mens         &lt;chr&gt; \"Paul Siederman & Joe Baldini\", \"Thomas DeBerry\", \"Ste‚Ä¶\n#&gt; $ dogs_eaten_3 &lt;chr&gt; \"9.1\", \"11\", \"11\", \"19.5\", \"9.5\", \"11.75\", \"15.5\", \"12‚Ä¶\n#&gt; $ country_4    &lt;chr&gt; \"United States\", \"United States\", \"United States\", \"Me‚Ä¶\n#&gt; $ womens       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ dogs_eaten_6 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n#&gt; $ country_7    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA‚Ä¶\n\n\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nRename variables\nGather all the ‚Äújoint‚Äù variables\n\n\nhot_dogs &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor.mens   = mens,\n    competitor.womens = womens,\n    dogs_eaten.mens   = dogs_eaten_3,\n    dogs_eaten.womens = dogs_eaten_6,\n    country.mens      = country_4,\n    country.womens    = country_7\n  ) %&gt;%\n  pivot_longer(\n    names_to = 'variable', \n    values_to = 'value',\n    competitor.mens:country.womens\n  )\n\nhead(hot_dogs, 3)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   year  variable          value                       \n#&gt;   &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                       \n#&gt; 1 1980  competitor.mens   Paul Siederman & Joe Baldini\n#&gt; 2 1980  competitor.womens &lt;NA&gt;                        \n#&gt; 3 1980  dogs_eaten.mens   9.1\n\n\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nRename variables\nGather all the ‚Äújoint‚Äù variables\nSeparate ‚Äújoint‚Äù variables into components\n\n\nhot_dogs &lt;- hot_dogs %&gt;%\n  separate(\n    variable, \n    into = c('variable', 'competition'),\n    sep = '\\\\.'\n  )\n\nhead(hot_dogs)\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   year  variable   competition value                       \n#&gt;   &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;                       \n#&gt; 1 1980  competitor mens        Paul Siederman & Joe Baldini\n#&gt; 2 1980  competitor womens      &lt;NA&gt;                        \n#&gt; 3 1980  dogs_eaten mens        9.1                         \n#&gt; 4 1980  dogs_eaten womens      &lt;NA&gt;                        \n#&gt; 5 1980  country    mens        United States               \n#&gt; 6 1980  country    womens      &lt;NA&gt;\n\n\nSteps:\n\nRead in the data\nClean the names\nRemove * note at bottom of table\nRename variables\nGather all the ‚Äújoint‚Äù variables\nSeparate ‚Äújoint‚Äù variables into components\nSpread variable and value back to columns\nClean up final data frame\n\n\nhot_dogs &lt;- hot_dogs %&gt;%\n  spread(key = variable, value = value) %&gt;%\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\nglimpse(hot_dogs)\n\n#&gt; Rows: 80\n#&gt; Columns: 6\n#&gt; $ year        &lt;dbl&gt; 1980, 1980, 1981, 1981, 1982, 1982, 1983, 1983, 1984, 1‚Ä¶\n#&gt; $ competition &lt;chr&gt; \"mens\", \"womens\", \"mens\", \"womens\", \"mens\", \"womens\", \"‚Ä¶\n#&gt; $ competitor  &lt;chr&gt; \"Paul Siederman & Joe Baldini\", NA, \"Thomas DeBerry\", N‚Ä¶\n#&gt; $ country     &lt;chr&gt; \"United States\", NA, \"United States\", NA, \"United State‚Ä¶\n#&gt; $ dogs_eaten  &lt;dbl&gt; 9.10, NA, 11.00, NA, 11.00, NA, 19.50, NA, 9.50, NA, 11‚Ä¶\n#&gt; $ new_record  &lt;lgl&gt; FALSE, NA, FALSE, NA, FALSE, NA, FALSE, NA, FALSE, NA, ‚Ä¶\n\n\n\n\nDivide & conquer\n\nhot_dogs &lt;- read_excel(here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens))\n\n# Divide\nhot_dogs_m &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor = mens,\n    dogs_eaten = dogs_eaten_3,\n    country    = country_4) %&gt;%\n  mutate(competition = 'Mens')\nhot_dogs_w &lt;- hot_dogs %&gt;%\n  select(\n    year,\n    competitor = womens,\n    dogs_eaten = dogs_eaten_6,\n    country    = country_7) %&gt;%\n  mutate(competition = 'Womens') %&gt;%\n  dplyr::filter(!is.na(competitor))\n\n# Merge and finish cleaning\nhot_dogs &lt;- bind_rows(hot_dogs_m, hot_dogs_w) %&gt;%\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\n\n\nPivot long, separate, pivot wide\n\nhot_dogs &lt;- read_excel(\n  here::here('data', 'hot_dog_winners.xlsx'),\n  sheet = 'hot_dog_winners') %&gt;%\n  clean_names() %&gt;%\n  dplyr::filter(!is.na(mens)) %&gt;%\n\n  # Rename variables\n  select(\n    year,\n    competitor.mens   = mens,\n    competitor.womens = womens,\n    dogs_eaten.mens   = dogs_eaten_3,\n    dogs_eaten.womens = dogs_eaten_6,\n    country.mens      = country_4,\n    country.womens    = country_7\n  ) %&gt;%\n  # Gather \"joint\" variables\n  pivot_longer(\n    names_to = 'variable', \n    values_to = 'value',\n    competitor.mens:country.womens\n  ) %&gt;%\n  # Separate \"joint\" variables\n  separate(\n    variable, \n    into = c('variable', 'competition'),\n    sep = '\\\\.'\n  ) %&gt;%\n  # Spread \"joint\" variables\n  pivot_wider(\n    names_from = variable, \n    values_from = value\n  ) %&gt;%\n  # Finish cleaning\n  mutate(\n    new_record = str_detect(dogs_eaten, \"\\\\*\"),\n    dogs_eaten = parse_number(dogs_eaten),\n    year       = as.numeric(year)\n  )\n\n\n\n\n\n5.5.4 Strategies for dealing with sub-headers\nExample: OICA passenger car sales data\n\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\n\n\npc_sales &lt;- read_excel(here::here('data', 'pc_sales_2018.xlsx'),\n  sheet = 'pc_sales', skip = 5) %&gt;%\n  clean_names() %&gt;%\n  rename(country = regions_countries)\n\nglimpse(pc_sales)\n\n#&gt; Rows: 160\n#&gt; Columns: 18\n#&gt; $ country &lt;chr&gt; NA, \"EUROPE\", \"EU 28 countries + EFTA\", \"EU 15 countries + ‚Ä¶\n#&gt; $ x2      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n#&gt; $ x3      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n#&gt; $ x4      &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,‚Ä¶\n#&gt; $ x2005   &lt;dbl&gt; NA, 17906455, 15622035, 14565695, 307915, 480088, 148819, 1‚Ä¶\n#&gt; $ x2006   &lt;dbl&gt; NA, 18685556, 15961138, 14820182, 308594, 526141, 156936, 1‚Ä¶\n#&gt; $ x2007   &lt;dbl&gt; NA, 19618588, 16147274, 14842186, 298182, 524795, 162686, 1‚Ä¶\n#&gt; $ x2008   &lt;dbl&gt; NA, 18821599, 14911880, 13602038, 293697, 535947, 150199, 1‚Ä¶\n#&gt; $ x2009   &lt;dbl&gt; NA, 16608761, 14533115, 13668808, 319403, 476194, 112454, 9‚Ä¶\n#&gt; $ x2010   &lt;dbl&gt; NA, 16499863, 13830694, 12984549, 328563, 547340, 153858, 1‚Ä¶\n#&gt; $ x2011   &lt;dbl&gt; NA, 17167600, 13642659, 12815435, 356145, 572211, 170036, 1‚Ä¶\n#&gt; $ x2012   &lt;dbl&gt; NA, 16191269, 12567903, 11773281, 336010, 486737, 170763, 1‚Ä¶\n#&gt; $ x2013   &lt;dbl&gt; NA, 15942273, 12344415, 11555153, 319035, 486065, 182086, 1‚Ä¶\n#&gt; $ x2014   &lt;dbl&gt; NA, 16154279, 13061461, 12148648, 303318, 482939, 189055, 1‚Ä¶\n#&gt; $ x2015   &lt;dbl&gt; NA, 16410563, 14287881, 13261258, 308555, 501066, 207717, 1‚Ä¶\n#&gt; $ x2016   &lt;dbl&gt; NA, 17291819, 15160239, 13971468, 329604, 539519, 222924, 1‚Ä¶\n#&gt; $ x2017   &lt;dbl&gt; NA, 17974281, 15631283, 14320223, 353320, 546558, 221821, 1‚Ä¶\n#&gt; $ x2018   &lt;dbl&gt; NA, 17912336, 15626509, 14210016, 341068, 549632, 218566, 1‚Ä¶\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\n\nUse datapasta to get rows to drop\n\ndrop &lt;- c(\n  'EUROPE', 'EU 28 countries + EFTA',\n  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',\n  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',\n  'NAFTA', 'CENTRAL & SOUTH AMERICA',\n  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')\n\npc_sales &lt;- pc_sales %&gt;%\n  # Drop bad columns\n  select(-c(x2:x4)) %&gt;%  \n  # Filter out bad rows\n  filter(\n    ! country %in% drop,\n    ! is.na(country)\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 15\n#&gt;   country   x2005   x2006   x2007   x2008   x2009  x2010  x2011  x2012  x2013\n#&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 AUSTRIA  307915  308594  298182  293697  319403 3.29e5 3.56e5 3.36e5 3.19e5\n#&gt; 2 BELGIUM  480088  526141  524795  535947  476194 5.47e5 5.72e5 4.87e5 4.86e5\n#&gt; 3 DENMARK  148819  156936  162686  150199  112454 1.54e5 1.70e5 1.71e5 1.82e5\n#&gt; 4 FINLAND  148161  145700  125608  139669   90574 1.12e5 1.26e5 1.11e5 1.03e5\n#&gt; 5 FRANCE  2118042 2045745 2109672 2091369 2302398 2.25e6 2.20e6 1.90e6 1.79e6\n#&gt; 6 GERMANY 3319259 3467961 3148163 3090040 3807175 2.92e6 3.17e6 3.08e6 2.95e6\n#&gt; # ‚Ñπ 5 more variables: x2014 &lt;dbl&gt;, x2015 &lt;dbl&gt;, x2016 &lt;dbl&gt;, x2017 &lt;dbl&gt;,\n#&gt; #   x2018 &lt;dbl&gt;\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\nGather the year variables\n\n\npc_sales &lt;- pc_sales %&gt;%\n  pivot_longer(\n    names_to = 'year', \n    values_to = 'num_cars', \n    cols = x2005:x2018\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country year  num_cars\n#&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;\n#&gt; 1 AUSTRIA x2005   307915\n#&gt; 2 AUSTRIA x2006   308594\n#&gt; 3 AUSTRIA x2007   298182\n#&gt; 4 AUSTRIA x2008   293697\n#&gt; 5 AUSTRIA x2009   319403\n#&gt; 6 AUSTRIA x2010   328563\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\nGather the year variables\nSeparate the ‚Äúx‚Äù from the year\n\n\npc_sales &lt;- pc_sales %&gt;%\n  separate(\n    year, \n    into = c('drop', 'year'), \n    sep = 'x',\n    convert = TRUE\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country drop   year num_cars\n#&gt;   &lt;chr&gt;   &lt;lgl&gt; &lt;int&gt;    &lt;dbl&gt;\n#&gt; 1 AUSTRIA NA     2005   307915\n#&gt; 2 AUSTRIA NA     2006   308594\n#&gt; 3 AUSTRIA NA     2007   298182\n#&gt; 4 AUSTRIA NA     2008   293697\n#&gt; 5 AUSTRIA NA     2009   319403\n#&gt; 6 AUSTRIA NA     2010   328563\n\n\nSteps:\n\nRead in the data, skipping first 5 rows\nClean the names\nDrop bad columns\nFilter out bad rows\nGather the year variables\nSeparate the ‚Äúx‚Äù from the year\nRemove the drop column\nFinish cleaning\n\n\npc_sales &lt;- pc_sales %&gt;%\n  select(-drop) %&gt;%\n  mutate(country  = str_to_title(country))\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country  year num_cars\n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt;\n#&gt; 1 Austria  2005   307915\n#&gt; 2 Austria  2006   308594\n#&gt; 3 Austria  2007   298182\n#&gt; 4 Austria  2008   293697\n#&gt; 5 Austria  2009   319403\n#&gt; 6 Austria  2010   328563\n\n\n\n5.5.4.0.1 What if I wanted to keep the continents?\n\n\n\n5.5.5 Strategy: Join a new data frame linking country -&gt; continent\n\ndrop &lt;- c(\n  'EUROPE', 'EU 28 countries + EFTA',\n  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',\n  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',\n  'NAFTA', 'CENTRAL & SOUTH AMERICA',\n  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')\n\npc_sales &lt;- read_excel(\n  here::here('data', 'pc_sales_2018.xlsx'),\n  sheet = 'pc_sales', skip = 5) %&gt;%\n  clean_names() %&gt;%\n  rename(country = regions_countries) %&gt;% \n  # Drop bad columns\n  select(-c(x2:x4)) %&gt;%  \n  # Filter out bad rows\n  filter(\n    ! country %in% drop,\n    ! is.na(country)\n  ) %&gt;% \n  pivot_longer(\n    names_to = 'year', values_to = 'num_cars', \n    cols = x2005:x2018\n  ) %&gt;%\n  separate(\n    year, \n    into = c('drop', 'year'), \n    sep = 'x',\n    convert = TRUE\n  ) %&gt;% \n  select(-drop)\n\nhead(pc_sales, 3)\n\n#&gt; # A tibble: 3 √ó 3\n#&gt;   country  year num_cars\n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt;\n#&gt; 1 AUSTRIA  2005   307915\n#&gt; 2 AUSTRIA  2006   308594\n#&gt; 3 AUSTRIA  2007   298182\n\n\n\n\n5.5.6 Strategy 1: Find another source\n\n\n5.5.7 Strategy 2: Hand-make it\n\npc_regions &lt;- read_csv(here::here(\"data\", \"pc_regions.csv\"))\n\nhead(pc_regions)\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   country region subregion             \n#&gt;   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;                 \n#&gt; 1 AUSTRIA EUROPE EU 15 countries + EFTA\n#&gt; 2 BELGIUM EUROPE EU 15 countries + EFTA\n#&gt; 3 DENMARK EUROPE EU 15 countries + EFTA\n#&gt; 4 FINLAND EUROPE EU 15 countries + EFTA\n#&gt; 5 FRANCE  EUROPE EU 15 countries + EFTA\n#&gt; 6 GERMANY EUROPE EU 15 countries + EFTA\n\n\n\npc_sales &lt;- pc_sales %&gt;% \n  left_join(pc_regions)\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 5\n#&gt;   country  year num_cars region subregion             \n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 \n#&gt; 1 AUSTRIA  2005   307915 EUROPE EU 15 countries + EFTA\n#&gt; 2 AUSTRIA  2006   308594 EUROPE EU 15 countries + EFTA\n#&gt; 3 AUSTRIA  2007   298182 EUROPE EU 15 countries + EFTA\n#&gt; 4 AUSTRIA  2008   293697 EUROPE EU 15 countries + EFTA\n#&gt; 5 AUSTRIA  2009   319403 EUROPE EU 15 countries + EFTA\n#&gt; 6 AUSTRIA  2010   328563 EUROPE EU 15 countries + EFTA\n\n\n\n\ndrop &lt;- c(\n  'EUROPE', 'EU 28 countries + EFTA',\n  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',\n  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',\n  'NAFTA', 'CENTRAL & SOUTH AMERICA',\n  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')\n\npc_regions &lt;- read_csv(here::here(\"data\", \"pc_regions.csv\"))\n\npc_sales &lt;- read_excel(\n  here::here('data', 'pc_sales_2018.xlsx'),\n  sheet = 'pc_sales', skip = 5) %&gt;%\n  clean_names() %&gt;%\n  rename(country = regions_countries) %&gt;% \n  # Drop bad columns\n  select(-c(x2:x4)) %&gt;%       \n  # Filter out bad rows\n  filter(\n    ! country %in% drop,\n    ! is.na(country)\n  ) %&gt;% \n  pivot_longer(\n    names_to = 'year', values_to = 'num_cars', \n    cols = x2005:x2018\n  ) %&gt;%\n  separate(\n    year, into = c('drop', 'year'), sep = 'x',\n    convert = TRUE\n  ) %&gt;% \n  select(-drop) %&gt;% \n  left_join(pc_regions) %&gt;% \n  mutate(\n    country  = str_to_title(country), \n    region  = str_to_title(region), \n    subregion  = str_to_title(subregion)\n  )\n\nhead(pc_sales)\n\n#&gt; # A tibble: 6 √ó 5\n#&gt;   country  year num_cars region subregion             \n#&gt;   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 \n#&gt; 1 Austria  2005   307915 Europe Eu 15 Countries + Efta\n#&gt; 2 Austria  2006   308594 Europe Eu 15 Countries + Efta\n#&gt; 3 Austria  2007   298182 Europe Eu 15 Countries + Efta\n#&gt; 4 Austria  2008   293697 Europe Eu 15 Countries + Efta\n#&gt; 5 Austria  2009   319403 Europe Eu 15 Countries + Efta\n#&gt; 6 Austria  2010   328563 Europe Eu 15 Countries + Efta",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Cleaning Data</span>"
    ]
  },
  {
    "objectID": "good-practices.html",
    "href": "good-practices.html",
    "title": "6¬† Good Data Practices",
    "section": "",
    "text": "6.1 Data Provenance\nIt matters where you are getting your data. Think about:",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Good Data Practices</span>"
    ]
  },
  {
    "objectID": "good-practices.html#data-provenance",
    "href": "good-practices.html#data-provenance",
    "title": "6¬† Good Data Practices",
    "section": "",
    "text": "Validity:\n\nIs this data trustworthy? Is it authentic?\nWhere did the data come from?\nHow has the data been changed / managed over time?\nIs the data complete?\n\nComprehension:\n\nIs this data accurate?\nCan you explain your results?\nIs this the right data to answer your question?\n\nReproducibility:\n\nPeople should be able to fully replicate your results from your raw data and code.",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Good Data Practices</span>"
    ]
  },
  {
    "objectID": "good-practices.html#documenting-data-sources",
    "href": "good-practices.html#documenting-data-sources",
    "title": "6¬† Good Data Practices",
    "section": "6.2 Documenting Data Sources",
    "text": "6.2 Documenting Data Sources\nDocument your data source like a museum curator \nWhenever you download data, you should at a minimum record the following:\n\nThe name of the file you are describing.\nThe date you downloaded it.\nThe original name of the downloaded file (in case you renamed it).\nThe url to the site you downloaded it from.\nThe source of the original data (sometimes different from the site you downloaded it from).\nA short description of the data, maybe how they were collected (if available).\nA dictionary for the data (e.g.¬†a simple markdown table describing each variable).",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Good Data Practices</span>"
    ]
  },
  {
    "objectID": "summarizing-data.html",
    "href": "summarizing-data.html",
    "title": "7¬† Summarizing Data",
    "section": "",
    "text": "7.1 Types of Data\nCategorical\nSubdivide things into groups\nNumerical\nMeasure things with numbers",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "summarizing-data.html#types-of-data",
    "href": "summarizing-data.html#types-of-data",
    "title": "7¬† Summarizing Data",
    "section": "",
    "text": "What type?\nWhich category?\n\n\n\n\nHow many?\nHow much?\n\n\n7.1.0.1 Categorical (discrete) variables:\nNominal\n\nOrder doesn‚Äôt matter\nDiffer in ‚Äúname‚Äù (nominal) only\n\ne.g.¬†country in TB case data:\n\n\n#&gt; # A tibble: 6 √ó 4\n#&gt;   country      year  cases population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1 Afghanistan  1999    745   19987071\n#&gt; 2 Afghanistan  2000   2666   20595360\n#&gt; 3 Brazil       1999  37737  172006362\n#&gt; 4 Brazil       2000  80488  174504898\n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\n\nOrdinal\n\nOrder matters\nDistance between units not equal\n\ne.g.: Placement 2017 Boston marathon:\n\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   Placement `Official Time` Name            \n#&gt;       &lt;dbl&gt; &lt;time&gt;          &lt;chr&gt;           \n#&gt; 1         1 02:09:37        Kirui, Geoffrey \n#&gt; 2         2 02:09:58        Rupp, Galen     \n#&gt; 3         3 02:10:28        Osako, Suguru   \n#&gt; 4         4 02:12:08        Biwott, Shadrack\n#&gt; 5         5 02:12:35        Chebet, Wilson  \n#&gt; 6         6 02:12:45        Abdirahman, Abdi\n\n\n\n\n7.1.0.2 Numerical data:\nInterval\n\nNumerical scale with arbitrary starting point\nNo ‚Äú0‚Äù point\nCan‚Äôt say ‚Äúx‚Äù is double ‚Äúy‚Äù\n\ne.g.: temp in Beaver data\n\n\n#&gt;   day time  temp activ\n#&gt; 1 346  840 36.33     0\n#&gt; 2 346  850 36.34     0\n#&gt; 3 346  900 36.35     0\n#&gt; 4 346  910 36.42     0\n#&gt; 5 346  920 36.55     0\n#&gt; 6 346  930 36.69     0\n\n\nRatio\n\nHas a ‚Äú0‚Äù point\nCan be described as percentages\nCan say ‚Äúx‚Äù is double ‚Äúy‚Äù\n\ne.g.: height & speed in wildlife impacts\n\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   incident_date       height speed\n#&gt;   &lt;dttm&gt;               &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 2018-12-31 00:00:00    700   200\n#&gt; 2 2018-12-27 00:00:00    600   145\n#&gt; 3 2018-12-23 00:00:00      0   130\n#&gt; 4 2018-12-22 00:00:00    500   160\n#&gt; 5 2018-12-21 00:00:00    100   150\n#&gt; 6 2018-12-18 00:00:00   4500   250\n\n\n\n\n7.1.1 Key Questions\nCategorical\nDoes this work? Does the order matter?\nYes: Ordinal\nNo: Nominal\nNumerical\nIs there a ‚Äúbaseline‚Äù?\nYes: Ratio\nNo: Interval\n\n\n7.1.2 Variable Encoding\nBe careful of how variables are encoded!\nWhen numbers are categories\n\n‚ÄúDummy coding‚Äù: e.g., passedTest = 1 or 0)\n‚ÄúNorth‚Äù, ‚ÄúSouth‚Äù, ‚ÄúEast‚Äù, ‚ÄúWest‚Äù = 1, 2, 3, 4\n\nWhen ratio data are discrete (i.e.¬†counts)\n\nNumber of eggs in a carton, heart beats per minute, etc.\nContinuous variables measured discretely (e.g.¬†age)\n\n\n\n7.1.3 Time\n\nAs ordinal categories: ‚ÄúJan.‚Äù, ‚ÄúFeb.‚Äù, ‚ÄúMar.‚Äù, etc.\nAs interval scale: ‚ÄúJan.¬†1‚Äù, ‚ÄúJan.¬†2‚Äù, ‚ÄúJan.¬†3‚Äù, etc.\nAs ratio scale: ‚Äú30 sec‚Äù, ‚Äú60 sec‚Äù, ‚Äú70 sec‚Äù, etc.",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "summarizing-data.html#summary-measures",
    "href": "summarizing-data.html#summary-measures",
    "title": "7¬† Summarizing Data",
    "section": "7.2 Summary Measures",
    "text": "7.2 Summary Measures\nSingle variables: Centrality & Variability\nTwo variables: Correlation\n\n7.2.1 Centrality (a.k.a. The ‚ÄúAverage‚Äù Value)\nA single number representing the middle of a set of numbers]\nMean: \\(\\frac{\\text{Sum of values}}{\\text{\\# of values}}\\)\nMedian: ‚ÄúMiddle‚Äù value (50% of data above & below)\nMean isn‚Äôt always the ‚Äúbest‚Äù choice\n\nwildlife_impacts %&gt;%\n  filter(! is.na(height)) %&gt;%\n  summarise(\n    mean = mean(height),\n    median = median(height)\n  )\n\n#&gt; # A tibble: 1 √ó 2\n#&gt;    mean median\n#&gt;   &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1  984.     50\n\n\nPercent of data below mean:\n\n\n#&gt; [1] \"73.9%\"\n\n\nOn average, at what height do planes hit birds?\n\nOn average, where do planes hit birds? Saying ~1000 ft is misleading. It‚Äôs much more likely to be under 100 ft.\nBeware the ‚Äúflaw of averages‚Äù\nWhat happened to the statistician that crossed a river with an average depth of 3 feet?\n‚Ä¶he drowned\n\n\n\n7.2.2 Variability (‚ÄúSpread‚Äù)\nStandard deviation: distribution of values relative to the mean \\(s = \\sqrt{\\frac{\\sum_{i=1}^{N}(x_i - \\bar{x})^2}{N - 1}}\\)\nInterquartile range (IQR): \\(Q_3 - Q_1\\) (middle 50% of data)\nRange: max - min\nExample: Days to ship\nComplaints are coming in about orders shipped from warehouse B, so you collect some data:\n\ndaysToShip\n\n#&gt;    order warehouseA warehouseB\n#&gt; 1      1          3          1\n#&gt; 2      2          3          1\n#&gt; 3      3          3          1\n#&gt; 4      4          4          3\n#&gt; 5      5          4          3\n#&gt; 6      6          4          4\n#&gt; 7      7          5          5\n#&gt; 8      8          5          5\n#&gt; 9      9          5          5\n#&gt; 10    10          5          6\n#&gt; 11    11          5          7\n#&gt; 12    12          5         10\n\n\nHere, averages are misleading:\n\ndaysToShip %&gt;%\n  gather(warehouse, days, warehouseA:warehouseB) %&gt;%\n  group_by(warehouse) %&gt;%\n  summarise(\n    mean   = mean(days),\n    median = median(days)\n  )\n\n#&gt; # A tibble: 2 √ó 3\n#&gt;   warehouse   mean median\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 warehouseA  4.25    4.5\n#&gt; 2 warehouseB  4.25    4.5\n\n\nVariability reveals difference in days to ship:\n\ndaysToShip %&gt;%\n  gather(warehouse, days, warehouseA:warehouseB) %&gt;%\n  group_by(warehouse) %&gt;%\n  summarise(\n    mean   = mean(days),\n    median = median(days),\n    range  = max(days) - min(days),\n    sd     = sd(days)\n  )\n\n#&gt; # A tibble: 2 √ó 5\n#&gt;   warehouse   mean median range    sd\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1 warehouseA  4.25    4.5     2 0.866\n#&gt; 2 warehouseB  4.25    4.5     9 2.70\n\n\n\n\n\nInterpreting the standard deviation\n\\(s = \\sqrt{\\frac{\\sum_{i=1}^{N}(x_i - \\bar{x})^2}{N - 1}}\\)\n\n\n\n\nMean & Standard Deviation are sensitive to outliers\nOutliers: \\(Q_1 - 1.5 IQR\\) or \\(Q_3 + 1.5 IQR\\)\nExtreme values: \\(Q_1 - 3 IQR\\) or \\(Q_3 + 3 IQR\\)\n\ndata1 &lt;- c(3, 3, 4, 5, 5, 6, 6, 7, 8, 9)\n\n\nMean: 5.6\nStandard Deviation: 2.01\nMedian: 5.5\nIQR: 2.5\n\n\ndata2 &lt;- c(3, 3, 4, 5, 5, 6, 6, 7, 8, 20)\n\n\nMean: 6.7\nStandard Deviation: 4.95\nMedian: 5.5\nIQR: 2.5\n\nRobust statistics for continuous data (less sensitive to outliers):\nCentrality: Use median rather than mean\nVariability: Use IQR rather than standard deviation",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "summarizing-data.html#summarizingvisualizing-data-by-type",
    "href": "summarizing-data.html#summarizingvisualizing-data-by-type",
    "title": "7¬† Summarizing Data",
    "section": "7.3 Summarizing/Visualizing Data by Type",
    "text": "7.3 Summarizing/Visualizing Data by Type\n‚ÄúVisualizing data helps us think‚Äù\nOne great example of the importance of visualizing data would be Anscombe‚Äôs Quartet. Anscombe‚Äôs quartet is comprised of the four datasets shown below. Although these four datasets have identical summary statistics, their graphs reveal their varying data points. Similarly, the Datasaurus dataset seems like an ordinary dataset when looking at the summary statistics. However, plotting the dataset reveals a dinosaur. Inspired by the Anscombe‚Äôs Quartet and Datasaurus datasets, the Datasaurus Dozon has 12 datasets with identical summary statistics and differing imagery in their graphs.\nAnscombe‚Äôs Quartet\n Stephen Few (2009, pg. 6)\n\nStephen Few (2009, pg. 6)\nThe Datasaurus and the Datasaurus Dozon\n(More here)\n\n\n7.3.1 The data type determines how to summarize and visualize it.\n\n\n\nNominal(Categorical)\n\n\nMeasures:\n\n\n\nFrequency counts /Proportions\n\n\n\n\nCharts:\n\n\n\nBars\n\n\n\n\n\nOrdinal(Categorical)\n\n\nMeasures:\n\n\n\nFrequency counts /Proportions\n\n\nCentrality:Median, Mode\n\n\nVariability: IQR\n\n\n\n\nCharts:\n\n\n\nBars\n\n\n\n\n\nNumerical(Continuous)\n\n\nMeasures:\n\n\n\nCentrality:Mean, median\n\n\nVariability: Range, standard deviation, IQR\n\n\n\n\nCharts:\n\n\n\nHistogram\n\n\nBoxplot\n\n\n\n\n\n\n7.3.2 Summarizing Nominal data\nSummarize: Counts / percentages\n\nwildlife_impacts %&gt;%\n  count(operator, sort = TRUE) %&gt;%\n  mutate(p = n / sum(n))\n\n#&gt; # A tibble: 4 √ó 3\n#&gt;   operator               n     p\n#&gt;   &lt;chr&gt;              &lt;int&gt; &lt;dbl&gt;\n#&gt; 1 SOUTHWEST AIRLINES 17970 0.315\n#&gt; 2 UNITED AIRLINES    15116 0.265\n#&gt; 3 AMERICAN AIRLINES  14887 0.261\n#&gt; 4 DELTA AIR LINES     9005 0.158\n\n\nVisualize: (usually sorted) Bars\n\nwildlife_impacts %&gt;%\n  count(operator, sort = TRUE) %&gt;%\n  ggplot() +\n  geom_col(\n    aes(x = n, y = reorder(operator, n)),\n    width = 0.7\n  ) +\n  labs(x = \"Count\", y = \"Operator\")\n\n\n\n\n\n\n\n\n\n\n7.3.3 Summarizing Ordinal data\nSummarize: Counts / percentages\n\nwildlife_impacts %&gt;%\n  count(incident_month, sort = TRUE) %&gt;%\n  mutate(p = n / sum(n))\n\n#&gt; # A tibble: 12 √ó 3\n#&gt;   incident_month     n      p\n#&gt;            &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;\n#&gt; 1              9  7980 0.140 \n#&gt; 2             10  7754 0.136 \n#&gt; 3              8  7104 0.125 \n#&gt; 4              5  6161 0.108 \n#&gt; 5              7  6133 0.108 \n#&gt; 6              6  4541 0.0797\n#&gt; # ‚Ñπ 6 more rows\n\n\nVisualize: Bars\n\nwildlife_impacts %&gt;%\n  count(incident_month, sort = TRUE) %&gt;%\n  ggplot() +\n  geom_col(\n    aes(x = as.factor(incident_month), y = n),\n    width = 0.7\n  ) +\n  labs(x = \"Incident month\")\n\n\n\n\n\n\n\n\n\n\n7.3.4 Summarizing Numerical (continuous) variables\n\n\nHistograms:\n\n\nSkewness\n\n\nNumber of modes\n\n\n\n\nBoxplots:\n\n\nOutliers\n\n\nComparing variables\n\n\n\n\n\n\n7.3.4.1 Histogram: Identify Skewness & # of Modes\nSummarise: Mean, median, sd, range, & IQR:\n\nsummary(wildlife_impacts$height)\n\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n#&gt;     0.0     0.0    50.0   983.8  1000.0 25000.0   18038\n\n\nVisualize: Histogram (identify skewness & modes)\nHeight\n\nggplot(wildlife_impacts) +\n  geom_histogram(aes(x = height), bins = 50) +\n  labs(x = 'Height (ft)', y = 'Count')\n\n\n\n\n\n\n\n\nSpeed\n\nggplot(wildlife_impacts) +\n  geom_histogram(aes(x = speed), bins = 50) +\n  labs(x = 'speed (mph)', y = 'Count')\n\n\n\n\n\n\n\n\n\n\n7.3.4.2 Boxplot: Identify outliers\nHeight\n\nggplot(wildlife_impacts) +\n  geom_boxplot(aes(x = height)) +\n  labs(x = 'Height (ft)', y = NULL)\n\n\n\n\n\n\n\n\nSpeed\n\nggplot(wildlife_impacts) +\n  geom_boxplot(aes(x = speed)) +\n  labs(x = 'Speed (mph)', y = NULL)",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "summarizing-data.html#visualizing-variation",
    "href": "summarizing-data.html#visualizing-variation",
    "title": "7¬† Summarizing Data",
    "section": "7.4 Visualizing Variation",
    "text": "7.4 Visualizing Variation\nAsk yourself:\n\nWhat type of variation occurs within my variables?\nWhat type of covariation occurs between my variables?\n\nCheck out these guides\n\n\n\n\n7.4.1 Two Categorical Variables\nSummarize with a table of counts\n\nwildlife_impacts %&gt;%\n  count(operator, time_of_day)\n\n#&gt; # A tibble: 20 √ó 3\n#&gt;   operator          time_of_day     n\n#&gt;   &lt;chr&gt;             &lt;chr&gt;       &lt;int&gt;\n#&gt; 1 AMERICAN AIRLINES Dawn          458\n#&gt; 2 AMERICAN AIRLINES Day          7809\n#&gt; 3 AMERICAN AIRLINES Dusk          584\n#&gt; 4 AMERICAN AIRLINES Night        3710\n#&gt; 5 AMERICAN AIRLINES &lt;NA&gt;         2326\n#&gt; 6 DELTA AIR LINES   Dawn          267\n#&gt; # ‚Ñπ 14 more rows\n\n\nConvert to ‚Äúwide‚Äù format with pivot_wider() to make it easier to compare values\n\nwildlife_impacts %&gt;%\n  count(operator, time_of_day) %&gt;%\n  pivot_wider(names_from = time_of_day, values_from = n)\n\n#&gt; # A tibble: 4 √ó 6\n#&gt;   operator            Dawn   Day  Dusk Night  `NA`\n#&gt;   &lt;chr&gt;              &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n#&gt; 1 AMERICAN AIRLINES    458  7809   584  3710  2326\n#&gt; 2 DELTA AIR LINES      267  4846   353  2090  1449\n#&gt; 3 SOUTHWEST AIRLINES   394  9109   599  5425  2443\n#&gt; 4 UNITED AIRLINES      151  3359   181  1510  9915\n\n\nVisualize with bars:map fill to denote 2nd categorical var\n\nwildlife_impacts %&gt;%\n  count(operator, time_of_day) %&gt;%\n  ggplot() +\n  geom_col(\n    aes(\n      x = n,\n      y = reorder(operator, n),\n      fill = reorder(time_of_day, n)\n    ), \n    width = 0.7,\n    position = 'dodge'\n  ) +\n  theme(legend.position = \"bottom\") +\n  labs(\n    fill = \"Time of day\", \n    y = \"Airline\"\n  )\n\n\n\n\n\n\n\n\nVisualize with scatterplot - looking for clustering and/or correlational relationship\n\nggplot(wildlife_impacts) +\n  geom_point(\n    aes(x = speed, y = height),\n    size = 0.5\n  ) +\n  labs(\n    x = 'Speed (mph)',\n    y = 'Height (f)'\n  )\n\n\n\n\n\n\n\n\n\n\n7.4.2 One Continuous, One Categorical\nVisualize with boxplot\n\nggplot(wildlife_impacts) +\n  geom_boxplot(aes(x = speed, y = operator)) + \n  labs(\n    x = 'Speed (mph)',\n    y = 'Airline'\n  )",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "summarizing-data.html#correlation",
    "href": "summarizing-data.html#correlation",
    "title": "7¬† Summarizing Data",
    "section": "7.5 Correlation",
    "text": "7.5 Correlation\nThere are some pretty racist origins in eugenics. This included the notion of being ‚Äòwell born‚Äô and possessing ‚Äòsuperior‚Äô genetics, frequently associated with race. The beautiful irony is that human genetics was also the field that conclusively demonstrated the biological falsity of race. It also advanced our understanding of correlation with the works of these two people:\nSir Francis Galton (1822 - 1911)\n\nCharles Darwin‚Äôs cousin.\n‚ÄúFather‚Äù of eugenics.\nInterested in heredity.\n\n\nKarl Pearson (1857 - 1936)\n\nGalton‚Äôs (hero-worshiping) prot√©g√©.\nDefined correlation equation.\n‚ÄúFather‚Äù of mathematical statistics.\n\n\nGalton‚Äôs family data\nGalton, F. (1886). ‚ÄúRegression towards mediocrity in hereditary stature‚Äù. The Journal of the Anthropological Institute of Great Britain and Ireland 15: 246-263.\nGalton‚Äôs question: Does marriage selection indicate a relationship between the heights of husbands and wives?(He called this ‚Äúassortative mating‚Äù)\n‚Äúmidparent height‚Äù is just a scaled mean:\n\nmidparentHeight =  (father + 1.08*mother)/2\n\n\nlibrary(HistData)\n\ngaltonScatterplot &lt;- GaltonFamilies %&gt;% \n  ggplot() +\n  geom_point(\n    aes(x = midparentHeight, y = childHeight),\n    size = 0.5, alpha = 0.7\n  ) +\n  theme_classic() +\n  labs(\n    x = 'Midparent height (inches)',\n    y = 'Child height (inches)'\n  )\n\ngaltonScatterplot\n\n\n\n\n\n\n\n\n\n7.5.1 How do you measure correlation? (Pearson)\nPearson came up with this:\n\n7.5.1.0.1 \\(r = \\frac{\\text{Cov}(x, y)}{\\text{sd}(x) * \\text{sd}(y)}\\)\nAssumptions:  1. Variables must be interval or ratio  2. Linear relationship \n\n\n\n\n\n\n\n\n\n\n\n7.5.2 How do you interpret \\(r\\)?\n\n7.5.2.0.1 \\(r = \\frac{\\text{Cov}(x, y)}{\\text{sd}(x) * \\text{sd}(y)}\\)\nInterpretation: - \\(-1 \\le r \\le 1\\) - Closer to 1 is stronger correlation - Closer to 0 is weaker correlation\n\ncor(\n  x = GaltonFamilies$midparentHeight,\n  y = GaltonFamilies$childHeight,\n  method = 'pearson'\n)\n\n#&gt; [1] 0.3209499\n\n\n\n\n\n\n7.5.3 What does \\(r\\) mean?\n\n\\(\\pm 0.1 - 0.3\\): Weak\n\\(\\pm 0.3 - 0.5\\): Moderate\n\\(\\pm 0.5 - 0.8\\): Strong\n\\(\\pm 0.8 - 1.0\\): Very strong\n\n\nTest your understanding of \\(r\\) here: guessthecorrelation.com\nCoefficient of determination: \\(r^2\\) Percent of variance in one variable that is explained by the other variable\n\n\n\n\n\\(r\\)\n\\(r^2\\)\n\n\n\n\n0.1\n0.01\n\n\n0.2\n0.04\n\n\n0.3\n0.09\n\n\n0.4\n0.16\n\n\n0.5\n0.25\n\n\n0.6\n0.36\n\n\n0.7\n0.49\n\n\n0.8\n0.64\n\n\n0.9\n0.81\n\n\n1.0\n1.00\n\n\n\nYou should report both \\(r\\) and \\(r^2\\) If correlation between parent and child height is 0.32, then 10% of the variance in the child height is explained by the parent height.\n\n\n7.5.4 Correlation != Causation\nX causes Y\n\nTraining causes improved performance\n\nY causes X\n\nGood (bad) performance causes people to train harder (less hard).\n\n‚Äì\nZ causes both X & Y\n\nCommitment and motivation cause increased training and better performance.\n\nBe weary of dual axes!\n(They can cause spurious correlations)\nDual Axes: \n\nSingle Axis: \n\n\n7.5.5 Outliers\n\n\n\nPearson correlation is highly sensitive to outliers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.5.6 Spearman‚Äôs rank-order correlation\n\n7.5.6.1 \\(r = \\frac{\\text{Cov}(x, y)}{\\text{sd}(x) * \\text{sd}(y)}\\)\n\nSeparately rank the values of X & Y.\nUse Pearson‚Äôs correlation on the ranks instead of the \\(x\\) & \\(y\\) values.\n\nAssumptions:\n\nVariables can be ordinal, interval or ratio\nRelationship must be monotonic (i.e.¬†does not require linearity)\n\nSpearman correlation more robust to outliers\n\n\n\n\n\n\n\n\n\n\n\nPearson\nSpearman\n\n\n\n\n-0.56\n0.53\n\n\n0.39\n0.69\n\n\n0.94\n0.81\n\n\n0.38\n0.76\n\n\n0.81\n0.79\n\n\n0.31\n0.70\n\n\n0.95\n0.81\n\n\n0.51\n0.75\n\n\n-0.56\n0.53\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.5.7 Summary of correlation\n\nPearson‚Äôs correlation: Described the strength of a linear relationship between two variables that are interval or ratio in nature.\nSpearman‚Äôs rank-order correlation: Describes the strength of a monotonic relationship between two variables that are ordinal, interval, or ratio. It is more robust to outliers.\nThe coefficient of determination ( \\(r^2\\) ) describes the amount of variance in one variable that is explained by the other variable.\nCorrelation != Causation\n\nR command (hint: add use = \"complete.obs\" to drop NA values)\n\npearson  &lt;- cor(x, y, method = \"pearson\", use = \"complete.obs\")\nspearman &lt;- cor(x, y, method = \"spearman\", use = \"complete.obs\")\n\n\n\n7.5.8 Scatterplots: The correlation workhorse\n\nscatterplot &lt;- mtcars %&gt;% \n  ggplot() +\n  geom_point(\n    aes(x = mpg, y = hp),\n    size = 2, alpha = 0.7\n  ) +\n  theme_classic(base_size = 20) +\n  labs(\n    x = 'Fuel economy (mpg)',\n    y = 'Engine power (hp)'\n  )\n\nscatterplot\n\n\n\n\n\n\n7.5.9 Adding a correlation label to a chart\nMake the correlation label\n\ncorr &lt;- cor(mtcars$mpg, mtcars$hp, method = 'pearson')\n\ncorrLabel &lt;- paste('r = ', round(corr, 2))\n\nAdd label to the chart with annotate()\n\nscatterplot +\n  annotate(\n    geom = 'text',\n    x = 25, y = 310,\n    label = corrLabel,\n    hjust = 0, size = 7\n  )\n\n\n\n\n7.5.10 Visualize all the correlations: ggcorr()\n\n\n\n\nlibrary('GGally')\n\n\nmtcars %&gt;%\n  ggcorr()\n\n\n\n\nlibrary('GGally')\n\n\nmtcars %&gt;%\n  ggcorr(\n    label = TRUE,\n    label_size = 3,\n    label_round = 2\n  )\n\n\n\nggcor_mtcars_final &lt;- mtcars %&gt;%\n  ggcorr(\n    label = TRUE,\n    label_size = 3,\n    label_round = 2,\n    label_color = 'white',\n    nbreaks = 5,\n    palette = \"RdBu\"\n  )\n\n\nPearson\n\nmtcars %&gt;%\n  ggcorr(\n    label = TRUE,\n    label_size = 3,\n    label_round = 2,\n    method = c(\"pairwise\", \"pearson\")\n  )\n\n\nSpearman\n\nmtcars %&gt;%\n  ggcorr(\n    label = TRUE,\n    label_size = 3,\n    label_round = 2,\n    method = c(\"pairwise\", \"spearman\")\n  )\n\n\n\n\n7.5.11 Correlograms: ggpairs()\n\nlibrary('GGally')\n\n\nmtcars %&gt;%\n  select(mpg, cyl, disp, hp, wt) %&gt;%\n  ggpairs()\n\n\nLook for linear relationships\nView distribution of each variable\n\n\n\n\n7.5.12 Simpson‚Äôs Paradox: when correlation betrays you\nAt first glance, it seems that body mass and bill depth are negatively correlated. However, if we measure the correlation by species, we find that body mass and bill depth are positively correlated.\nBody mass vs.¬†Bill depth\n\nBody mass vs.¬†Bill depth",
    "crumbs": [
      "Exploring Data",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Summarizing Data</span>"
    ]
  },
  {
    "objectID": "effective-data-viz.html",
    "href": "effective-data-viz.html",
    "title": "8¬† Effective Charts",
    "section": "",
    "text": "8.1 The Human Visual-Memory System\nWe don‚Äôt write paragraphs *like this:\nSo don‚Äôt make graphs like this:\nGood visualizations optimize for the human visual-memory system\nA (very) simplified model of the visual-memory system:\nTwo objectives of effective charts: 1. Grab & direct attention (iconic memory) 2. Reduce processing demands (working memory)",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Effective Charts</span>"
    ]
  },
  {
    "objectID": "effective-data-viz.html#the-human-visual-memory-system",
    "href": "effective-data-viz.html#the-human-visual-memory-system",
    "title": "8¬† Effective Charts",
    "section": "",
    "text": "Image from Few (2012, pg. 227)\n\n\n\n\n\n\nImage from excelcharts.com\n\n\n\n\n\n\n\n\n8.1.1 Pre-Attentive Processing\nThe power of pre-attentive processing\nCount all the ‚Äú5‚Äù‚Äôs\n\n\n\nTricky, isn‚Äôt it?\n\n\n\nHow about now? This picture was easier thanks to the power of pre-attentive processing.\nPre-attentive attributes\nThese are pre-attentive attributes\n\n\n\n\n\n\nThe attributes presented in this graph correspond to Numerical (ratio) data and Categorical (ordinal) data.\n\n\n\nNot all pre-attentive attributes are equal\nFor categorical data:  1. Hue (color) &gt; shape  2. Less is more (stay in working memory!)\nTry to find the red dot in these three pictures to see this in play.\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, the graph on the right is more favorable than the one on the left.",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Effective Charts</span>"
    ]
  },
  {
    "objectID": "effective-data-viz.html#the-psychology-of-data-vis",
    "href": "effective-data-viz.html#the-psychology-of-data-vis",
    "title": "8¬† Effective Charts",
    "section": "8.2 The Psychology of Data Vis",
    "text": "8.2 The Psychology of Data Vis\nMuch of the content in this section is fromJohn Rauser‚Äôs talk on YouTube (Always cite your sources)\n\n\n\n\nCleveland, W. S., & McGill, R. (1985). Graphical perception and graphical methods for analyzing scientific data. Science, New Series, 229(4716), 828-833.\n\n\n8.2.1 Cleveland‚Äôs operations of pattern perception:\n\nEstimation\nAssembly\nDetection\n\n\n8.2.1.1 Estimation\n-Discrimination (X equal to Y?) -Ranking (X greater than Y?) -Ratioing (X double Y?)\nEstimation: Hierarchy for numerical data\n\n\n\n\n\nMore Accurate\n\n\nLess Accurate\n\n\nExample: Life expectancy in countries in Asia\n\n\n#&gt;               country lifeExp\n#&gt; 1         Afghanistan  43.828\n#&gt; 2                Iraq  59.545\n#&gt; 3            Cambodia  59.723\n#&gt; 4             Myanmar  62.069\n#&gt; 5         Yemen, Rep.  62.698\n#&gt; 6               Nepal  63.785\n#&gt; 7          Bangladesh  64.062\n#&gt; 8               India  64.698\n#&gt; 9            Pakistan  65.483\n#&gt; 10           Mongolia  66.803\n#&gt; 11   Korea, Dem. Rep.  67.297\n#&gt; 12           Thailand  70.616\n#&gt; 13          Indonesia  70.650\n#&gt; 14               Iran  70.964\n#&gt; 15        Philippines  71.688\n#&gt; 16            Lebanon  71.993\n#&gt; 17             Jordan  72.535\n#&gt; 18       Saudi Arabia  72.777\n#&gt; 19              China  72.961\n#&gt; 20 West Bank and Gaza  73.422\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n /  Discriminate\n /  Rank\n Ratio\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\nSorting helps a bit‚Ä¶\n\n /  Discriminate\n /  Rank\n Ratio\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n /  Discriminate\n /  Rank\n Ratio\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\nAlign to 0 scale:\n\n /  Discriminate\n /  Rank\n /  Ratio\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n /  Discriminate\n /  Rank\n /  Ratio\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\nArea works okay for ‚Äúbubble‚Äù charts\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n /  Discriminate\n Rank\n /  Ratio\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n\n\n\nPosition on a common scale\nPosition onnon-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n /  Discriminate\n /  Rank\n Ratio\n\n\n\n\n\nPosition on a common scale\nPosition on non-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n /  Discriminate\n /  Rank\n Ratio\n\n\n\n\n\nPosition on a common scale\nPosition on non-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\n\n Discriminate\n Rank\n Ratio\n\n\n\n\n\nPosition on a common scale\nPosition on non-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\nNo need to scale to 0: - Lowers resolution - Isn‚Äôt needed for accurate ratioing\n\n\n\n\nPosition on a common scale\nPosition on non-aligned scales\nLength\nAngle\nArea\nColor saturation\nColor hue\n\nSorting still matters!\n\n\n\n\n\n8.2.1.2 Assembly\nThe grouping of graphical elements\nAssembly: Gestalt Psychology The whole has a reality that is entirely separate from the parts\n\n\n\nReification: Thinking or treating something abstract as a concrete object\n\n\n\nEmergence: The process of something coming into view\n\n\n\nLaw of Closure: Our minds fill in the missing information\n\n\n\nPr√§gnanz: We strongly prefer to interpret stimuli as regular, simple, and orderly\n\n\n\n\n\n\n\n\n\n\n\nThis should cause you cognitive pain.\n\n\n\nIt‚Äôs the graphical equivalent of this:\n\n\n\nThis makes our brains happy.\n\n\n\nLaw of Continuity: We will group together objects that follow an established direction\n\n\n\n\n\n\n\n\nLaw of Similarity: We see elements that are physically similar as part of the same object\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLaw of Proximity: We tend to see elements that are physically near each other as part of the same object\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.2.1.3 Detection\nDetection: Recognizing that a geometric object encodes a physical value\n\n\n\nNorman door (n.):  1. A door where the design tells you to do the opposite of what you‚Äôre actually supposed to do.  2. A door that gives the wrong signal and needs a sign to correct it.\n\n\n\nNorman Door:\n\n\n\nNon-Norman door:\n\n\n\n\nThe white circles you see at the intersections is called the ‚ÄúHermann Grid illusion‚Äù",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Effective Charts</span>"
    ]
  },
  {
    "objectID": "effective-data-viz.html#data-viz-best-practices",
    "href": "effective-data-viz.html#data-viz-best-practices",
    "title": "8¬† Effective Charts",
    "section": "8.3 10 Data Viz Best Practices",
    "text": "8.3 10 Data Viz Best Practices\n‚ÄúErase non-data ink.‚Äù‚Äî Ed Tufte\n\nRemove chart chunk\nDon‚Äôt make 3D plots*\nDon‚Äôt lie\nDon‚Äôt use pie charts for proportions*\nDon‚Äôt stack bars*\nRotate and sort categorical axes*\nEliminate legends & directly label geoms*\nDon‚Äôt use pattern fills\nDon‚Äôt use red & green together\nConsider tables for small data sets *(most of the time)\n\n\n8.3.1 Remove chart chunk\n\n\n  Figure 1.6: `Monstrous Costs‚Äô by Nigel Holmes, in Healy, 2018\n\n\n \n\n\n\n\n\nFigure 24.1: From Data Looks Better Naked by Darkhorse Analytics\n\n\n \n\n\n \n\n\n\n\n8.3.2 Don‚Äôt make 3D plots (most of the time)\nHumans aren‚Äôt good at distinguishing 3D space\n\n\n\nPenrose Stairs, made famous byM.C. Escher (1898-1972)\nInk proportions != true proportions\n\n\n\nOcclusion: geoms are obscured\n\n\n\nMultiple interpretations\n\n\n\n\n\n \n\n\n \n\n\nThe third dimension distracts from the data. (this is what Tufte calls ‚Äúchart junk‚Äù)\n\n\n\nThis is better:\n\n\n\n\n\n8.3.3 Don‚Äôt lie\n‚ÄúLie Factor‚Äù = \\(\\frac{\\text{Size of effect in graphic}}{\\text{Size of effect in data}}\\)\n‚ÄúLie Factor‚Äù = \\(\\frac{\\text{Size of effect in graphic}}{\\text{Size of effect in data}} = \\frac{\\frac{5.3 - 0.6}{0.6}}{\\frac{27.5 - 18}{18}} = \\frac{7.83}{0.53} = 14.8\\)\n\n\n\nEdward Tufte (2001) ‚ÄúThe Visual Display of Quantitative Information‚Äù, 2nd Edition, pg. 57-58.\nHere is the same information without the ‚ÄúLie Factor‚Äù.\n\n\n\nBar charts should always start at 0\n\n \n\n.left[Image from http://livingqlikview.com/the-9-worst-data-visualizations-ever-created/]\n\n \n\nDon‚Äôt cherry-pick your data\n\n \n\nImage from https://www.mediamatters.org/fox-news/fox-news-newest-dishonest-chart-immigration-enforcement\n\n \n\nMake sure your chart makes sense\n\n\n\nImage from Image from http://livingqlikview.com/the-9-worst-data-visualizations-ever-created/\n\n\n8.3.4 Don‚Äôt use pie charts for proportions (most of the time)\n\n \n\n\n \n\nExceptions:  - Small data - Simple fractions - If sum of parts matters\n\n\n\nBest pie chart of all time\n\n\n\n\n\n8.3.5 Don‚Äôt stack bars (most of the time)\nStacked bars are rarely a good idea\n\n\n\n‚ÄúParallel coordinates‚Äù plot usually works better\n\n\n\n\n\n\nException:When you care about the total more than the categories\n\n\n\n\n\n\n\n\n8.3.6 Rotate and sort categorical axes (most of the time)\nRotate axes if you can‚Äôt read them\n\n .border[]\n\n\n .border[]\n\nDefault order is almost always wrong\n\n Ordered by alphabet (default) \n\n\n Ordered by count \n\nException: Ordinal variables\n\n\n\n\n\n8.3.7 Eliminate legends & directly label geoms (most of the time)\nDirectly label geoms\n\n \n\n\n \n\nException: When you have repeated categories\n\n\n\n\n\n8.3.8 Don‚Äôt use pattern fills\n\n\n\n\n \n\n\n \n\n\n\n8.3.9 Don‚Äôt use red & green together\n10% of males and 1% of females are color blind\n\n&lt;img src=‚Äúfigs/colorBlindBad1.png‚Äù, width = 700&gt;\n\n\n&lt;img src=‚Äúfigs/colorBlindBad2.png‚Äù, width = 700&gt;\n\nFacets can be used to avoid color altogether\n\n \n\n\n \n\n\n\n8.3.10 Consider tables for small data sets\n\n\n\n\n\n\nWho do you think did a better job in tonight‚Äôs debate?\n\n\n\n\nClinton\nTrump\n\n\n\n\nAmong Democrats\n99%\n1%\n\n\nAmong Republicans\n53%\n47%\n\n\n\n\n\n8.3.11 More Bad Graphs",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Effective Charts</span>"
    ]
  },
  {
    "objectID": "effective-data-viz.html#references",
    "href": "effective-data-viz.html#references",
    "title": "8¬† Effective Charts",
    "section": "8.4 References",
    "text": "8.4 References\n\nData Viz ‚ÄúCheat Sheet‚Äù\nData Viz Reference Page",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Effective Charts</span>"
    ]
  },
  {
    "objectID": "trends.html",
    "href": "trends.html",
    "title": "9¬† Plotting Trends",
    "section": "",
    "text": "9.1 Single Variables",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Plotting Trends</span>"
    ]
  },
  {
    "objectID": "trends.html#single-variables",
    "href": "trends.html#single-variables",
    "title": "9¬† Plotting Trends",
    "section": "",
    "text": "9.1.1 Points\nPlotting the data points is a good starting point for viewing trends.\n\n\n\n\n\n\n\n\n\n\n\n9.1.2 Points + line\nAdding lines between the points helps see the overall trend.\nHow to: Points + line\nBe sure to draw the line first, then overlay the points\n\nggplot(milk_ca,\n    aes(x = year, y = milk_produced)) +\n    geom_line(color = 'steelblue', size = 0.5) +\n    geom_point(color = 'steelblue', size = 2) +\n    theme_half_open(font_size = 18) +\n    labs(x = 'Year',\n         y = 'Milk produced (billion lbs)',\n         title = 'Milk production in California')\n\n\n\n\n\n\n\n\n\n\n9.1.3 Line\nOmitting the points emphasizes the overall trend.\n\nggplot(milk_ca,\n    aes(x = year, y = milk_produced)) +\n    geom_line(color = 'steelblue', size = 1) +\n    theme_half_open(font_size = 18) +\n    labs(x = 'Year',\n         y = 'Milk produced (billion lbs)',\n         title = 'Milk production in California')\n\n\n\n\n\n\n\n\n\n\n9.1.4 Line + area\nFilling area below line emphasizes cumulative over time. (y-axis should start at 0)\n\n\n\n\n\n\n\n\n\nIf points are too sparse, a line can be misleading.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to: Line + area\nLikewise, draw the area first then overlay the line\n\n\n\n\n\n\n\n\n\n\n\n9.1.5 Smoothed line\nAdding a ‚Äúsmoothed‚Äù line shows a modeled representation of the overall trend.\n\nggplot(milk_ca,\n    aes(x = year, y = milk_produced)) +\n    geom_smooth(color = 'steelblue', size = 1, se = FALSE) +\n    theme_half_open(font_size = 18) +\n    labs(x = 'Year',\n         y = 'Milk produced (billion lbs)',\n         title = 'Milk production in California')\n\n\n\n\n\n\n\n\n\n\n9.1.6 Smoothed line + points\nPutting the smoothed line over the data points helps show whether outliers are driving the trend line.\nHow to: Smoothed line + points\nUse alpha to make points slightly transparent\n\n\n\n\n\n\n\n\n\n\n\n9.1.7 Bars\nBars are useful when emphasizing the data pointsrather than the slope between them",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Plotting Trends</span>"
    ]
  },
  {
    "objectID": "trends.html#multiple-variables",
    "href": "trends.html#multiple-variables",
    "title": "9¬† Plotting Trends",
    "section": "9.2 Multiple Variables",
    "text": "9.2 Multiple Variables\n\n9.2.1 Points and Lines\nWith multiple categories, points & lines can get messy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9.2.2 Lines\nBetter: Lines alone makes distinguishing trends easier\n\n\n\n\n\n\n\n\n\n\n\n9.2.3 Labeled Lines\nEven better: Directly label lines to remove legend\n\n\n\n\n\n\n\n\n\nHow to:Directly label lines\nMake the basic line chart first\n\n# Format the data\nmilk_region &lt;- milk_production %&gt;%\n  filter(region %in% c(\n    'Pacific', 'Northeast', 'Lake States', 'Mountain')) %&gt;%\n  group_by(year, region) %&gt;%\n  summarise(milk_produced = sum(milk_produced)) %&gt;%\n  ungroup()\n\n# Make the line chart\nggplot(milk_region,\n  aes(x = year, y = milk_produced,\n      color = region)) +\n  geom_line(size = 1) +\n  scale_color_manual(values = c(\n    'sienna', 'forestgreen', 'dodgerblue', 'orange')) +\n  theme_half_open(font_size = 18) +\n  labs(\n    x     = 'Year',\n    y     = 'Milk produced (billion lbs)',\n    color = 'Region',\n    title = 'Milk production in four US regions')\n\n\n# Format the data\nmilk_region &lt;- milk_production %&gt;%\n  filter(region %in% c(\n    'Pacific', 'Northeast', 'Lake States', 'Mountain')) %&gt;%\n  group_by(year, region) %&gt;%\n  summarise(milk_produced = sum(milk_produced)) %&gt;%\n  ungroup()\n\n# Make the line plot\nggplot(milk_region,\n  aes(x = year, y = milk_produced,\n      color = region)) +\n  geom_line(size = 1) +\n  # Add labels\n  geom_text_repel(\n    data = milk_region %&gt;%\n      filter(year == max(year)),\n    aes(label = region),\n      hjust = 0, nudge_x = 1, direction = \"y\",\n      size = 6, segment.color = NA) +\n  # Create space for labels on right side\n  scale_x_continuous(\n    breaks = seq(1970, 2010, 10),\n    expand = expansion(add = c(1, 13))) +\n  scale_color_manual(values = c(\n    'sienna', 'forestgreen', 'dodgerblue', 'orange')) +\n  theme_half_open(font_size = 18) +\n  # Remove legend\n  theme(legend.position = 'none') +\n  labs(x = 'Year',\n       y = 'Milk produced (billion lbs)',\n       title = 'Milk production in four US regions')\n\n\n\n\n\n\n\n\nAlternative: Embed the labels!\n\n\n\n\n\n\n\n\n\nUse {geomtextpath} package\n(see this SO issue for other strategies)\n\n\n9.2.4 Stacked Line/Area Chart\nIf your goal is to communicate the overall / total trend,consider a stacked area chart.\nHighlights regional trends:\n\n\n\n\n\n\n\n\n\nHighlights overall / total trend:\n\n\n\n\n\n\n\n\n\nHow to: Stacked area\n\n\n\n\n\n\n\n\n\n\n\n9.2.5 Lots of Categories: Average Line Overlay\nIf you have lots of categories:\n1) Plot all the data with the average highlighted\nMeasles in California:\n\n\n\n\n\n\n\n\n\nMeasles in all 50 states:\n\n\n\n\n\n\n\n\n\nHow to: Average line overlay\nFormat the data\n\n# Format the data\nmeasles &lt;- us_diseases %&gt;%\n  filter(\n    disease == 'Measles',\n    !state %in% c(\"Hawaii\", \"Alaska\")) %&gt;%\n  mutate(\n    rate = (count / population) * 10000,\n    state = fct_reorder(state, rate)) %&gt;%\n  # Compute annual mean rate across all states\n  group_by(year) %&gt;%\n  mutate(\n    mean_rate = sum(count) / sum(population) * 10000)\n\nMake all the state lines in light grey color\n\nggplot(measles) +\n    geom_line(aes(x = year, y = rate, group = state),\n              color = 'grey', alpha = 0.3) +\n    # Add reference line & label:\n    geom_vline(xintercept = 1963, col = 'blue',\n               linetype = 'dashed') +\n    annotate('text', x = 1964, y = 150, hjust = 0,\n             label = 'Vaccine introduced in 1964',\n             color = 'blue') +\n    theme_minimal_grid(font_size = 18) +\n    labs(y = 'Cases per 10,000 people')\n\nNow overlay the annual mean line\n\nggplot(measles) +\n  geom_line(\n    aes(x = year, y = rate, group = state),\n    color = 'grey', alpha = 0.3) +\n  geom_line(\n    aes(x = year, y = mean_rate), size = 0.8) +\n  # Add US mean label\n  annotate(\n    'text', x = 1945, y = 55, hjust = 0,\n    label = 'US Mean') +\n  # Add reference line & label\n  geom_vline(xintercept = 1963, col = 'blue',\n             linetype = 'dashed') +\n  annotate('text', x = 1964, y = 150, hjust = 0,\n           label = 'Vaccine introduced in 1964',\n           color = 'blue') +\n  theme_minimal_grid(font_size = 18) +\n  labs(y = 'Cases per 10,000 people')\n\n\n\n\n\n\n\n\n\n\n\n\n9.2.6 Lots of Categories: Heat Maps\n2) Plot all the data with a heat map\n\n\n\n\n\n\n\n\n\nHeatmaps are great for multiple divisions of time\nMy activity on Github:\n\n\n\nCheck out this heat map on Traffic fatalities",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Plotting Trends</span>"
    ]
  },
  {
    "objectID": "trends.html#how-to-heat-map",
    "href": "trends.html#how-to-heat-map",
    "title": "9¬† Plotting Trends",
    "section": "9.3 How to: Heat map",
    "text": "9.3 How to: Heat map\nCreate main grid with geom_tile()\n\nggplot(measles) +\n  geom_tile(\n    aes(x = year, y = state, fill = rate),\n    color = 'grey80') +\n  # Add reference line & label\n  geom_vline(\n    xintercept = 1963, col = 'blue') +\n  annotate(\n    'text', x = 1964, y = 50.5, hjust = 0,\n    label = 'Vaccine introduced in 1964',\n    color = 'blue')\n\n\n\n\n\n\n\n\nAdjust scales and adjust theme\n\nggplot(measles) +\n  geom_tile(aes(x = year, y = state, fill = rate),\n    color = 'grey80') +\n  # Add reference line & label\n  geom_vline(xintercept = 1963, col = 'blue') +\n  annotate(\n    'text', x = 1964, y = 50.5, hjust = 0,\n    label = 'Vaccine introduced in 1964',\n    color = 'blue') +\n  # Adjust scales\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_fill_viridis(\n    option = 'inferno', direction = -1) +\n  # Adjust theme\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = 'bottom',\n    text = element_text(size = 10)) +\n  coord_cartesian(clip = 'off') +\n  labs(\n    x = NULL, y = NULL,\n    fill = 'Cases per 10,000 people',\n    title = 'Measles')\n\n\n\n\n\n\n\n\nColor scale is linear in this chart:\nAdjust scales and adjust theme\n\nggplot(measles) +\n  geom_tile(aes(x = year, y = state, fill = rate),\n    color = 'grey80') +\n  # Add reference line & label\n  geom_vline(xintercept = 1963, col = 'blue') +\n  annotate(\n    'text', x = 1964, y = 50.5, hjust = 0,\n    label = 'Vaccine introduced in 1964',\n    color = 'blue') +\n  # Adjust scales\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_fill_viridis(\n    option = 'inferno', direction = -1,\n    trans = 'sqrt') +\n  # Modify legend color bar\n  guides(fill = guide_colorbar(\n      title.position = 'top', reverse = TRUE)) +\n  # Adjust theme\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    legend.position = 'bottom',\n    text = element_text(size = 10)) +\n  coord_cartesian(clip = 'off') +\n  labs(\n    x = NULL, y = NULL,\n    fill = 'Cases per 10,000 people',\n    title = 'Measles')\n\n\n\n\n\n\n\n\nNon-linear color scale helps with large variations:\n\n9.3.1 Two Additional Examples\nTwo other examples for showing change across multiple categories\nSeasonal chart:\n\n\n\nSource: http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html#Seasonal%20Plot\nSankey chart:\n\n\n\nSource: https://flowcharts.llnl.gov/\nWould you consider purchasing an electric car?\n\n\n\nRoberson, Laura A. & Helveston, J.P. (2020) ‚ÄúElectric vehicle adoption: can short experiences lead to big change?,‚Äù Environmental Research Letters. 15(0940c3).Made using the ggforce package",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Plotting Trends</span>"
    ]
  },
  {
    "objectID": "amounts.html",
    "href": "amounts.html",
    "title": "10¬† Amounts",
    "section": "",
    "text": "10.1 Manipulating Factors\nSorting in ggplot is done by reordering factors\nTwo ways to sort\nMethod 1: Use reorder() inside aesthetic mapping\n# Format the data frame\nfederal_spending %&gt;%\n  group_by(department) %&gt;%\n  summarise(\n    rd_budget_bil = sum(rd_budget_mil) / 10^3) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(\n      x = rd_budget_bil,\n      y = reorder(department, rd_budget_bil)\n    ), \n    width = 0.7, alpha = 0.8,\n    fill = \"steelblue\"\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\nMethod 2: Use fct_reorder() when formatting the data frame\n# Format the data frame\nfederal_spending %&gt;%\n  group_by(department) %&gt;%\n  summarise(\n    rd_budget_bil = sum(rd_budget_mil) / 10^3) %&gt;%\n  mutate(\n    department = fct_reorder(department, rd_budget_bil)\n  ) %&gt;%\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = rd_budget_bil, y = department),\n    width = 0.7, alpha = 0.8,\n    fill = \"steelblue\"\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\nReorder & modify factors withthe forcats** library**\nLoaded with library(tidyverse)",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Amounts</span>"
    ]
  },
  {
    "objectID": "amounts.html#manipulating-factors",
    "href": "amounts.html#manipulating-factors",
    "title": "10¬† Amounts",
    "section": "",
    "text": "10.1.1 Common situations for modifying / reording factors: \n\nReorder factors based on another numerical variable\nReorder factors manually\nModify factors manually\nWhat if there are too many factor levels?\n\n\n10.1.1.1 1. Reorder factors based on another numerical variable\nUse fct_reorder()\n\n\n\n\n\n10.1.1.2 2. Reorder factors manually\n\n# Format the data frame\nlotr_words %&gt;%\n  pivot_longer(\n      names_to = 'gender', \n      values_to = 'wordCount',\n      cols = Female:Male) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = wordCount, y = Film),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\n\n\n10.1.1.3 2. Reorder factors manually with fct_relevel()\n\n# Format the data frame\nlotr_words %&gt;%\n  pivot_longer(\n      names_to = 'gender', \n      values_to = 'wordCount',\n      cols = Female:Male) %&gt;%\n  mutate(\n    Film = fct_relevel(Film, levels = c(\n      'The Fellowship Of The Ring',\n      'The Two Towers',\n      'The Return Of The King'))) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = wordCount, y = Film),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\n\n\n10.1.1.4 3. Modify factors manually\nThe film names here are too long:\n\n\n\n\n\n10.1.1.5 3. Modify factors manually with fct_recode()\n\"new label\" = \"old label\"\n\n# Format the data frame\nlotr_words %&gt;%\n  pivot_longer(\n      names_to = 'gender', \n      values_to = 'wordCount',\n      cols = Female:Male) %&gt;%\n  mutate(\n    Film = fct_recode(Film,\n      'The Fellowship\\nof the Ring' = 'The Fellowship Of The Ring',\n      'The Return\\nof the King' = 'The Return Of The King')) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = wordCount, y = Film),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\n\n\n10.1.1.6 2 & 3. Modify and reorder factors manually\n\n# Format the data frame\nlotr_words %&gt;%\n  pivot_longer(\n      names_to = 'gender', \n      values_to = 'wordCount',\n      cols = Female:Male) %&gt;% \n  mutate(\n    Film = fct_relevel(Film, levels = c(\n      'The Fellowship Of The Ring',\n      'The Two Towers',\n      'The Return Of The King')),\n    Film = fct_recode(Film,\n      'The Fellowship\\nof the Ring' = 'The Fellowship Of The Ring',\n      'The Return\\nof the King' = 'The Return Of The King')) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n      aes(x = wordCount, y = Film),\n      width = 0.7, alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\n\n\n10.1.1.7 4. What if there are too many factor levels?\n\n\n\nStrategy: Merge smaller factors into ‚ÄúOther‚Äù with fct_other()\n\n# Format the data frame\nfederal_spending %&gt;%\n  mutate(\n    department = fct_other(department,\n      keep = c('DOD', 'HHS', 'NIH', 'NASA', 'DOE'))) %&gt;%\n  group_by(department) %&gt;%\n  summarise(\n    rd_budget_bil = sum(rd_budget_mil) / 10^3) %&gt;%\n  mutate(\n    department = fct_reorder(department, rd_budget_bil)) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = rd_budget_bil, y = department),\n    width = 0.7, alpha = 0.8,\n    fill = \"steelblue\"\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\n\n\n10.1.1.8 4. What if there are really too many factor levels?\n\n# Format the data frame\navengers %&gt;%\n  mutate(\n    name_alias = fct_reorder(name_alias, appearances)) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = appearances,y = name_alias),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\nStrategy: Keep top N, drop the rest with slice()\n\n# Format the data frame\navengers %&gt;%\n  mutate(\n    name_alias = fct_reorder(name_alias, appearances)) %&gt;%\n  arrange(desc(appearances)) %&gt;%\n  slice(1:10) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = appearances, y = name_alias),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\nslice() works with grouping too!\n\n# Format the data frame\navengers %&gt;%\n  mutate(\n    name_alias = fct_reorder(name_alias, appearances)) %&gt;%\n  arrange(desc(appearances)) %&gt;%\n  group_by(gender) %&gt;%\n  slice(1:10) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(\n      x = appearances, \n      y = name_alias,\n      fill = gender\n    ),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Amounts</span>"
    ]
  },
  {
    "objectID": "amounts.html#graphing-amounts",
    "href": "amounts.html#graphing-amounts",
    "title": "10¬† Amounts",
    "section": "10.2 Graphing Amounts",
    "text": "10.2 Graphing Amounts\nShow amounts with:\n\n\n Bar charts \n\n\n Dot charts \n\n\n Lollipop charts \n\n\n\n10.2.1 Bars\nBars are good for highlighting specific categories\n\n\n\n\n\n10.2.2 Lollipops\nUse lollipops when:\n\nThe bars are overwhelming - You‚Äôre not highlighting categories\n\n\n\n\n\n\n\n\n\n\n10.2.3 Dots\nOr use dots and don‚Äôt set axis to 0\n\n\n\n\n\n\n\n\n10.2.4 How to make a Bar chart\n\n# Summarize the data\nfederal_spending %&gt;%\n  group_by(department) %&gt;%\n  summarise(rd_budget_bil = sum(rd_budget_mil) / 10^3) %&gt;%\n  mutate(department = fct_reorder(department, rd_budget_bil)) %&gt;%\n\n# Make chart\n  ggplot() +\n  geom_col(\n    aes(x = rd_budget_bil, y = department),\n    width = 0.7, alpha = 0.8,\n    fill = 'steelblue') +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid()\n\n\n\n\nFilling the bars with color:\n\n# Summarize the data\nfederal_spending %&gt;%\n  group_by(department) %&gt;%\n  summarise(rd_budget_bil = sum(rd_budget_mil) / 10^3) %&gt;%\n  mutate(\n    department = fct_reorder(department, rd_budget_bil),\n    is_dod = if_else(\n      department == 'DOD', TRUE, FALSE)) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = rd_budget_bil, y = department, \n        fill = is_dod),\n    width = 0.7, alpha = 0.8) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  scale_fill_manual(values = c('grey', 'steelblue')) +\n  theme_minimal_vgrid() +\n  theme(legend.position = 'none')\n\nThe DOD‚Äôs R&D budget is nearly the same as all other departments combined\n\n\n\n\n\n10.2.5 How to make a Dot chart\nSummarize data frame:\n\n# Summarize the data\nfederal_spending %&gt;%\n  group_by(department) %&gt;%\n  summarise(\n    rd_budget_bil = sum(rd_budget_mil) / 10^3) %&gt;%\n  mutate(\n    department = fct_reorder(department, rd_budget_bil)) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_point(\n    aes(x = rd_budget_bil, y = department),\n    size = 2.5, color = 'steelblue') +\n  theme_minimal_vgrid()\n\nDot chart of federal R&D spending by department\n\n\n\n\n\n10.2.6 How to make a Lollipop chart\nSummarize data frame:\n\n# Summarize the data\nfederal_spending %&gt;%\n  group_by(department) %&gt;%\n  summarise(\n    rd_budget_bil = sum(rd_budget_mil) / 10^3) %&gt;%\n  mutate(\n    department = fct_reorder(department, rd_budget_bil)) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_segment(\n    aes(x = 0, xend = rd_budget_bil,\n        y = department, yend = department),\n    color = 'grey') +\n  geom_point(\n    aes(x = rd_budget_bil, y = department),\n    size = 2.5, color = 'steelblue') +\n  theme_minimal_vgrid()\n\nLollipop chart of federal R&D spending by department",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Amounts</span>"
    ]
  },
  {
    "objectID": "prop.html",
    "href": "prop.html",
    "title": "11¬† Proportions",
    "section": "",
    "text": "11.1 Graphing Proportions\nShow proportions with:",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Proportions</span>"
    ]
  },
  {
    "objectID": "prop.html#graphing-proportions",
    "href": "prop.html#graphing-proportions",
    "title": "11¬† Proportions",
    "section": "",
    "text": "Bar charts \n\n\n Pie charts \n\n\n Waffle charts \n\n\n\n11.1.1 Stacked bars\n\n# Format the data\nmilk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(state = fct_other(state, \n    keep = c('California', 'Wisconsin'))) %&gt;% \n  group_by(state) %&gt;% \n  summarise(milk_produced = sum(milk_produced)) %&gt;%  \n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = \"\", y = milk_produced, fill = state),\n    width = 0.7, alpha = 0.8) +\n  scale_y_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_hgrid() +\n  labs(x = NULL,\n       y = 'Milk produced (lbs)',\n       fill = 'State',\n       title = '2017 Milk Production\\nby State')\n\n\n\n\nRotated also looks good:\n\n# Format the data\nmilk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(state = fct_other(state,\n    keep = c('California', 'Wisconsin'))) %&gt;%\n  group_by(state) %&gt;% \n  summarise(milk_produced = sum(milk_produced)) %&gt;% \n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = milk_produced, y = \"\", fill = state),\n    width = 0.7, alpha = 0.8) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_hgrid() +\n  labs(y = NULL,\n       x = 'Milk produced (lbs)',\n       fill = 'State',\n       title = '2017 Milk Production by State')\n\n\n\n\nStacked bars - not great for more than a few categories:\n\n# Format the data\nmilk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(state = fct_other(state,\n    keep = c('California', 'Wisconsin',\n             'New York', 'Idaho'))) %&gt;%\n  group_by(state) %&gt;%\n  summarise(milk_produced = sum(milk_produced))\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = \"\", y = milk_produced, fill = state),\n    width = 0.7, alpha = 0.8) +\n  scale_y_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  labs(x = NULL,\n       y = 'Milk produced (lbs)',\n       fill = 'State',\n       title = '2017 Milk Production\\nby State')\n\n\n\n\n\n\n11.1.2 Dodged bars\nBetter for part-to-whole comparison\nOkay:\n\n\n\nBetter:\n\n# Format the data\nmilk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(state = fct_other(state,\n    keep = c('California', 'Wisconsin'))) %&gt;%\n  group_by(state) %&gt;%\n  summarise(milk_produced = sum(milk_produced)) %&gt;%\n  mutate(state = fct_reorder(state, milk_produced)) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = milk_produced, y = state),\n    width = 0.7, alpha = 0.8) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  labs(x = 'Milk produced (lbs)',\n       y = 'State',\n       title = '2017 Milk Production by State')\n\n\n\n\nBetter for comparing total: \n\n\n\nBetter for comparing parts: \n\nmilk_production %&gt;%\n  filter(year %in% c(1970, 2017)) %&gt;%\n  mutate(state = fct_other(state,\n    keep = c('California', 'Wisconsin'))) %&gt;%\n  group_by(year, state) %&gt;%\n  summarise(milk_produced = sum(milk_produced)) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_col(\n    aes(x = milk_produced, \n        y = as.factor(year),\n        fill = state),\n    position = 'dodge',\n    width = 0.7, alpha = 0.8) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  labs(x = 'Milk produced (lbs)',\n       y = 'Year',\n       fill = 'State',\n       title = '1970 & 2017 Milk Production by State')\n\n\n\n\nWhere stacking is useful:\n\n\n\nhttps://fivethirtyeight.com/features/the-dollar-and-cents-case-against-hollywoods-exclusion-of-women/\n\n2 to 3 groups\nProportions over time\n\n\n\n\nhttps://www.perceptualedge.com/blog/?p=2239\n\n2 to 3 groups\nProportions over time\n\n\n\n11.1.3 The Notorious P-I-E\nStart with a bar chart\nConvert bar to pie with coord_polar()\nFinal chart with labels & theme_map():\nPies are still useful if the sum of components matters\n\n\n\n\n\n\n\n\n\nThe best pies are square pies \n\n\n\nhttps://eagereyes.org/blog/2016/a-reanalysis-of-a-study-about-square-pie-charts-from-2009\n\n\n11.1.4 Waffle plots\n\nlibrary(waffle)\n\n# Format the data\nmilk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(state = fct_other(state,\n    keep = c('California', 'Wisconsin'))) %&gt;%\n  group_by(state) %&gt;%\n  summarise(milk_produced = sum(milk_produced)) %&gt;%\n  mutate(milk_produced = milk_produced / 10^9) %&gt;%\n  \n\n# Make the chart\n  ggplot() +\n  geom_waffle(\n    aes(fill = state, values = milk_produced),\n    color = \"white\", size = 1, n_rows = 15) +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) +\n  theme_minimal() +\n  labs(fill = 'State',\n       x = NULL, y = NULL,\n       title = '2017 Milk Production by State',\n       subtitle = '(1 square = 1 billion lbs)')\n\nUse values between 100 - 1,000 (You don‚Äôt want 1,000,000,000 boxes!)\n\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   state      milk_produced\n#&gt;   &lt;fct&gt;              &lt;dbl&gt;\n#&gt; 1 California          39.8\n#&gt; 2 Wisconsin           30.3\n#&gt; 3 Other              145.\n\n\n\n\n\n\n\n\n\n\n\nIf you flip it‚Ä¶\n\nlibrary(waffle)\n\n# Format the data\nmilk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(state = fct_other(state,\n    keep = c('California', 'Wisconsin'))) %&gt;%\n  group_by(state) %&gt;%\n  summarise(milk_produced = sum(milk_produced)) %&gt;%\n  mutate(milk_produced = milk_produced / 10^9) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_waffle(\n    aes(fill = state, values = milk_produced),\n    color = \"white\", size = 1, n_rows = 15,\n    flip = TRUE) +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) +\n  theme_minimal() +\n  labs(fill = 'State',\n       x = NULL, y = NULL,\n       title = '2017 Milk Production by State',\n       subtitle = '(1 square = 1 billion lbs)')\n\n\n\n\n\n\n\n\n\n\nWaffle Comparison\n\nlibrary(waffle)\n\n# Format the data\nmilk_production %&gt;%\n  filter(year %in% c(1970, 2017)) %&gt;%\n  mutate(state = fct_other(state,\n    keep = c('California', 'Wisconsin'))) %&gt;%\n  group_by(year, state) %&gt;%\n  summarise(milk_produced = sum(milk_produced)) %&gt;%\n  mutate(milk_produced = milk_produced / 10^9) %&gt;%\n\n# Make the chart\n  ggplot() +\n  geom_waffle(\n    aes(fill = state, values = milk_produced),\n    color = \"white\", size = 1, n_rows = 10,\n    flip = TRUE) +\n  facet_wrap(vars(year), strip.position = 'bottom') +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) +\n  theme_minimal() +\n  labs(fill = 'State',\n       x = NULL, y = NULL,\n       title = '1970 & 2017 Milk Production by State',\n       subtitle = '(1 square = 1 billion lbs)')\n\n\n\n\n\n\n\n\n\n\n\n\n11.1.5 Comparison\nStacked bars:\n\n\n\nDodged bars:\n\n\n\nPie chart:\n\n\n\n\n\n\n\n\n\nWaffle chart:",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Proportions</span>"
    ]
  },
  {
    "objectID": "comparisons.html",
    "href": "comparisons.html",
    "title": "12¬† Comparisons",
    "section": "",
    "text": "12.1 Comparing to a Reference\nFor this section, we‚Äôll be using this data frame:\ngapminder_americas &lt;- gapminder %&gt;%\n  filter(continent == \"Americas\", year == 2007) %&gt;%\n  mutate(country = fct_reorder(country, lifeExp))\nUsing reference lines helps to add context to chart. For example, consider the following chart of life expectancy in the Americas:\nlife_expectancy_dots &lt;- gapminder_americas %&gt;% \n  ggplot() +\n  geom_point(\n    aes(x = lifeExp, y = country),\n    color = 'steelblue', size = 2.5\n  ) +\n  theme_minimal_vgrid(font_size = 18) +\n  labs(\n    x = 'Life expectancy (years)',\n    y = 'Country'\n  )\n\nlife_expectancy_dots\nWe can add more context to the chart by adding a mean life expectancy reference line:\nlife_expectancy_dots +\n  geom_vline(\n    xintercept = mean(gapminder_americas$lifeExp),\n    color = 'red', linetype = 'dashed'\n  ) +\n  annotate(\n    'text', x = 73.2, y = 'Puerto Rico',\n    color = 'red', hjust = 1,\n    label = 'Mean Life\\nExpectancy'\n  )\nHere we‚Äôre using geom_vline() to add a vertical line and annotate() to add text.\nYou can also compute the difference from the mean and make zero the reference line. To do so, we first compute the difference from the mean and then define a variable to use for the color to denote whether the country‚Äôs life expectancy is above or below the mean:\ngapminder_diverging &lt;- gapminder_americas %&gt;%\n  mutate(\n    # Subtract the mean\n    lifeExp = lifeExp - mean(lifeExp),\n    # Define the fill color\n    color = ifelse(lifeExp &gt; 0, 'Above', 'Below')\n  )\nThen we can use a lollipop chart or bar chart to visualize the difference from the mean:",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Comparisons</span>"
    ]
  },
  {
    "objectID": "comparisons.html#comparing-to-a-reference",
    "href": "comparisons.html#comparing-to-a-reference",
    "title": "12¬† Comparisons",
    "section": "",
    "text": "Lollipop chartBar chart\n\n\n\ngapminder_diverging %&gt;% \n  ggplot() +\n  geom_segment(\n    aes(x = 0, xend = lifeExp, y = country, yend = country, color = color)\n  )  +\n  geom_point(\n    aes(x = lifeExp, y = country, color = color),\n    size = 2.5\n  ) +\n  scale_color_manual(values = c('steelblue', 'red')) +\n  theme_minimal_vgrid() +\n  theme(legend.position = 'none') +\n  labs(\n    x = 'Difference from mean life expectancy (years)',\n    y = 'Country'\n  )\n\n\n\n\n\n\n\n\n\n\n\ngapminder_diverging %&gt;% \n  ggplot() +\n  geom_col(\n    aes(x = lifeExp, y = country, fill = color),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_fill_manual(values = c('steelblue', 'red')) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  theme(legend.position = 'none') +\n  labs(\n    x = 'Difference from mean life expectancy (years)',\n    y = 'Country'\n  )",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Comparisons</span>"
    ]
  },
  {
    "objectID": "comparisons.html#comparing-across-multiple-categories",
    "href": "comparisons.html#comparing-across-multiple-categories",
    "title": "12¬† Comparisons",
    "section": "12.2 Comparing Across Multiple Categories",
    "text": "12.2 Comparing Across Multiple Categories\nNeither of these two charts are great at clearly comparing multiple categories. They both make it difficult to compare elements across the categories.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen comparing across multiple categories consider Parallel coordinates charts or faceting.\n\n12.2.1 Parallel coordinates charts\nThese charts are great for comparing multiple categories. They‚Äôre essentially line charts that are stacked on top of each other, which you can easily make with geom_line() and geom_point():\n\ndiamonds %&gt;%\n  count(clarity, cut) %&gt;%\n  ggplot(aes(x = clarity, y = n,color = cut, group = cut)) +\n  geom_line() +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 5100)) +\n  theme_half_open(font_size = 18) +\n  labs(y = \"Count\")\n\n\n\n\n\n\n\n\n\n\n12.2.2 Faceting\nFacets are great for comparing multiple categories. They‚Äôre essentially small multiples of a repeated chart that allows to compare elements both within the individual facets as well as across the facets.\nHere is an effective example of faceting from Financial Times on the early days of the COVID-19 pandemic:\n\n\n\nFaceting is easy to achieve in ggplot2 with facet_wrap():\n\ndiamonds %&gt;%\n  count(clarity, cut) %&gt;%\n  ggplot() +\n  geom_col(aes(x = clarity, y = n), width = 0.7) +\n  facet_wrap(vars(cut), nrow = 1) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_hgrid(font_size = 16)\n\n\n\n\n\n\n\n\nYou can change the nrow or ncol arguments to change the layout of the facets, e.g.:\n\ndiamonds %&gt;%\n  count(clarity, cut) %&gt;%\n  mutate(n = n / 1000) %&gt;%\n  ggplot() +\n  geom_col(aes(x = clarity, y = n), width = 0.7) +\n  facet_wrap(vars(cut), ncol = 2) +\n  coord_flip() +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid(font_size = 16) +\n  labs(y = \"Count (thousands)\")",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Comparisons</span>"
    ]
  },
  {
    "objectID": "comparisons.html#comparing-two-things",
    "href": "comparisons.html#comparing-two-things",
    "title": "12¬† Comparisons",
    "section": "12.3 Comparing Two Things",
    "text": "12.3 Comparing Two Things\n\n12.3.1 Dodged bars\nIn this section, we‚Äôll use this dataset comparing milk production in California and Wisconsin in 1970 and 2017:\n\nmilk_compare &lt;- milk_production %&gt;%\n  filter(year %in% c(1970, 2017)) %&gt;%\n  mutate(\n    state = fct_other(state, keep = c('California', 'Wisconsin'))\n  ) %&gt;%\n  group_by(year, state) %&gt;%\n  summarise(\n    milk_produced = sum(milk_produced) / 10^9\n  )\n\nmilk_compare\n\n#&gt; # A tibble: 6 √ó 3\n#&gt; # Groups:   year [2]\n#&gt;    year state      milk_produced\n#&gt;   &lt;dbl&gt; &lt;fct&gt;              &lt;dbl&gt;\n#&gt; 1  1970 California          9.46\n#&gt; 2  1970 Wisconsin          18.4 \n#&gt; 3  1970 Other              89.1 \n#&gt; 4  2017 California         39.8 \n#&gt; 5  2017 Wisconsin          30.3 \n#&gt; 6  2017 Other             145.\n\n\nWhen comparing only two things, dodged bars are a good starting point. This can be achieved with geom_col() and position = 'dodge':\n\nmilk_compare %&gt;% \n  ggplot() +\n  geom_col(\n    aes(x = milk_produced, y = state, fill = as.factor(year)),\n    width = 0.7, alpha = 0.8,\n    position = 'dodge'\n  ) +\n  scale_fill_manual(\n    values = c('grey', 'steelblue'),\n    guide  = guide_legend(reverse = TRUE)\n  ) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  labs(\n    x = 'Milk produced (billion lbs)',\n    y = NULL,\n    fill = 'Year'\n  )\n\n\n\n\n\n\n\n\nNotice in this example we only have 2 categories in the legend. This is not by accident! In general, avoid putting &gt;2 categories in legend. For example, the same chart could be made with the states in the legend and year on the axis, but that would put three categories in the legend:\n\nmilk_compare %&gt;% \n  ggplot() +\n  geom_col(\n    aes(x = as.factor(year), y = milk_produced, fill = state),\n    width = 0.7, alpha = 0.8,\n    position = 'dodge'\n  ) +\n  scale_fill_manual(values = c('grey', 'steelblue', 'sienna')) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_hgrid(font_size = 16) +\n  labs(\n    x = 'Year',\n    y = 'Milk produced (billion lbs)'\n  )\n\n\n\n\n\n\n\n\nThis is worse because it requires the reader to look back and forth between the legend and the chart, which is easier to do with only two categories.\nOf course, you can also use facets to get rid of the legend!\n\nmilk_compare %&gt;%\n  ggplot() +\n  geom_col(\n    aes(x = as.factor(year), y = milk_produced, fill = as.factor(year)),\n    width = 0.7, alpha = 0.8\n  ) +\n  scale_fill_manual(values = c('grey', 'steelblue')) +\n  facet_wrap(~state) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_hgrid(font_size = 18) +\n  panel_border() +\n  theme(legend.position = 'none') +\n  labs(\n    x = 'Year',\n    y = 'Milk produced (billion lbs)'\n  )\n\n\n\n\n\n\n\n\n\n\n12.3.2 Bullet charts\nBullet charts are also effective for comparing 2 things, in partiuclar if one of the two things is some sort of target or threshold value that you wish to compare the other thing to. For example:\n\nmilk_compare %&gt;%\n  pivot_wider(\n    names_from = year,\n    values_from =  milk_produced\n  ) %&gt;%\n  ggplot() +\n  geom_col(\n    aes(x = `1970`, y = state, fill = '1970'),\n    width = 0.7\n  ) +\n  geom_col(\n    aes(x = `2017`, y = state, fill = '2017'),\n    width = 0.3\n  ) +\n  scale_fill_manual(values = c('grey', 'black')) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid(font_size = 18) +\n  labs(\n    x = 'Milk produced (billion lbs)',\n    y = NULL,\n    fill = \"Year\"\n  )",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Comparisons</span>"
    ]
  },
  {
    "objectID": "comparisons.html#comparing-two-things-across-more-than-2-categories",
    "href": "comparisons.html#comparing-two-things-across-more-than-2-categories",
    "title": "12¬† Comparisons",
    "section": "12.4 Comparing Two Things Across More Than 2 Categories",
    "text": "12.4 Comparing Two Things Across More Than 2 Categories\nWhile dodged bars are good for comparing 2 things, using them for 2 things across more than 2 categories can get confusing. Let‚Äôs see an example with 10 categories:\n\ntop10states &lt;- milk_production %&gt;%\n    filter(year == 2017) %&gt;%\n    arrange(desc(milk_produced)) %&gt;%\n    slice(1:10) %&gt;% \n    pull(state)\n\nmilk_compare_toomany &lt;- milk_production %&gt;%\n  filter(\n    year %in% c(1970, 2017),\n    state %in% top10states\n  ) %&gt;%\n  mutate(\n    milk_produced = milk_produced / 10^9,\n    state = fct_reorder(state, milk_produced)\n  )\n\nmilk_compare_toomany\n\n#&gt; # A tibble: 20 √ó 4\n#&gt;   region          state         year milk_produced\n#&gt;   &lt;chr&gt;           &lt;fct&gt;        &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 Northeast       New York      1970         10.3 \n#&gt; 2 Northeast       Pennsylvania  1970          7.12\n#&gt; 3 Lake States     Michigan      1970          4.60\n#&gt; 4 Lake States     Wisconsin     1970         18.4 \n#&gt; 5 Lake States     Minnesota     1970          9.64\n#&gt; 6 Southern Plains Texas         1970          3.06\n#&gt; # ‚Ñπ 14 more rows\n\n\nThe chart below compares 2 time periods, but across 10 categories, which is just too overwhelming to make sense of.\n\nmilk_compare_toomany %&gt;% \n  ggplot() +\n  geom_col(\n    aes(x = milk_produced, y = state, fill = as.factor(year)),\n    width = 0.7, alpha = 0.8,\n    position = 'dodge'\n  ) +\n  scale_fill_manual(\n    values = c('grey', 'steelblue'),\n    guide  = guide_legend(reverse = TRUE)\n  ) +\n  scale_x_continuous(\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  theme_minimal_vgrid(font_size = 18) +\n  labs(\n    x    = 'Milk produced (billion lbs)',\n    y    = NULL,\n    fill = 'Year'\n  )\n\n\n\n\n\n\n\n\nTwo strategies to address this include:\n\n\n\n\n\n\nDumbbell charts, for highlighting magnitudes across two periods / groups\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlope charts, for highlighting change in rankings across two periods / groups\n\n\n\n\n\n\n\n\n\n\n\n\n\n12.4.1 How to make a Dumbbell chart\nFirst, create data frame for plotting.\n\ntop10states &lt;- milk_production %&gt;%\n    filter(year == 2017) %&gt;%\n    arrange(desc(milk_produced)) %&gt;%\n    slice(1:10) %&gt;% \n    pull(state)\nmilk_summary_dumbbell &lt;- milk_production %&gt;%\n  filter(\n    year %in% c(1970, 2017),\n    state %in% top10states) %&gt;%\n  mutate(\n    # Reorder state variables\n    state = fct_reorder2(state, year, desc(milk_produced)),\n    # Convert year to discrete variable\n    year = as.factor(year),\n    # Modify units\n    milk_produced = milk_produced / 10^9\n  )\n  \nmilk_summary_dumbbell\n\n#&gt; # A tibble: 20 √ó 4\n#&gt;   region          state        year  milk_produced\n#&gt;   &lt;chr&gt;           &lt;fct&gt;        &lt;fct&gt;         &lt;dbl&gt;\n#&gt; 1 Northeast       New York     1970          10.3 \n#&gt; 2 Northeast       Pennsylvania 1970           7.12\n#&gt; 3 Lake States     Michigan     1970           4.60\n#&gt; 4 Lake States     Wisconsin    1970          18.4 \n#&gt; 5 Lake States     Minnesota    1970           9.64\n#&gt; 6 Southern Plains Texas        1970           3.06\n#&gt; # ‚Ñπ 14 more rows\n\n\nThen make lines (note the group variable):\n\nmilk_summary_dumbbell %&gt;% \n  ggplot(aes(x = milk_produced, y = state)) +\n  geom_line(\n    aes(group = state),\n    color = 'lightblue', size = 1\n  )\n\n\n\n\n\n\n\n\nAdd points (note the color variable):\n\nmilk_summary_dumbbell %&gt;% \n  ggplot(aes(x = milk_produced, y = state)) +\n  geom_line(\n    aes(group = state),\n    color = 'lightblue', size = 1\n  ) +\n  geom_point(aes(color = year), size = 2.5)\n\n\n\n\n\n\n\n\nChange the colors:\n\nmilk_summary_dumbbell %&gt;% \n  ggplot(aes(x = milk_produced, y = state)) +\n  geom_line(\n    aes(group = state),\n    color = 'lightblue', size = 1\n  ) +\n  geom_point(aes(color = year), size = 2.5) +\n  scale_color_manual(values = c('lightblue', 'steelblue'))\n\n\n\n\n\n\n\n\nFinally, adjust the theme and annotate:\n\nmilk_summary_dumbbell %&gt;% \n  ggplot(aes(x = milk_produced, y = state)) +\n  geom_line(\n    aes(group = state),\n    color = 'lightblue', size = 1\n  ) +\n  geom_point(aes(color = year), size = 2.5) +\n  scale_color_manual(values = c('lightblue', 'steelblue')) +\n  theme_minimal_vgrid() +\n  # Remove y axis line and tick marks\n  theme(\n    axis.line.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  labs(\n    x = 'Milk produced (billion lbs)',\n    y = 'State',\n    color = 'Year',\n    title = 'Top 10 milk producing states',\n    subtitle = '(1970 - 2017)'\n  )\n\n\n\n\n\n\n\n\n\n\n12.4.2 How to make a Slope chart\nFirst, create data frame for plotting:\n\ntop10states &lt;- milk_production %&gt;%\n    filter(year == 2017) %&gt;%\n    arrange(desc(milk_produced)) %&gt;%\n    slice(1:10) %&gt;% \n    pull(state)\nmilk_summary_slope &lt;- milk_production %&gt;%\n  filter(\n    year %in% c(1970, 2017),\n    state %in% top10states) %&gt;%\n  mutate(\n    # Reorder state variables\n    state = fct_reorder2(state, year, desc(milk_produced)),\n    # Convert year to discrete variable\n    year = as.factor(year),\n    # Modify units\n    milk_produced = milk_produced / 10^9,\n    # Define line color\n    lineColor = if_else(state == 'California', 'CA', 'other'),\n    # Make labels\n    label = paste(state, ' (', round(milk_produced), ')'),\n    label_left = ifelse(year == 1970, label, NA),\n    label_right = ifelse(year == 2017, label, NA)\n  )\n\n\n\n#&gt; # A tibble: 20 √ó 5\n#&gt;   state        year  milk_produced label               lineColor\n#&gt;   &lt;fct&gt;        &lt;fct&gt;         &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;    \n#&gt; 1 New York     1970          10.3  New York  ( 10 )    other    \n#&gt; 2 Pennsylvania 1970           7.12 Pennsylvania  ( 7 ) other    \n#&gt; 3 Michigan     1970           4.60 Michigan  ( 5 )     other    \n#&gt; 4 Wisconsin    1970          18.4  Wisconsin  ( 18 )   other    \n#&gt; 5 Minnesota    1970           9.64 Minnesota  ( 10 )   other    \n#&gt; 6 Texas        1970           3.06 Texas  ( 3 )        other    \n#&gt; # ‚Ñπ 14 more rows\n\n\nStart with a line plot (note the group variable):\n\nmilk_summary_slope %&gt;% \n  ggplot(aes(x = year, y = milk_produced, group = state)) +\n  geom_line(aes(color = lineColor))\n\n\n\n\n\n\n\n\nAdd labels, and justify (right or left) using hjust:\n\n\n\n\n\nJustification\nhjust\n\n\n\n\nRight\n0\n\n\nCenter\n0.5\n\n\nLeft\n1\n\n\n\n\n\n\nmilk_summary_slope %&gt;% \n  ggplot(aes(x = year, y = milk_produced, group = state)) +\n  geom_line(aes(color = lineColor)) +\n  # Add 1970 labels (left side)\n  geom_text(\n    aes(label = label_left),\n    hjust = 1, nudge_x = -0.05\n  ) +\n  # Add 2017 labels (right side)\n  geom_text(\n    aes(label = label_right),\n    hjust = 0, nudge_x = 0.05\n  )\n\n\n\n\n\n\n\n\nOne common issue you‚Äôll run into is overlapping labels, like you see in the lower-left corner in the chart above. But don‚Äôt worry - ggrepel is here to save the day!\n\n\n\n\nArtwork by @allison_horst\n\nNow we can align labels so they don‚Äôt overlap:\n\nlibrary(ggrepel)\n\nmilk_summary_slope %&gt;% \n  ggplot(aes(x = year, y = milk_produced, group = state)) +\n  geom_line(aes(color = lineColor)) +\n  # Add 1970 labels (left side)\n  geom_text_repel(\n    aes(label = label_left),\n    hjust = 1, nudge_x = -0.05,\n    direction = 'y', segment.color = 'grey'\n  ) +\n  # Add 2017 labels (right side)\n  geom_text_repel(\n    aes(label = label_right),\n    hjust = 0, nudge_x = 0.05,\n    direction = 'y', segment.color = 'grey'\n  )\n\n\n\n\n\n\n\n\nAdjust colors:\n\nmilk_summary_slope %&gt;% \n  ggplot(aes(x = year, y = milk_produced, group = state)) +\n  geom_line(aes(color = lineColor)) +\n  geom_text_repel(\n    aes(label = label_left),\n    hjust = 1, nudge_x = -0.05,\n    direction = 'y', segment.color = 'grey'\n  ) +\n  geom_text_repel(\n    aes(label = label_right),\n    hjust = 0, nudge_x = 0.05,\n    direction = 'y', segment.color = 'grey'\n  ) +\n  # Move year labels to top, modify line colors\n  scale_x_discrete(position = 'top') +\n  scale_color_manual(values = c('red', 'black'))\n\n\n\n\n\n\n\n\nAdjust the theme and annotate:\n\nmilk_summary_slope %&gt;% \n  ggplot(aes(x = year, y = milk_produced, group = state)) +\n  geom_line(aes(color = lineColor)) +\n  # Add 1970 labels (left side)\n  geom_text_repel(\n    aes(label = label_left),\n    hjust = 1, nudge_x = -0.05,\n    direction = 'y', segment.color = 'grey'\n  ) +\n  # Add 2017 labels (right side)\n  geom_text_repel(aes(label = label_right),\n    hjust = 0, nudge_x = 0.05,\n    direction = 'y', segment.color = 'grey'\n  ) +\n  # Move year labels to top, modify line colors\n  scale_x_discrete(position = 'top') +\n  scale_color_manual(values = c('red', 'black')) +\n  # Annotate & adjust theme\n  labs(\n    x = NULL,\n    y = 'Milk produced (billion lbs)',\n    title = 'Top 10 milk producing states (1970 - 2017)'\n  ) +\n  theme_minimal_grid() +\n  theme(\n    panel.grid  = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    legend.position = 'none'\n  )",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Comparisons</span>"
    ]
  },
  {
    "objectID": "comparisons.html#comparing-distributions",
    "href": "comparisons.html#comparing-distributions",
    "title": "12¬† Comparisons",
    "section": "12.5 Comparing Distributions",
    "text": "12.5 Comparing Distributions\nOverlapping histograms tend to have issues.\n\n#|#|  fig-height: 5\n#| fig-width: 7\n#| fig-align: center\n\nggplot(marathon) +\n  geom_histogram(aes(x = Age, fill = `M/F`),\n                 alpha = 0.7, color = 'white',\n                 position = 'identity') +\n  scale_fill_manual(values = c('sienna', 'steelblue')) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_hgrid()",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Comparisons</span>"
    ]
  },
  {
    "objectID": "maps.html",
    "href": "maps.html",
    "title": "13¬† Maps",
    "section": "",
    "text": "13.1 How to Make a Map",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Maps</span>"
    ]
  },
  {
    "objectID": "maps.html#how-to-make-a-map",
    "href": "maps.html#how-to-make-a-map",
    "title": "13¬† Maps",
    "section": "",
    "text": "13.1.1 The maps package\nIncludes data on: - World: world, world.cities, lakes - US: states, county, state, usa - France: france - Italy: italy - New zealand: nz\nExample:\n\nlibrary(maps)\n\nus_counties &lt;- st_as_sf(\n    map(\"county\", plot = FALSE, fill = TRUE))\n\nggplot(data = us_counties) +\n    geom_sf(fill = 'grey90', color = 'grey60')\n\n\n\n\n\n\n13.1.2 Step 1: Load a shape file\nThis can be done through two ways: a. Use a library b. Read in a shape file\n\n\n13.1.3 Step 2: Plot the shape file\nWe shall discuss how to plot the following data types with their corresponding functions as seen below: a. Polygon data: geom_polygon() b. Simple Features data: geom_sf()\n\n13.1.3.1 Polygon maps\nGenerally, polygon maps are plotted with two steps.\nExample: Plotting the World\n\nGet the ‚ÄúWorld‚Äù shape file\n\n\nlibrary(ggplot2)\n\nworld &lt;- map_data(\"world\")\nhead(world)\n\n#&gt;        long      lat group order region subregion\n#&gt; 1 -69.89912 12.45200     1     1  Aruba      &lt;NA&gt;\n#&gt; 2 -69.89571 12.42300     1     2  Aruba      &lt;NA&gt;\n#&gt; 3 -69.94219 12.43853     1     3  Aruba      &lt;NA&gt;\n#&gt; 4 -70.00415 12.50049     1     4  Aruba      &lt;NA&gt;\n#&gt; 5 -70.06612 12.54697     1     5  Aruba      &lt;NA&gt;\n#&gt; 6 -70.05088 12.59707     1     6  Aruba      &lt;NA&gt;\n\n\n\nMake the plot with geom_polygon()\n\n\nggplot(world) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey90\", color = \"grey60\"\n  )\n\n\n\n\nExample: Plotting the USA\n\nGet the ‚ÄúUS States‚Äù shape file\n\n\nlibrary(ggplot2)\n\nus_states &lt;- map_data(\"state\")\n\n\nMake the plot with geom_polygon()\n\n\nggplot(us_states) +\n  geom_polygon(\n    aes(x = long, y = lat, group = group),\n    fill = \"grey90\", color = \"grey60\"\n  )\n\n\n\n\n\n\n13.1.3.2 Simple Features (sf) maps\nSimple Features package: {sf}\n\n\n\n\nArt byAllison Horst\n\nTo show an example of a simple features map, we shall use the library data from Natural Earth\n\nworld &lt;- ne_countries(\n  scale = \"medium\",\n  returnclass = \"sf\"\n)\n\nworld %&gt;%\n    select(name, geometry) %&gt;%\n    head()\n\n\nworld &lt;- ne_countries(\n  scale = \"medium\",\n  returnclass = \"sf\"\n)\n\nworld %&gt;%\n    select(name, geometry) %&gt;%\n    head()\n\nOnce again, we use two steps to plot our maps.\nExample: Plotting the World\n\nGet the ‚ÄúWorld‚Äù shape file\n\n\nworld &lt;- ne_countries(\n  scale = \"medium\",\n  returnclass = \"sf\"\n)\n\n\nMake the plot with geom_sf()\n\n\nlibrary(sf)\n\nggplot(data = world) +\n  geom_sf(fill = \"grey90\", color = \"grey60\")\n\n\n\n\nExample: Plotting the USA\n\nGet the ‚ÄúUS States‚Äù shape file\n\n\nus_states &lt;- ne_states( \n  country = 'united states of america', \n  returnclass = 'sf'\n)\n\n\nMake the plot with geom_sf()\n\n\nlibrary(sf)\n\nggplot(data = us_states) +\n    geom_sf(fill = \"grey90\", color = \"grey60\")\n\n\n\n\nExample: Plotting the USA (again, but better)\n\nGet the Continental ‚ÄúUS States‚Äù shape file\n\n\nus_states_cont &lt;- ne_states(\n      country = 'united states of america',\n      returnclass = 'sf'\n    ) %&gt;%\n    filter(! name %in% c('Alaska', 'Hawaii'))\n\n\nMake the plot with geom_sf()\n\n\nlibrary(sf)\n\nggplot(data = us_states_cont) +\n  geom_sf(fill = \"grey90\", color = \"grey60\")\n\n\n\n\nExample: Plotting the USA (with Hawaii and Alaska)\nTo inset Hawaii and Alaska‚Ä¶ 1. Get the shape file from {tigris} package\n\nlibrary(tigris)\n\nus_sf &lt;- tigris::states(class = \"sf\", cb = TRUE) %&gt;%\n    shift_geometry() %&gt;%\n    filter(GEOID &lt; 60)\n\n\nMake the plot with geom_sf()\n\n\nus_sf %&gt;%\n    ggplot() +\n    geom_sf()\n\n\n\n\n\n\n13.1.3.3 Simple Features (sf) maps: st_read()\nExample: Plotting the World\n\nThis time, use st_read() to read in the ‚ÄúWorld‚Äù shape file from Natural Earth\n\n\nlibrary(sf)\n\nworld &lt;- st_read(here::here(\n    'data', 'natural_earth_countries',\n    'ne_50m_admin_0_countries.shp')) %&gt;%\n    clean_names()\n\n\nThen, all you need to do is use ggplot\n\n\nggplot(data = world) +\n  geom_sf(fill = \"grey90\", color = \"grey60\")\n\n\n\n\nExample: Plotting Central Park\n\nRead in the ‚ÄúCentral Park‚Äù shape file [source]\n\n\nlibrary(sf)\n\ncentral_park &lt;- st_read(here::here(\n  'data', 'central_park', 'CentralPark.shp'))\n\n\nggplot(data = central_park) +\n  geom_sf(color = 'grey75')",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Maps</span>"
    ]
  },
  {
    "objectID": "maps.html#adding-data-to-maps",
    "href": "maps.html#adding-data-to-maps",
    "title": "13¬† Maps",
    "section": "13.2 Adding Data to Maps",
    "text": "13.2 Adding Data to Maps\n\n\n13.2.0.1 First rule of adding data to maps:\n\n\n13.2.0.2 Do you need to make a map?\nNot all maps are useful‚Ä¶\n\n\n\n[https://xkcd.com/1138/]\n‚Ä¶but some maps are\n\n\n\nThere are two ways to map data:\n\nChoropleth maps\nPoint maps\n\n\n\n13.2.1 Chloropleth Maps\nThe word choropleth comes from Greek:\n\nœá·ø∂œÅŒøœÇ ‚Äúchoros‚Äù (area/region)\nœÄŒª·øÜŒ∏ŒøœÇ ‚Äúplethos‚Äù (multitude)\n\nAn example of a chloropleth map:\n\n\n\n\nFrom reddit: r/dataisbeautiful by u/GaudyAudi\n\nChoropleth maps are easily misleading\nNumber of events != Number of events per capita\n\n\n\nManipulating fill scale produces wildly different maps, such as this:\n\n\n\nVersus this:\n\nSource: New York Times\n\nBelow are some maps that show how land doesn‚Äôt vote - people vote\n\n\n\n\nBy David Zumbach\n\nElection maps from: http://www-personal.umich.edu/~mejn/election/2016/\n\n\n\n\nhttps://xkcd.com/2439/\n\nChloropleth maps are also easy to use to lie with fake news\n\n\n\nBottom map is actually this map of the 2012 election\n(here is what actual crime rates look like) 2016 Election map [source]\n\n\n\n2014 Crime map [source]\n\n\n\nA choropleth alternative: hex maps\n1994 Simpson Diversity Index in US Schools\n\n\n\nhttps://github.com/malcolmbarrett/designing_ggplots\n2016 Electoral College\n\n\n\n\nhttps://fivethirtyeight.com/\n\n\n13.2.1.1 How to make a choropleth map\n\n\n\nGet the ‚Äúfill‚Äù data\n\nmilk_2017 &lt;- milk_production %&gt;%\n    filter(year == 2017) %&gt;%\n    select(name = state, milk_produced) %&gt;%\n    mutate(milk_produced = milk_produced / 10^9)\n\nGet the ‚Äúmap‚Äù data\n\nus_states &lt;- ne_states(\n    country = 'united states of america',\n    returnclass = 'sf') %&gt;%\n    filter(! name %in% c('Alaska', 'Hawaii')) %&gt;%\n    left_join(milk_2017, by = 'name')\n\nPlot the map\n\nggplot(us_states) +\n  geom_sf(aes(fill = milk_produced)) +\n  scale_fill_viridis(\n    option = \"plasma\",\n    limits = c(0, 40)) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  labs(\n    fill = 'Milk produced\\n(billions lbs)',\n    title = 'Milk Production by State in 2017'\n  )\n\n\n\n\nNon-linear scale:\n\nggplot(us_states) +\n  geom_sf(aes(fill = milk_produced)) +\n  scale_fill_viridis(\n    trans = 'sqrt',\n    option = \"plasma\",\n    limits = c(0, 40)) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  labs(\n    fill = 'Milk produced\\n(billions lbs)',\n    title = 'Milk Production by State in 2017'\n  )\n\n\n\n\n\n\n\n13.2.2 Point Maps\nPoint maps can be made with‚Ä¶\nPoints as locations:\n\n\n\nPoints encoding a variable\n\n\n\nFor point size, use area, not radius  \\(Area = \\pi r^2\\)\n\n\n\nUsing radius:\n\nUsing area:\n\n\n13.2.2.1 How to add points to a map\n\n\n\nLoad the continental US shape file\n\nus_states_cont &lt;- ne_states(\n    country = 'united states of america',\n    returnclass = 'sf') %&gt;%\n    filter(! name %in% c('Alaska', 'Hawaii'))\n\nRead in the coffee shop data\n\nus_coffee_shops  &lt;- read_csv(here::here('data', 'us_coffee_shops.csv'))\n\n# Only keep data in continental US\nus_coffee_shops &lt;- us_coffee_shops %&gt;%\n    filter(\n      lat &gt; 22,    lat &lt; 50,\n      long &gt; -150, long &lt; -66\n    )\n\n\nhead(us_coffee_shops)\n\n#&gt; # A tibble: 6 √ó 8\n#&gt;   name             lat  long unique_id city             state_abb zip   state\n#&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 Baskin Robbins  40.8 -73.4   3304448 Huntington Stat‚Ä¶ NY        11746 New ‚Ä¶\n#&gt; 2 Baskin Robbins  42.1 -88.0  11342048 Rolling Meadows  IL        60008 Illi‚Ä¶\n#&gt; 3 Baskin Robbins  34.0 -84.5   3304169 Marietta         GA        30066 Geor‚Ä¶\n#&gt; 4 Baskin Robbins  29.8 -95.6   3304006 Houston          TX        77079 Texas\n#&gt; 5 Baskin Robbins  36.4 -89.5   3303959 Tiptonville      TN        38079 Tenn‚Ä¶\n#&gt; 6 Baskin Robbins  40.7 -73.6   3304507 Merrick          NY        11566 New ‚Ä¶\n\n\nPlot coffee shop locations over map\n\nggplot() +\n  geom_sf(data = us_states_cont) +\n  geom_point(\n    data = us_coffee_shops,\n    aes(x = long, y = lat, color = name),\n    size = 0.3\n  ) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  guides(color = guide_legend(\n    # Move legend title to top\n    title.position = \"top\",\n    # Increase legend point size\n    override.aes = list(size = 3))) +\n  labs(\n    color = 'Coffee shop',\n    title = 'Coffee Shops in the US'\n  )\n\n\n\n\nJust for fun:",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Maps</span>"
    ]
  },
  {
    "objectID": "maps.html#projections",
    "href": "maps.html#projections",
    "title": "13¬† Maps",
    "section": "13.3 Projections",
    "text": "13.3 Projections\nWhat‚Äôs a map projection?\nWatch this video to learn more:\n\n\n\n\nWhat is the best projection?‚Ä¶it depends\n\nCompare projections\nCompare country sizes\n\n\n13.3.1 Using projections\nTo modify the projection of a map, use coord_sf(crs = st_crs(XXXX))\n\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n\nggplot(data = world) +\n    geom_sf()\n\nDefault (long-lat)\n\nggplot(data = world) +\n    geom_sf()\n\n\nRobinson projection\n\nggplot(data = world) +\n    geom_sf() +\n    coord_sf(crs = \"ESRI:54030\")\n\n\nMollweide projection\n\nggplot(data = world) +\n    geom_sf() +\n    coord_sf(crs = \"ESRI:54009\")\n\n\n\n\n13.3.2 Common Projections\nggplot layer:\n\ncoord_sf(crs = \"ESRI:XXXX\")\n\nWorld\n\n\n\nCode\nProjection\n\n\n\n\n\"ESRI:54030\"\nRobinson\n\n\n\"ESRI:54002\"\nEquidistant cylindrical\n\n\n\"ESRI:54004\"\nMercator\n\n\n\"ESRI:54008\"\nSinusoidal\n\n\n\"ESRI:54009\"\nMollweide\n\n\n\nUnited States\n\n\n\nCode\nProjection\n\n\n\n\n\"ESRI:102003\"\nAlbers\n\n\n\"ESRI:102004\"\nLambert Conformal Conic\n\n\n4269\nNAD 83\n\n\n\n\n\n13.3.3 US projections\n\nus_states_cont &lt;- ne_states(country = 'united states of america',\n    returnclass = 'sf') %&gt;%\n    filter(! name %in% c('Alaska', 'Hawaii'))\n\nNAD 83 projection\n\nggplot(data = world) +\n    geom_sf() +\n    coord_sf(crs = 4269)\n\n\nMercator\n\nggplot(data = world) +\n    geom_sf() +\n    coord_sf(crs = \"ESRI:54004\")\n\n\nAlbers\n\nggplot(data = us_states_cont) +\n    geom_sf() +\n    coord_sf(crs = \"ESRI:102003\")\n\n\n\n\n13.3.4 Mapping data to projections - choropleth map\n\nmilk_2017 &lt;- milk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  select(name = state, milk_produced) %&gt;%\n  mutate(milk_produced = milk_produced / 10^9)\n\nus_states &lt;- ne_states(\n  country = 'united states of america',\n  returnclass = 'sf') %&gt;%\n  filter(! name %in% c('Alaska', 'Hawaii')) %&gt;%\n  left_join(milk_2017, by = 'name')\n\nggplot(us_states) +\n  geom_sf(aes(fill = milk_produced)) +\n  scale_fill_viridis(\n    option = \"plasma\",\n    limits = c(0, 40)) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  labs(\n    fill = 'Milk produced\\n(billions lbs)',\n    title = 'Milk Production by State in 2017'\n  )\n\n\n\n\nAlbers Projection:\n\nmilk_2017 &lt;- milk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  select(name = state, milk_produced) %&gt;%\n  mutate(milk_produced = milk_produced / 10^9)\n\nus_states &lt;- ne_states(\n  country = 'united states of america',\n  returnclass = 'sf') %&gt;%\n  filter(! name %in% c('Alaska', 'Hawaii')) %&gt;%\n  left_join(milk_2017, by = 'name')\n\nggplot(us_states) +\n  geom_sf(aes(fill = milk_produced)) +\n  scale_fill_viridis(\n    option = \"plasma\",\n    limits = c(0, 40)) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  labs(\n    fill = 'Milk produced\\n(billions lbs)',\n    title = 'Milk Production by State in 2017'\n  ) +\n  coord_sf(crs = \"ESRI:102003\")\n\n\n\n\n\n\n13.3.5 Mapping data to projections - points\n\nus_states_cont &lt;- ne_states(\n  country = 'united states of america',\n  returnclass = 'sf') %&gt;%\n  filter(! name %in% c('Alaska', 'Hawaii'))\n\nus_coffee_shops &lt;- us_coffee_shops %&gt;%\n  filter(lat &gt; 22,    lat &lt; 50,\n         long &gt; -150, long &lt; -66)\n\nggplot() +\n  geom_sf(data = us_states_cont) +\n  geom_point(\n    data = us_coffee_shops,\n    aes(x = long, y = lat, color = name),\n    size = 0.3) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  guides(color = guide_legend(\n    # Move legend title to top\n    title.position = \"top\",\n    # Increase legend point size\n    override.aes = list(size = 3))) +\n  labs(\n    color = 'Coffee shop',\n    title = 'Coffee Shops in the US'\n  )\n\n\n\n\n\nus_states_cont &lt;- ne_states(\n  country = 'united states of america',\n  returnclass = 'sf') %&gt;%\n  filter(! name %in% c('Alaska', 'Hawaii'))\n\nus_coffee_shops &lt;- us_coffee_shops %&gt;%\n  filter(lat &gt; 22,    lat &lt; 50,\n         long &gt; -150, long &lt; -66)\n\nggplot() +\n  geom_sf(data = us_states_cont) +\n  geom_point(\n    data = us_coffee_shops,\n    aes(x = long, y = lat, color = name),\n    size = 0.3) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  guides(color = guide_legend(\n    # Move legend title to top\n    title.position = \"top\",\n    # Increase legend point size\n    override.aes = list(size = 3))) +\n  labs(\n    color = 'Coffee shop',\n    title = 'Coffee Shops in the US'\n  ) +\n  coord_sf(crs = \"ESRI:102003\")\n\nFail!\n\n\n\nFirst match us_coffee_shops crs to us_states_cont\n\nus_states_cont &lt;- ne_states(\n    country = 'united states of america',\n    returnclass = 'sf') %&gt;%\n    filter(! name %in% c('Alaska', 'Hawaii'))\n\nus_coffee_shops &lt;- us_coffee_shops %&gt;%\n    filter(lat &gt; 22,    lat &lt; 50,\n           long &gt; -150, long &lt; -66)\n\nus_coffee_shops_sf &lt;- st_as_sf(us_coffee_shops,\n    coords = c(\"long\", \"lat\"),\n    crs = st_crs(us_states_cont))\n\nPlot coffee shop locations over map with geom_sf()\n\nggplot() +\n  geom_sf(data = us_states_cont) +\n  geom_sf(\n    data = us_coffee_shops_sf,\n    aes(color = name),\n    size = 0.3) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  guides(color = guide_legend(\n    # Move legend title to top\n    title.position = \"top\",\n    # Increase legend point size\n    override.aes = list(size = 3))) +\n  labs(\n    fill = 'Coffee shop',\n    title = 'Coffee Shops in the US'\n  )\n\n\n\n\nAlbers Projection:\n\nggplot() +\n  geom_sf(data = us_states_cont) +\n  geom_sf(\n    data = us_coffee_shops_sf,\n    aes(color = name),\n    size = 0.3) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  guides(color = guide_legend(\n    # Move legend title to top\n    title.position = \"top\",\n    # Increase legend point size\n    override.aes = list(size = 3))) +\n  labs(\n    fill = 'Coffee shop',\n    title = 'Coffee Shops in the US'\n  ) +\n  coord_sf(crs = \"ESRI:102003\")\n\n\n\n\nLCC Projection:\n\nggplot() +\n  geom_sf(data = us_states_cont) +\n  geom_sf(\n    data = us_coffee_shops_sf,\n    aes(color = name),\n    size = 0.3) +\n  theme_void(base_size = 15) +\n  theme(legend.position = 'bottom') +\n  guides(color = guide_legend(\n    # Move legend title to top\n    title.position = \"top\",\n    # Increase legend point size\n    override.aes = list(size = 3))) +\n  labs(\n    fill = 'Coffee shop',\n    title = 'Coffee Shops in the US'\n  ) +\n  coord_sf(crs = \"ESRI:102004\")",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Maps</span>"
    ]
  },
  {
    "objectID": "scales.html",
    "href": "scales.html",
    "title": "14¬† Adjusting Scales",
    "section": "",
    "text": "14.1 Truncating Axes",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Adjusting Scales</span>"
    ]
  },
  {
    "objectID": "scales.html#truncating-axes",
    "href": "scales.html#truncating-axes",
    "title": "14¬† Adjusting Scales",
    "section": "",
    "text": "14.1.0.1 When is it okay to to truncate an axis?\n\nWhen small movements matter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen zero values are impossible\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen it‚Äôs normal / a convention\n\n\n\n\n\nNever on a bar chart\n\n\n\n\n\n\n\n14.1.0.2 You are most sensitive to changes in angles close to 45 degrees\n\n\nGood scaling:\n\n\n\n\n\n\n\n\n\n\n\nY scale too large:\n\n\n\n\n\n\n\n\n\n\n\nX scale too large:\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere is another bad chart:\n\n\n\n\n\n\n\n\n\n\n\nTo make it better‚Ä¶\n\n\n\n\n\n\n\n\n\nSet image dimensions in R chunk header:\n```{r}\n#| fig.width: 5\n#| fig.height: 3.1\n\nplot\n```",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Adjusting Scales</span>"
    ]
  },
  {
    "objectID": "scales.html#consider-setting-dimensions-to-golden-ratio-1-1.618",
    "href": "scales.html#consider-setting-dimensions-to-golden-ratio-1-1.618",
    "title": "14¬† Adjusting Scales",
    "section": "14.2 Consider setting dimensions to ‚ÄúGolden Ratio‚Äù (1 : 1.618)",
    "text": "14.2 Consider setting dimensions to ‚ÄúGolden Ratio‚Äù (1 : 1.618)\n\n\n\nApprox. to golden ratio:\n\n\n\nwidth\nheight\n\n\n\n\n5\n3.1 or 3\n\n\n6\n3.7 or 4\n\n\n7\n4.3\n\n\n\n\nAlso check out Donald Duck in Mathemagic Land",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Adjusting Scales</span>"
    ]
  },
  {
    "objectID": "scales.html#adjusting-scales",
    "href": "scales.html#adjusting-scales",
    "title": "14¬† Adjusting Scales",
    "section": "14.3 Adjusting Scales",
    "text": "14.3 Adjusting Scales\n\n14.3.1 Adjust axes with scale_* functions\nContinous variables:\n\nscale_x_continuous()\nscale_y_continuous()\n\nDiscrete variables:\n\nscale_x_discrete()\nscale_y_discrete()\n\nOthers:\n\nscale_x_log10()\nscale_y_log10()\nscale_x_date()\n\nCommon arguments for continuous variables:\n\nscale_y_continuous(\n  # Set the lower & upper boundaries\n  limits = c(lower, upper),\n\n  # Explicitly set the break points\n  breaks = c(break1, break2, etc.)\n\n  # Adjust the axis so bars start at 0\n  expand = expand_scale(mult = c(0, 0.05))\n)\n\n\n\n14.3.2 Adjusting continuous scales\n\nmilk_bars &lt;- milk_production %&gt;%\n  filter(year == 2017) %&gt;%\n  arrange(desc(milk_produced)) %&gt;%\n  slice(1:10) %&gt;%\n  mutate(\n      milk_produced = milk_produced / 10^9,\n      state = fct_reorder(state, milk_produced)) %&gt;%\n  ggplot() +\n  geom_col(aes(x = milk_produced, y = state)) +\n  theme_minimal_vgrid(font_size = 18) +\n  labs(x = 'Milk produced (billions of lbs)',\n       y = 'State')\n\nmilk_bars\n\n\n\n\n\n\n\n\n\nmilk_bars +\n  scale_x_continuous(\n    breaks = c(0, 15, 30, 45),\n    limits = c(0 , 45),\n    expand = expand_scale(mult = c(0, 0.05)))\n\n\n\n\n\n\n\n\n\n\n14.3.3 Adjusting discrete scales\n\n\n\n\n\n\n\n\n\n\n\n14.3.4 Adjusting log scales\nRegular scaling\n\nplot &lt;- ggplot(msleep) +\n  geom_point(aes(x = brainwt, y = bodywt)) +\n  theme_half_open(font_size = 20) +\n  labs(x = 'Brain weight (kg)',\n       y = 'Body weight (kg)')\n\nplot\n\n\n\n\n\n\n\n\nLog scaling\n\nplot +\n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = 'Log brain weight (kg)',\n       y = 'Log body weight (kg)')\n\n\n\n\n\n\n\n\nLog-log relationship:\n\\[y = x^n\\]\n\\[\\log(y) = n\\log(x)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample from Mini Project 2\nRegular scaling\n\nplot &lt;- transit_cost %&gt;%\n  filter(!is.na(length)) %&gt;%\n  filter(length &lt; 2500) %&gt;%\n  mutate(cost = as.numeric(real_cost)) %&gt;%\n  ggplot(aes(x = length, y = cost)) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = FALSE) +\n  theme_half_open(font_size = 20) +\n  labs(x = \"Length of Proposed Line\",\n       y = \"Real Cost in Millions USD\")\n\nplot\n\n\n\n\n\n\n\n\nLog scaling\n\nplot +\n  scale_x_log10() +\n  scale_y_log10() +\n  labs(x = 'Log length of proposed line',\n       y = 'Log cost')\n\n\n\n\n\n\n\n\nLog-log relationship:\n\\[y = x^n\\]\n\\[\\log(y) = n\\log(x)\\]",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Adjusting Scales</span>"
    ]
  },
  {
    "objectID": "scales.html#date-scales",
    "href": "scales.html#date-scales",
    "title": "14¬† Adjusting Scales",
    "section": "14.4 Date Scales",
    "text": "14.4 Date Scales\n\n14.4.0.1 Date scales can be confusing\nWhat‚Äôs wrong with this chart?\n\n\n\n1st Fix\n\n\n\n2nd Fix\n\n\n\nFinal Fix\n\n\n\n\n\n14.4.1 Adjusting date scales\nSummarise the data\n\nlibrary(lubridate)\n\nplot &lt;- wildlife_impacts %&gt;%\n  filter(incident_year == 2016) %&gt;%\n  count(operator, incident_date) %&gt;%\n  mutate(incident_date = ymd(incident_date)) %&gt;%\n  ggplot() +\n  geom_col(\n    aes(x = incident_date, y = n,\n        color = operator)) +\n  facet_wrap(~operator, ncol = 1) +\n  theme_minimal_grid(font_size = 16) +\n  panel_border() +\n  theme(legend.position = 'none') +\n  labs(x = 'Incident date (2016)',\n       y = 'Number of incidents')\n\nplot\n\n\n\n\n\n\n\n\n\nplot +\n  scale_x_date(\n    date_breaks = '1 month',\n    date_labels = '%b')\n\n\n\n\n\n\n\n\nLet‚Äôs explore other variations of the last step:\n\nscale_x_date(\n  date_breaks = '1 month',\n  date_labels = '%b')\n\n\n\n\ndate_breaks = '1 month'\n\n\n‚Äò1 day‚Äô\n‚Äò10 days‚Äô\n‚Äò1 month‚Äô\n‚Äò3 months‚Äô\n‚Äò1 year‚Äô\n‚Äò3 years‚Äô\n\n\n\n\ndate_labels = '%b'\n\nExample date: March 04, 2020\n\n%Y = 2020\n%y = 20\n%B = March\n%b = Mar\n%D = 03/04/2020\n%d = 03\n\n\n\n\n\n14.4.2 Use scales library to modify scale text\nscales converts numbers to formatted characters\n\nscales::comma(200000)\n\n#&gt; [1] \"200,000\"\n\nscales::dollar(200000)\n\n#&gt; [1] \"$200,000\"\n\nscales::percent(0.5)\n\n#&gt; [1] \"50%\"\n\n\nExample: scale_x_continuous()\n\nfederal_spending %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(\n    department = fct_reorder(\n      department, rd_budget_mil)) %&gt;%\n  ggplot() +\n  geom_col(aes(x = rd_budget_mil, y = department)) +\n  scale_x_continuous(\n    expand = expand_scale(mult = c(0, 0.05))) +\n  theme_minimal_vgrid(font_size = 16) +\n  labs(x = 'Department',\n       y = 'R&D spending ($ Millions)')",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Adjusting Scales</span>"
    ]
  },
  {
    "objectID": "scales.html#use-scales-library-to-modify-scale-text-1",
    "href": "scales.html#use-scales-library-to-modify-scale-text-1",
    "title": "14¬† Adjusting Scales",
    "section": "14.5 Use scales library to modify scale text",
    "text": "14.5 Use scales library to modify scale text\nExample: scale::comma()\n\nfederal_spending %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(\n    department = fct_reorder(\n      department, rd_budget_mil)) %&gt;%\n  ggplot() +\n  geom_col(aes(x = rd_budget_mil, y = department)) +\n  scale_x_continuous(\n    labels = scales::comma,\n    expand = expand_scale(mult = c(0, 0.05))) +\n  theme_minimal_vgrid(font_size = 16) +\n  labs(x = 'Department',\n       y = 'R&D spending ($ Millions)')\n\n\n\n\n\n\n\n\nExample: scale::dollar()\n\nfederal_spending %&gt;%\n  filter(year == 2017) %&gt;%\n  mutate(\n    department = fct_reorder(\n      department, rd_budget_mil)) %&gt;%\n  ggplot() +\n  geom_col(aes(x = rd_budget_mil, y = department)) +\n  scale_x_continuous(\n    labels = scales::dollar,\n    expand = expand_scale(mult = c(0, 0.05))) +\n  theme_minimal_vgrid(font_size = 16) +\n  labs(x = 'Department',\n       y = 'R&D spending ($ Millions)')\n\n\n\n\n\n\n\n\nCheck out this guide to scales: https://ggplot2tor.com/scales",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Adjusting Scales</span>"
    ]
  },
  {
    "objectID": "aesthetics.html",
    "href": "aesthetics.html",
    "title": "15¬† Plot Aesthetics",
    "section": "",
    "text": "15.1 Annotations\nText is usually the single most important component on your chart\nAs seen below, text is what catches your attention first.\nMichelle Borkin, et al.¬†(2015) Beyond Memorability: Visualization Recognition and Recall\nTitles matter\nBelow is an example of a chart with an incorrect title.\nSource: https://www.reddit.com/r/dataisugly/comments/odk65x/this_was_not_the_right_headline_to_go_along_with\nGood annotations should tell a story\nSource: https://ourworldindata.org/less-meat-or-sustainable-meat\nUse captions as a way to annotate\nlabs(\n  x = 'Year',\n  y = 'Cost of incident repairs ($ millions)',\n  title = 'Repair costs of aircraft impacts with wildlife',\n  subtitle = 'Top 4 airlines',\n  caption = 'Source: https://wildlife.faa.gov/home'\n)\nUse mapped variables in aes() in labs()\nmilk_production %&gt;%\n  filter(year %in% c(1970, 2017)) %&gt;%\n  group_by(year, region) %&gt;%\n  summarise(milk_produced = sum(milk_produced) / 10^9) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    region = fct_reorder2(region, year, desc(milk_produced))) %&gt;%\n  ggplot() +\n  geom_col(\n    aes(x = milk_produced,\n        y = region,\n        fill = as.factor(year)),\n    position = \"dodge\") +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  labs(\n    x = 'Milk produced (billions lbs)',\n    y = 'Region',\n    title = 'Milk production by region',\n    subtitle = '1970 & 2017')\nUse labs() to label everything.\nmilk_production %&gt;%\n  filter(year %in% c(1970, 2017)) %&gt;%\n  group_by(year, region) %&gt;%\n  summarise(milk_produced = sum(milk_produced) / 10^9) %&gt;%\n  ungroup() %&gt;%\n  mutate(\n    region = fct_reorder2(region, year, desc(milk_produced))) %&gt;%\n  ggplot() +\n  geom_col(\n    aes(x = milk_produced,\n        y = region,\n        fill = as.factor(year)),\n    position = \"dodge\") +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +\n  theme_minimal_vgrid() +\n  labs(\n    x = 'Milk produced (billions lbs)',\n    y = 'Region',\n    title = 'Milk production by region',\n    subtitle = '1970 & 2017',\n    fill = \"Year\")\nLegends suck\nUse annotate() to add text to chart\nUse geom_text() to add text to chart\nUse geom_label() to add text to chart with a background\nUse geom_curve() + geom_label() to direct attention\nUse annotate() to direct attention\nUse geom = \"rect\" for box, geom = \"text\" for label\nFind where to put annotations with ggannotate\nInstall:\nremotes::install_github(\"mattcowgill/ggannotate\")\nUse:\nlibrary(ggannotate)\n\nplot &lt;- ggplot(mpg) +\n  geom_point(aes(x = displ, y = hwy, color = as.factor(cyl))) +\n  theme_half_open()\n\nggannotate(plot)",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>15</span>¬† <span class='chapter-title'>Plot Aesthetics</span>"
    ]
  },
  {
    "objectID": "aesthetics.html#annotations",
    "href": "aesthetics.html#annotations",
    "title": "15¬† Plot Aesthetics",
    "section": "",
    "text": "Legends require look-up task\n\nggplot(milk_region,\n    aes(x = year, y = milk_produced,\n        color = region)) +\n    geom_line(size = 1) +\n    scale_color_manual(values = c(\n        'sienna', 'forestgreen', 'dodgerblue', 'orange')) +\n    theme_half_open(font_size = 18) +\n    labs(x = 'Year',\n         y = 'Milk produced (lbs)',\n         color = 'Region',\n         title = 'Milk production in four US regions')\n\n\n\n\n\n\n\n\n\nggplot(federal_spending_summary) +\n  geom_area(\n    aes(x = year, y = rd_budget_mil, fill = department)) +\n  scale_y_continuous(\n    expand = expand_scale(mult = c(0, 0.05))) +\n  scale_fill_manual(values = c('grey', 'sienna')) +\n  theme_minimal_hgrid() +\n  labs(\n    x = NULL,\n    y = 'R&D Budget ($ Billions)',\n    fill = 'Department',\n    title = 'Federal R&D spending, 1976 - 2017',\n    subtitle = 'Source: AAAS Historical Trends')\n\n\n\n\n\n\n\n\n\n\nDirect labeling is much better",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>15</span>¬† <span class='chapter-title'>Plot Aesthetics</span>"
    ]
  },
  {
    "objectID": "aesthetics.html#colors",
    "href": "aesthetics.html#colors",
    "title": "15¬† Plot Aesthetics",
    "section": "15.2 Colors",
    "text": "15.2 Colors\n\nColor is hard\nHow do I know what colors look good together?\nUse the color wheel\n\n\n\nImage from this color wheel tool\n\nComplementary: High contrast\n\n\n\n\n\nAnalogous: Calm, harmonious\n\n\n\n\n\nTriadic: Vibrant, contrast\n\n\n\n\n\nArtists use color theory too! Steal colors with the eye dropper tool\n\n\n\nUsing your own colors\nMap color to variable\n\nmpg_plot &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(\n    aes(color = as.factor(cyl)),\n    alpha = 0.8, size = 3) +\n  theme_half_open(font_size = 16) +\n  labs(x = \"Fuel efficiency (mpg)\",\n       y = \"Power (hp)\",\n       color = '# cylinders',\n       title = \"Vehicle fuel efficiency vs. power\",\n       caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\n\n\n\n\n\n\n\n\n\nManually change colors\n\nmpg_plot +\n    scale_color_manual(values = c(\n        '#a0522d', '#522da0', '#2da052'))\n\n\n\n\n\n\n\n\nConsider color blind friendly colors\nSimulate color blindness with colorblindr\n\n# remotes::install_github(\"clauswilke/colorblindr\")\nlibrary(colorblindr)\n\ncvd_grid(mpg_plot_mycolors)\n\n\n\n\nUse palettes\nViridis\n\n\n\nColorBrewer\n\n\n\n3 types of palettes\n\nSequential\n\n \nImage from betterfigures.org\n\nDiverging\n\n \nImage from betterfigures.org\n\nCategorical\n\n \nImage from betterfigures.org\nColorBrewer palettes\nMap color to variable\n\nmpg_plot &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n    geom_point(aes(color = as.factor(cyl)),\n               alpha = 0.8, size = 3) +\n    theme_half_open(font_size = 16) +\n    labs(x = \"Fuel efficiency (mpg)\",\n         y = \"Power (hp)\",\n         color = '# cylinders',\n         title = \"Vehicle fuel efficiency vs. power\",\n         caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\nUse ‚ÄúDark2‚Äù palette\n\nmpg_plot +\n    scale_color_brewer(palette = 'Dark2')\n\n\n\n\n\n\n\n\n\n\nSet1\n\nmpg_plot +\n    scale_color_brewer(\n        palette = 'Set1')\n\n\n\n\n\n\n\n\n\n\nSet2\n\nmpg_plot +\n    scale_color_brewer(\n        palette = 'Set2')\n\n\n\n\n\n\n\n\n\n\nAccent\n\nmpg_plot +\n    scale_color_brewer(\n        palette = 'Accent')\n\n\n\n\n\n\n\n\n\n\nviridis palettes\nMap color to variable\n\nmpg_plot &lt;- ggplot(mtcars, aes(x = mpg, y = hp)) +\n    geom_point(aes(color = as.factor(cyl)),\n               alpha = 0.8, size = 3) +\n    theme_half_open(font_size = 16) +\n    labs(x = \"Fuel efficiency (mpg)\",\n         y = \"Power (hp)\",\n         color = '# cylinders',\n         title = \"Vehicle fuel efficiency vs. power\",\n         caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\nUse viridis colors\n\nmpg_plot +\n    scale_color_viridis(discrete = TRUE)\n\n\n\n\n\n\n\n\n\n\nvirdis\n\nmpg_plot +\n    scale_color_viridis(\n        discrete = TRUE,\n        option = 'viridis')\n\n\n\n\n\n\n\n\n\n\ninferno\n\nmpg_plot +\n    scale_color_viridis(\n        discrete = TRUE,\n        option = 'inferno')\n\n\n\n\n\n\n\n\n\n\nplasma\n\nmpg_plot +\n    scale_color_viridis(\n        discrete = TRUE,\n        option = 'plasma')\n\n\n\n\n\n\n\n\n\n\nFun custom palettes:\nInauguration palette\n\n  \n\nPNWColors\n\n\n\nConsider using color + fill for points\n\nggplot(mtcars, aes(x = mpg, y = hp)) +\n  geom_point(\n    aes(fill = as.factor(cyl)),\n    color = 'white', shape = 21,\n    size = 3.5, alpha = 0.8) +\n  scale_fill_brewer(palette = 'Dark2') +\n  theme_half_open(font_size = 15) +\n  labs(\n    x = \"Fuel efficiency (mpg)\",\n    y = \"Power (hp)\",\n    fill = '# cylinders',\n    title = \"Vehicle fuel efficiency vs. power\",\n    caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\n\n\n\n\n\n\n\nUse grey for ‚ÄúOther‚Äù\n\ndod_spending_plot &lt;- federal_spending %&gt;%\n  mutate(department = fct_other(\n    department, keep = 'DOD')) %&gt;%\n  group_by(department, year) %&gt;%\n  summarise(rd_budget_mil = sum(rd_budget_mil) / 10^3) %&gt;%\n  ungroup() %&gt;%\n  mutate(department = fct_relevel(\n  department, c('Other', 'DOD'))) %&gt;%\n  ggplot() +\n  geom_area(aes(x = year, y = rd_budget_mil,\n                fill = department)) +\n  scale_y_continuous(\n      expand = expand_scale(mult = c(0, 0.05))) +\n  scale_fill_manual(\n    values = c('grey', 'sienna')) +\n  theme_minimal_hgrid() +\n  labs(x = NULL,\n       y = 'R&D Budget ($ Billions)',\n       fill = 'Department',\n       caption = 'Source: AAAS')\n\ndod_spending_plot\n\n\n\n\n\n\n\n\n\n\n\ndod_spending_plot +\n    scale_fill_manual(\n        values = c('grey40', 'sienna'))\n\n\n\n\n\n\n\n\n\n\n\ndod_spending_plot +\n    scale_fill_manual(\n        values = c('grey60', 'sienna'))\n\n\n\n\n\n\n\n\n\n\n\ndod_spending_plot +\n    scale_fill_manual(\n        values = c('grey80', 'sienna'))",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>15</span>¬† <span class='chapter-title'>Plot Aesthetics</span>"
    ]
  },
  {
    "objectID": "aesthetics.html#fonts",
    "href": "aesthetics.html#fonts",
    "title": "15¬† Plot Aesthetics",
    "section": "15.3 Fonts",
    "text": "15.3 Fonts\n\nFonts matter\n\n\n\n\n\n‚ÄúFast Taco‚Äù\n\n\n\n\n\n‚ÄúMega Flicks‚Äù\n\n\n\n\n\n\n\nThe best resource on fonts:\npracticaltypography.com\nSome font families you should consider using:\n\nRoboto\n\n\nSource\n\n\nFira\n\n\nAlegreya\n\n\nLato\n\nDownload:\n\nIndividually from https://fonts.google.com/\nAll of these with this zip file\n\nUse fonts to create hierarchy \n# Hierarchy\n\n## Hierarchy\n\n### Hierarchy\n\n#### Hierarchy",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>15</span>¬† <span class='chapter-title'>Plot Aesthetics</span>"
    ]
  },
  {
    "objectID": "aesthetics.html#hierarchy-1",
    "href": "aesthetics.html#hierarchy-1",
    "title": "15¬† Plot Aesthetics",
    "section": "16.1 Hierarchy",
    "text": "16.1 Hierarchy\n\n16.1.1 Hierarchy\n\n16.1.1.1 Hierarchy\nUse fonts with same-height numbers\n\n\n‚ÄúOldstyle‚Äù (bad)\n\nLining (good)\n\n\n\n\n\nUse fonts with same-width numbers\n\n\n‚ÄúProportional‚Äù (bad)\n\n‚ÄúTabular‚Äù (good)\n\n\n\n\n\n\n\n\n16.1.2 How to customize fonts in ggplot\n1. Change the whole theme\nFor ‚ÄúBase R‚Äù themes, use base_family:\n\ntheme_minimal(base_family = \"Roboto Condensed\")\n\n\ntheme_bw(base_family = \"Roboto Condensed\")\n\nFor ‚Äúcowplot‚Äù themes, use font_family:\n\ntheme_half_open(font_family = \"Roboto Condensed\")\n\n\ntheme_minimal_grid(font_family = \"Roboto Condensed\")\n\nFirst, make the base plot\n\nmpg_plot &lt;- ggplot(mtcars) +\n  geom_point(aes(x = mpg, y = hp)) +\n  theme_minimal(base_size = 15) +\n  labs(\n    x = \"Fuel efficiency (mpg)\",\n    y = \"Power (hp)\",\n    title = \"Vehicle fuel efficiency vs. power\",\n    subtitle = \"Select makes and models\",\n    caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\n\n\n\n\n\n\n\n\n\nUse base_family with base themes\n\nmpg_plot &lt;- ggplot(mtcars) +\n  geom_point(aes(x = mpg, y = hp)) +\n  theme_minimal(\n    base_family = 'Source Sans Pro',\n    base_size = 15) +\n  labs(\n    x = \"Fuel efficiency (mpg)\",\n    y = \"Power (hp)\",\n    title = \"Vehicle fuel efficiency vs. power\",\n    subtitle = \"Select makes and models\",\n    caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\n\n\n\n\n\n\n\n\n\nUse font_family with cowplot themes\n\nmpg_plot &lt;- ggplot(mtcars) +\n  geom_point(aes(x = mpg, y = hp)) +\n  theme_minimal_grid(\n    font_family = 'Source Sans Pro',\n    font_size = 15) +\n  labs(\n    x = \"Fuel efficiency (mpg)\",\n    y = \"Power (hp)\",\n    title = \"Vehicle fuel efficiency vs. power\",\n    subtitle = \"Select makes and models\",\n    caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\n\n\n\n\n\n\n\n\n\n2. Adjust theme elements with element_text()\n\nmpg_plot &lt;- ggplot(mtcars) +\n  geom_point(aes(x = mpg, y = hp)) +\n  theme_minimal_grid(\n    font_family = 'Source Sans Pro',\n    font_size = 15) +\n  theme(\n    plot.title = element_text(\n      family = \"Roboto Condensed\",\n      size = 20)) +\n  labs(\n    x = \"Fuel efficiency (mpg)\",\n    y = \"Power (hp)\",\n    title = \"Vehicle fuel efficiency vs. power\",\n    subtitle = \"Select makes and models\",\n    caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\nmpg_plot\n\n\n\n\n\n\n\n\nSee theme components here\n3. Adjust annotations:\n(Using geom_text(), geom_label(), and/or annotate())\n\nlabel &lt;- \"Higher power engines,\noften come at the expense,\nof fuel economy.\"\n\nmpg_plot +\n    geom_label(\n      data = data.frame(\n        x = 17, y = 270, label = label),\n      aes(x = x, y = y, label = label),\n      lineheight = .8, hjust = 0,\n      family = 'Roboto Condensed')\n\n\n\n\n\n\n\n\nThe hrbrthemes package:\nGreat themes + great fonts\n\nlibrary(hrbrthemes)\n\nmpg_plot &lt;- ggplot(mtcars) +\n  geom_point(aes(x = mpg, y = hp)) +\n  labs(\n    x = \"Fuel efficiency (mpg)\",\n    y = \"Power (hp)\",\n    title = \"Vehicle fuel efficiency vs. power\",\n    subtitle = \"Select makes and models\",\n    caption = \"Source: 1974 Motor Trend U.S. magazine.\")\n\nmpg_plot +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\nmpg_plot +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\nmpg_plot +\n  theme_ipsum_rc()\n\n\n\n\n\n\n\n\n\n\n\nmpg_plot +\n  theme_ft_rc()",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>15</span>¬† <span class='chapter-title'>Plot Aesthetics</span>"
    ]
  },
  {
    "objectID": "anim.html",
    "href": "anim.html",
    "title": "16¬† Animation",
    "section": "",
    "text": "16.1 Animation\nChanges here",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Animation</span>"
    ]
  },
  {
    "objectID": "interact.html",
    "href": "interact.html",
    "title": "17¬† Interactivity",
    "section": "",
    "text": "17.1 Interactivity\nChanges here",
    "crumbs": [
      "Data Visualization",
      "<span class='chapter-number'>17</span>¬† <span class='chapter-title'>Interactivity</span>"
    ]
  },
  {
    "objectID": "part1-getting-started.html",
    "href": "part1-getting-started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Getting Started\ntext",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "part2-exploring.html",
    "href": "part2-exploring.html",
    "title": "Exploring Data",
    "section": "",
    "text": "Exploring Data\ntext",
    "crumbs": [
      "Exploring Data"
    ]
  },
  {
    "objectID": "part3-data-viz.html",
    "href": "part3-data-viz.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Data Visualization\ntext",
    "crumbs": [
      "Data Visualization"
    ]
  }
]