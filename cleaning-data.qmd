# Tidy Data {#sec-chapter}

```{r}
#| echo: false
#| message: false
#| include: false
source("_common.R")

# Read in data
wildlife_impacts <- read_csv(here::here('data', 'wildlife_impacts.csv'))
milk_production  <- read_csv(here::here('data', 'milk_production.csv'))
tb_rates <- table3
tb_cases <- read_csv(here('data', 'tb_cases.csv'))
milk_production <- read_csv(here('data', 'milk_production.csv'))
fed_spend_long <- read_csv(here('data', 'fed_spend_long.csv'))
fed_spend <- fed_spend_long
fed_spend_wide <- read_csv(here('data', 'fed_spend_wide.csv'))
lotr_words <- read_csv(here('data', 'lotr_words.csv'))
pv_cells <- read_excel(
    here('data', 'pv_cell_production.xlsx'),
    sheet = 'Cell Prod by Country', skip = 2) %>%
  mutate(Year = as.numeric(Year)) %>% 
  filter(!is.na(Year)) 

# Add new variables
wildlife_impacts_orig <- wildlife_impacts
wildlife_impacts <- wildlife_impacts %>%
    mutate(
        weekday_name = wday(incident_date, label = TRUE),
        phase_of_flt = str_to_lower(phase_of_flt),
        phase_of_flt = case_when(
            phase_of_flt %in% c('approach', 'arrival', 'descent',
                                'landing roll') ~ 'arrival',
            phase_of_flt %in% c('climb', 'departure',
                                'take-off run') ~ 'departure',
            TRUE ~ 'other'))

# Abbreviations: https://www.50states.com/abbreviations.htm
state_abbs <- tibble::tribble(
                  ~state_name,              ~state_abb,
                     "Alabama",             "AL",
                      "Alaska",             "AK",
                     "Arizona",             "AZ",
                    "Arkansas",             "AR",
                  "California",             "CA",
                    "Colorado",             "CO",
                 "Connecticut",             "CT",
                    "Delaware",             "DE",
                     "Florida",             "FL",
                     "Georgia",             "GA",
                      "Hawaii",             "HI",
                       "Idaho",             "ID",
                    "Illinois",             "IL",
                     "Indiana",             "IN",
                        "Iowa",             "IA",
                      "Kansas",             "KS",
                    "Kentucky",             "KY",
                   "Louisiana",             "LA",
                       "Maine",             "ME",
                    "Maryland",             "MD",
               "Massachusetts",             "MA",
                    "Michigan",             "MI",
                   "Minnesota",             "MN",
                 "Mississippi",             "MS",
                    "Missouri",             "MO",
                     "Montana",             "MT",
                    "Nebraska",             "NE",
                      "Nevada",             "NV",
               "New Hampshire",             "NH",
                  "New Jersey",             "NJ",
                  "New Mexico",             "NM",
                    "New York",             "NY",
              "North Carolina",             "NC",
                "North Dakota",             "ND",
                        "Ohio",             "OH",
                    "Oklahoma",             "OK",
                      "Oregon",             "OR",
                "Pennsylvania",             "PA",
                "Rhode Island",             "RI",
              "South Carolina",             "SC",
                "South Dakota",             "SD",
                   "Tennessee",             "TN",
                       "Texas",             "TX",
                        "Utah",             "UT",
                     "Vermont",             "VT",
                    "Virginia",             "VA",
                  "Washington",             "WA",
               "West Virginia",             "WV",
                   "Wisconsin",             "WI",
                     "Wyoming",             "WY",
        "District of Columbia",             "DC",
            "Marshall Islands",             "MH",
         "Armed Forces Africa",             "AE",
       "Armed Forces Americas",             "AA",
         "Armed Forces Canada",             "AE",
         "Armed Forces Europe",             "AE",
    "Armed Forces Middle East",             "AE",
        "Armed Forces Pacific",             "AP"
)

bad_abbs <- c("MH", "AE", "AA", "AE", "AP")

state_abbs_50 <- state_abbs %>% 
  filter(!state_abb %in% bad_abbs)
```

> ### Learning Objectives {.unnumbered}
>
> * Reshape data between long and wide formats.
> * Wrangle and format data, including dealing with messy Excel files.
> * Merge multiple datasets effectively.
> * Clean, organize, and recode variables.
> * Handle and process date data.

## Merging Data Sets with Joins

To start off, let's take a look at this map. What's wrong with it?

<center>
<img src="images/join_fail.jpg" height=600>
</center>

Clearly, the abbreviations are all mixed up. The likely culprit: merging two columns

```{r, echo=FALSE}
names <- data.frame(state_name = sort(state_abbs_50$state_name))
abbs  <- data.frame(state_abb = sort(state_abbs_50$state_abb))
```
```{r}
head(names)
head(abbs)
```

```{r}
result <- bind_cols(names, abbs)
head(result)
```

As shown above, simply binding or merging two data sets is not the best choice. This is where joins come into play.

There are three types of joins that we can utilize to properly merge data sets.

1. `inner_join()`
2. `left_join()` / `right_join()`
3. `full_join()`

Take a look at the different joins applied to the `band_members` & `band_instruments` data sets.

```{r}
band_members
```

```{r}
band_instruments
```

#### `inner_join()` {.unnumbered}

```{r}
band_members %>%
    inner_join(band_instruments)
```

<center>
<img src="images/inner_join.gif">
</center>

#### `full_join()` {.unnumbered}

```{r}
band_members %>%
    full_join(band_instruments)
```

<center>
<img src="images/full_join.gif">
</center>

#### `left_join()` {.unnumbered}

```{r}
band_members %>%
    left_join(band_instruments)
```

<center>
<img src="images/left_join.gif">
</center>

#### `right_join()` {.unnumbered}

```{r}
band_members %>%
    right_join(band_instruments)
```

<center>
<img src="images/right_join.gif">
</center>

#### We can also specify the joining variable name {.unnumbered}

```{r, echo=TRUE, message=TRUE}
band_members %>%
    left_join(band_instruments)
```

```{r, echo=TRUE, message=TRUE}
band_members %>%
    left_join(
        band_instruments,
        by = 'name' #<<
    )
```

#### If the names differ, use `by = c("left_name" = "joining_name")` {.unnumbered}

```{r}
band_members
```

```{r}
band_instruments2
```

```{r}
band_members %>%
    left_join(
        band_instruments2,
        by = c("name" = "artist") #<<
    ) 
```

Or, just rename the joining variable in a pipe.

```{r}
band_members
```

```{r}
band_instruments2
```

```{r}
band_members %>%
    rename(artist = name) %>% #<<
    left_join(
        band_instruments2,
        by = "artist"  #<<
    )
```

## Variable Types and Names

### Variable Types

#### Always check variable types after reading in data! {.unnumbered}

```{r}
wind <- read_excel(here::here(
  'data', 'US_State_Wind_Energy_Facts_2018.xlsx'))

glimpse(wind)
```

#### Be careful converting strings to numbers! {.unnumbered}

##### `as.numeric()` {.unnumbered}

```{r}
as.numeric(c("2.1", "3.7", "4.50"))
as.numeric(c("$2.1", "$3.7", "$4.50"))
```

##### `parse_number()` {.unnumbered}

```{r}
parse_number(c("2.1", "3.7", "4.50"))
parse_number(c("$2.1", "$3.7", "$4.50"))
parse_number(c("1-800-123-4567"))
```

Once applied we get:

```{r}
wind <- read_excel(here::here(
  'data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %>%
  mutate(
    Ranking = as.numeric(Ranking),#<<
    `Equivalent Homes Powered` = as.numeric(`Equivalent Homes Powered`),#<<
    `Total Investment ($ Millions)` = as.numeric(`Total Investment ($ Millions)`),#<<
    `# of Wind Turbines` = as.numeric(`# of Wind Turbines`) #<<
  )
    
glimpse(wind)
```

<!--
got the content on select() from Suzan Baert:
https://suzan.rbind.io/2018/01/dplyr-tutorial-1/
-->

### Renaming made easy

`janitor::clean_names()`

The `janitor` package is a great tool to "clean" names of columns in data sets.

<center>
<img src="images/janitor_logo.png" width=200>
</center>

If we take the `wind` data ..
```{r}
wind <- read_excel(here::here(
  'data', 'US_State_Wind_Energy_Facts_2018.xlsx'))

glimpse(wind)
```

.. and use janitor, we can easily "clean" the names.
```{r}
library(janitor) #<<

wind <- read_excel(here::here(
  'data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %>%
  clean_names() #<<

glimpse(wind)
```

We can even change the style of the names.
```{r}
library(janitor) #<<

wind <- read_excel(here::here(
  'data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %>%
  clean_names(case = 'lower_camel') #<<

glimpse(wind)
```

```{r}
library(janitor) #<<

wind <- read_excel(here::here(
  'data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %>%
  clean_names(case = 'screaming_snake') #<<

glimpse(wind)
```

#### `select()` : More Powerful Than You Probably Thought {.unnumbered}

Example: data on sleeping patterns of different mammals

```{r}
glimpse(msleep)
```

Use `select()` to choose which columns to **keep**

```{r}
msleep %>%
  select(name:order, sleep_total:sleep_cycle) %>% #<<
  glimpse()
```

Use `select()` to choose which columns to **drop**

```{r}
msleep %>%
  select(-(name:order)) %>%
  glimpse()
```

##### We can also select columns based on **partial column names** {.unnumbered}

For example, we can select columns that start with "sleep":

```{r}
msleep %>%
  select(name, starts_with("sleep")) %>%
  glimpse()
```

Or we can select columns that contain "eep" and end with "wt":

```{r}
msleep %>%
  select(contains("eep"), ends_with("wt")) %>%
  glimpse()
```

##### Use `select()` to select columns based on their **data type** {.unnumbered}

Select only numeric columns:

```{r}
msleep %>%
    select_if(is.numeric) %>%
    glimpse()
```

Select only character columns:

```{r}
msleep %>%
    select_if(is.character) %>%
    glimpse()
```

##### Use `select()` to **reorder** variables {.unnumbered}

```{r}
msleep %>%
    select(everything()) %>%
    glimpse()
```

```{r}
msleep %>%
    select(conservation, awake, everything()) %>%
    glimpse()
```

##### Use `select()` to **rename** variables {.unnumbered}

Use `rename()` to just change the name

```{r}
msleep %>%
  rename( #<<
    animal = name,
    extinction_threat = conservation
  ) %>%
  glimpse()
```

Use `select()` to change the name **and drop everything else**

```{r}
msleep %>%
  select( #<<
    animal = name,
    extinction_threat = conservation
  ) %>%
  glimpse()
```

##### Use `select()` to **rename** variables {.unnumbered}

Use `rename()` to just change the name

```{r}
msleep %>%
  rename( #<<
    animal = name,
    extinction_threat = conservation
  ) %>%
  glimpse()
```

Use `select()` + `everything()` to change names **and keep everything else**

```{r}
msleep %>%
  select( #<<
    animal = name,
    extinction_threat = conservation,
    everything()
  ) %>% #<<
  glimpse()
```

## Recoding Variables

### Recoding with `ifelse()`

Example: Create a variable, `cost_high`, that is `TRUE` if the repair costs were greater than the median costs and `FALSE` otherwise.

```{r}
wildlife_impacts1 <- wildlife_impacts %>%
  rename(cost = cost_repairs_infl_adj) %>%
  filter(!is.na(cost)) %>%
  mutate(
    cost_median = median(cost),
    cost_high = ifelse(cost > cost_median, TRUE, FALSE) #<<
  )

wildlife_impacts1 %>%
  select(cost, cost_median, cost_high) %>%
  head()
```

### Recoding with **nested** `ifelse()`

Create a variable, `season`, based on the `incident_month` variable.

```{r}
wildlife_impacts2 <- wildlife_impacts %>%
  mutate(season = ifelse( #<<
    incident_month %in% c(3, 4, 5), 'spring', ifelse( #<<
    incident_month %in% c(6, 7, 8), 'summer', ifelse( #<<
    incident_month %in% c(9, 10, 11), 'fall', 'winter'))) #<<
  ) 

wildlife_impacts2 %>%
  distinct(incident_month, season) %>%
  head()
```

### Recoding with `case_when()`

Create a variable, `season`, based on the `incident_month` variable.

**Note**: If you don't include the final `TRUE ~ 'winter'` condition, you'll get `NA` for those cases.

```{r}
wildlife_impacts2 <- wildlife_impacts %>%
  mutate(season = case_when( #<<
    incident_month %in% c(3, 4, 5) ~ 'spring', #<<
    incident_month %in% c(6, 7, 8) ~ 'summer', #<<
    incident_month %in% c(9, 10, 11) ~ 'fall', #<<
    TRUE ~ 'winter') #<<
  ) 

wildlife_impacts2 %>%
  distinct(incident_month, season) %>%
  head()
```

#### Recoding with `case_when()` with `between()` {.unnumbered}

Create a variable, `season`, based on the `incident_month` variable.

```{r}
wildlife_impacts2 <- wildlife_impacts %>%
  mutate(season = case_when(
    between(incident_month, 3, 5) ~ 'spring', #<<
    between(incident_month, 6, 8) ~ 'summer', #<<
    between(incident_month, 9, 11) ~ 'fall', #<<
    TRUE ~ 'winter') 
  )

wildlife_impacts2 %>%
    distinct(incident_month, season) %>%
    head()
```

#### `case_when()` is "cleaner" than `ifelse()` {.unnumbered}

Convert the `num_engs` variable into a word of the number.

`ifelse()`

```{r}
wildlife_impacts3 <- wildlife_impacts %>%
  mutate(num_engs = ifelse(
    num_engs == 1, 'one', ifelse(
    num_engs == 2, 'two', ifelse(
    num_engs == 3, 'three', ifelse(
    num_engs == 4, 'four',
    as.character(num_engs)))))
  )

unique(wildlife_impacts3$num_engs)
```

`case_when()`

```{r}
wildlife_impacts3 <- wildlife_impacts %>%
  mutate(num_engs = case_when(
    num_engs == 1 ~ 'one',
    num_engs == 2 ~ 'two',
    num_engs == 3 ~ 'three',
    num_engs == 4 ~ 'four')
  )

unique(wildlife_impacts3$num_engs)
```

### Break a single variable into two with `separate()`

```{r}
tb_rates
```

```{r}
tb_rates %>%
  separate(rate, into = c("cases", "population")) #<<
```

### Break a single variable into two with `separate()`

```{r}
tb_rates
```

```{r}
tb_rates %>%
  separate(
      rate, #<<
      into = c("cases", "population"), #<<
      sep = "/" #<<
  )
```

```{r}
tb_rates
```

```{r}
tb_rates %>%
  separate(
      rate, 
      into = c("cases", "population"),
      sep = "/", 
      convert = TRUE #<<
  )
```

You can also break up a variable by an index

```{r}
tb_rates
```

```{r}
tb_rates %>%
  separate(
      year, 
      into = c("century", "year"), #<<
      sep = 2 #<<
  )
```

### `unite()`: The opposite of `separate()`

```{r}
tb_rates
```

```{r}
tb_rates %>%
  separate(year, into = c("century", "year"),
           sep = 2) %>%
  unite(year_new, century, year) #<<
```

```{r}
tb_rates
```

```{r}
tb_rates %>%
  separate(year, into = c("century", "year"),
           sep = 2) %>%
  unite(year_new, century, year,
        sep = "") #<<
```

## Dealing with Dates Data

<center>
<img src="images/dates.png" width=600>
</center>

### Create Dates from Strings

**order is the ONLY thing that matters!**

#### Year-Month-Day {.unnumbered}

```{r}
ymd('2020-02-26')
```

```{r}
ymd('2020-02-26')
ymd('2020 Feb 26')
```

```{r}
ymd('2020-02-26')
ymd('2020 Feb 26')
ymd('2020 Feb. 26')
ymd('2020 february 26')
```

#### Month-Day-Year {.unnumbered}

```{r}
mdy('February 26, 2020')
mdy('Feb. 26, 2020')
mdy('Feb 26 2020')
```

#### Day-Month-Year {.unnumbered}

```{r}
dmy('26 February 2020')
dmy('26 Feb. 2020')
dmy('26 Feb, 2020')
```

##### Check out the `lubridate` **[cheat sheet](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf)** {.unnumbered}

### Extracting information from dates

```{r}
date <- today()
date
```

```{r}
# Get the year
year(date)
```

```{r}
date <- today()
date
```

```{r}
# Get the year
year(date)

# Get the month
month(date)

# Get the month name
month(date, label = TRUE, abbr = FALSE)
```

```{r}
# Get the day
day(date)

# Get the weekday
wday(date)

# Get the weekday name
wday(date, label = TRUE, abbr = TRUE)
```

### Modifying date elements

```{r}
date <- today()
date
```

```{r}
# Change the year
year(date) <- 2016
date
```

```{r}
# Change the day
day(date) <- 30
```

```{r}
date
```

## Strategies for Dealing with Messy Excel Files

Example: When columns are repeated; like in the data for the winners of Nathan's hot dog eating contest.

### Strategies {.unnumbered}

#### 1. divide & conquer {.unnumbered}
#### 2. pivot long, separate, pivot wide {.unnumbered}

<center>
<img src="images/hot_dogs.png" width=500>
</center>

### Strategy 1: divide & conquer {.unnumbered}

Steps:

1. Read in the data
2. Clean the names
3. Remove `*` note at bottom of table

```{r}
hot_dogs <- read_excel(
    here::here('data', 'hot_dog_winners.xlsx'),
    sheet = 'hot_dog_winners') %>%
    clean_names() %>%
    dplyr::filter(!is.na(mens))

glimpse(hot_dogs)
```

Steps

1. Read in the data
2. Clean the names
3. Remove `*` note at bottom of table
4. **Split data into two competitions with the same variable names**
5. **Create new variable in each data frame: `competition`**

```{r}
hot_dogs_m <- hot_dogs %>%
    select(
        year,
        competitor = mens,
        dogs_eaten = dogs_eaten_3,
        country    = country_4) %>%
    mutate(competition = 'Mens') #<<

hot_dogs_w <- hot_dogs %>%
    select(
        year,
        competitor = womens,
        dogs_eaten = dogs_eaten_6,
        country    = country_7) %>%
    mutate(competition = 'Womens') %>% #<<
    dplyr::filter(!is.na(competitor))
```

Steps

1. Read in the data
2. Clean the names
3. Remove `*` note at bottom of table
4. Split data into two competitions with the same variable names
5. Create new variable in each data frame: `competition`
6. **Merge data together with `bind_rows()`**
7. **Clean up final data frame**

```{r}
hot_dogs <- bind_rows(hot_dogs_m, hot_dogs_w) %>% #<<
    mutate(
        new_record = str_detect(dogs_eaten, "\\*"),
        dogs_eaten = parse_number(dogs_eaten),
        year       = as.numeric(year))

glimpse(hot_dogs)
```


<img src="images/hot_dogs.png" width=500>

```{r}
head(hot_dogs)
```

### Strategy 2: pivot long, separate, pivot wide {.unnumbered}

Steps:

1. Read in the data
2. Clean the names
3. Remove `*` note at bottom of table

```{r}
hot_dogs <- read_excel(
    here::here('data', 'hot_dog_winners.xlsx'),
    sheet = 'hot_dog_winners') %>%
    clean_names() %>%
    dplyr::filter(!is.na(mens))

glimpse(hot_dogs)
```

Steps:

1. Read in the data
2. Clean the names
3. Remove `*` note at bottom of table
4. **Rename variables**
5. **Gather all the "joint" variables**

```{r}
hot_dogs <- hot_dogs %>%
    select(
        year,
        competitor.mens   = mens,
        competitor.womens = womens,
        dogs_eaten.mens   = dogs_eaten_3,
        dogs_eaten.womens = dogs_eaten_6,
        country.mens      = country_4,
        country.womens    = country_7) %>%
    pivot_longer(names_to = 'variable', values_to = 'value',  #<<
           competitor.mens:country.womens)  #<<

head(hot_dogs, 3)
```

Steps:

1. Read in the data
2. Clean the names
3. Remove `*` note at bottom of table
4. Rename variables
5. Gather all the "joint" variables
6. **Separate "joint" variables into components**

```{r}
hot_dogs <- hot_dogs %>%
    separate(variable, into = c('variable', 'competition'),  #<<
             sep = '\\.') #<<

head(hot_dogs)
```

Steps:

1. Read in the data
2. Clean the names
3. Remove `*` note at bottom of table
4. Rename variables
5. Gather all the "joint" variables
6. Separate "joint" variables into components
7. **Spread variable and value back to columns**
8. **Clean up final data frame**

```{r}
hot_dogs <- hot_dogs %>%
    spread(key = variable, value = value) %>% #<<
    mutate(
        new_record = str_detect(dogs_eaten, "\\*"),
        dogs_eaten = parse_number(dogs_eaten),
        year       = as.numeric(year))

glimpse(hot_dogs)
```

<div style="display: flex; justify-content: space-between;">

<div style="flex: 0 0 48%; padding-right: 10px;">

Divide & conquer

```{r, eval=FALSE}
hot_dogs <- read_excel(
    here::here('data', 'hot_dog_winners.xlsx'),
    sheet = 'hot_dog_winners') %>%
    clean_names() %>%
    dplyr::filter(!is.na(mens))

# Divide #<<
hot_dogs_m <- hot_dogs %>% #<<
    select( #<<
        year, #<<
        competitor = mens, #<<
        dogs_eaten = dogs_eaten_3, #<<
        country    = country_4) %>% #<<
    mutate(competition = 'Mens') #<<
hot_dogs_w <- hot_dogs %>% #<<
    select( #<<
        year, #<<
        competitor = womens, #<<
        dogs_eaten = dogs_eaten_6, #<<
        country    = country_7) %>% #<<
    mutate(competition = 'Womens') %>%  #<<
    dplyr::filter(!is.na(competitor)) #<<

# Merge and finish cleaning
hot_dogs <- bind_rows(hot_dogs_m, hot_dogs_w) %>% #<<
    mutate(
        new_record = str_detect(dogs_eaten, "\\*"),
        dogs_eaten = parse_number(dogs_eaten),
        year       = as.numeric(year))
```

</div>
<div style="flex: 0 0 48%; padding-left: 10px;">

Pivot long, separate, pivot wide

```{r, eval=FALSE}
hot_dogs <- read_excel(
    here::here('data', 'hot_dog_winners.xlsx'),
    sheet = 'hot_dog_winners') %>%
    clean_names() %>%
    dplyr::filter(!is.na(mens)) %>%

    # Rename variables #<<
    select( #<<
        year, #<<
        competitor.mens   = mens, #<<
        competitor.womens = womens, #<<
        dogs_eaten.mens   = dogs_eaten_3, #<<
        dogs_eaten.womens = dogs_eaten_6, #<<
        country.mens      = country_4, #<<
        country.womens    = country_7) %>% #<<
    # Gather "joint" variables #<<
    pivot_longer(names_to = 'variable', values_to = 'value', #<<
           competitor.mens:country.womens) %>%  #<<
    # Separate "joint" variables #<<
    separate(variable, into = c('variable', 'competition'), #<<
             sep = '\\.') %>%  #<<
    # Spread "joint" variables #<<
    pivot_wider(names_from = variable, values_from = value) %>% #<<
    # Finish cleaning
    mutate(
        new_record = str_detect(dogs_eaten, "\\*"),
        dogs_eaten = parse_number(dogs_eaten),
        year       = as.numeric(year))
```

</div>
</div>

### Strategies for dealing with **sub-headers** {.unnumbered}

Example: OICA passenger car sales data

<center>
<img src="images/pc_sales.png" width=800>
</center>

Steps:

1. Read in the data, skipping first 5 rows
2. Clean the names

```{r}
pc_sales <- read_excel(
    here::here('data', 'pc_sales_2018.xlsx'),
    sheet = 'pc_sales', skip = 5) %>% #<<
    clean_names() %>%
    rename(country = regions_countries)

glimpse(pc_sales)
```

Steps:

1. Read in the data, skipping first 5 rows
2. Clean the names
3. **Drop bad columns**
4. **Filter out bad rows**

Use **datapasta** to get rows to drop

```{r}
drop <- c(
    'EUROPE', 'EU 28 countries + EFTA',
    'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',
    'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',
    'NAFTA', 'CENTRAL & SOUTH AMERICA',
    'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')

pc_sales <- pc_sales %>%
    select(-c(x2:x4)) %>%       # Drop bad columns
    filter(! country %in% drop, # Drop bad rows #<<
           ! is.na(country))

head(pc_sales)
```

Steps:

1. Read in the data, skipping first 5 rows
2. Clean the names
3. Drop bad columns
4. Filter out bad rows
5. **Gather the year variables**

```{r}
pc_sales <- pc_sales %>%
    pivot_longer(names_to = 'year', values_to = 'num_cars', 
                 cols = x2005:x2018) #<<

head(pc_sales)
```

Steps:

1. Read in the data, skipping first 5 rows
2. Clean the names
3. Drop bad columns
4. Filter out bad rows
5. Gather the year variables
6. **Separate the "x" from the year**

```{r}
pc_sales <- pc_sales %>%
    separate(year, into = c('drop', 'year'), sep = 'x', #<<
             convert = TRUE) #<<

head(pc_sales)
```

Steps:

1. Read in the data, skipping first 5 rows
2. Clean the names
3. Drop bad columns
4. Filter out bad rows
5. Gather the year variables
6. Separate the "x" from the year
7. **Remove the `drop` column**
8. **Finish cleaning**

```{r}
pc_sales <- pc_sales %>%
  select(-drop) %>%  #<<
  mutate(country  = str_to_title(country))

head(pc_sales)
```

##### What if I wanted to keep the continents? {.unnumbered}

### Strategy: Join a new data frame linking country -> continent {.unnumbered}

```{r}
drop <- c(
  'EUROPE', 'EU 28 countries + EFTA',
  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',
  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',
  'NAFTA', 'CENTRAL & SOUTH AMERICA',
  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')

pc_sales <- read_excel(
  here::here('data', 'pc_sales_2018.xlsx'),
  sheet = 'pc_sales', skip = 5) %>%
  clean_names() %>%
  rename(country = regions_countries) %>% 
  select(-c(x2:x4)) %>%       # Drop bad columns
  filter(! country %in% drop, # Drop bad rows
         ! is.na(country)) %>% 
  pivot_longer(
    names_to = 'year', values_to = 'num_cars', 
    cols = x2005:x2018) %>%
  separate(year, into = c('drop', 'year'), sep = 'x',
           convert = TRUE) %>% 
  select(-drop)

head(pc_sales, 3)
```

### Strategy 1: Find another source {.unnumbered}

### Strategy 2: Hand-make it {.unnumbered}

```{r}
pc_regions <- read_csv(here::here(
  "data", "pc_regions.csv"))

head(pc_regions)
```

```{r}
pc_sales <- pc_sales %>% 
  left_join(pc_regions) #<<

head(pc_sales)
```

<img src="images/pc_sales.png" width=800>

```{r}
drop <- c(
  'EUROPE', 'EU 28 countries + EFTA',
  'EU 15 countries + EFTA', 'EUROPE NEW MEMBERS',
  'RUSSIA, TURKEY & OTHER EUROPE', 'AMERICA',
  'NAFTA', 'CENTRAL & SOUTH AMERICA',
  'ASIA/OCEANIA/MIDDLE EAST', 'AFRICA', 'ALL COUNTRIES')

pc_regions <- read_csv(here::here("data", "pc_regions.csv"))

pc_sales <- read_excel(
  here::here('data', 'pc_sales_2018.xlsx'),
  sheet = 'pc_sales', skip = 5) %>%
  clean_names() %>%
  rename(country = regions_countries) %>% 
  select(-c(x2:x4)) %>%       # Drop bad columns
  filter(! country %in% drop, # Drop bad rows
         ! is.na(country)) %>% 
  pivot_longer(
    names_to = 'year', values_to = 'num_cars', 
    cols = x2005:x2018) %>%
  separate(year, into = c('drop', 'year'), sep = 'x',
           convert = TRUE) %>% 
  select(-drop) %>% 
  left_join(pc_regions) %>% 
  mutate(
    country  = str_to_title(country), 
    region  = str_to_title(region), 
    subregion  = str_to_title(subregion))

head(pc_sales)
```
