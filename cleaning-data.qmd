# Cleaning Data {#sec-chapter}

```{r}
#| echo: false
#| message: false
#| include: false

suppressWarnings(suppressMessages(source("_common.R")))
```

> ### Learning Objectives {.unnumbered}
>
> * Merge multiple datasets effectively with joins.
> * Clean, organize, and recode variables.
> * Handle and process date data.

## Merging Data Sets with Joins

Let's say we have two data sets: state names, and state abbreviations. Now we want to merge them into a data frame so that the state names and abbreviations are in the same row. 

```{r}
#| echo: false

names <- data.frame(state_name = sort(state_abbs_50$state_name))
abbs  <- data.frame(state_abb = sort(state_abbs_50$state_abb))
```
```{r}
head(names)
head(abbs)
```

We might be tempted to simply merge the two data sets using `bind_cols()`, like this:

```{r}
result <- bind_cols(names, abbs)
head(result)
```

While this _looks_ like it works, if you look closely, you'll see that the state abbreviations are all mixed up (e.g., Alabama and Alaska are swapped). 

This is where joins come into play.

::: {.callout-note}

Joining is a way to combine two data sets based on a common variable.

:::

There are three types of joins that we can utilize to properly merge data sets.

1. `inner_join()`
2. `left_join()` / `right_join()`
3. `full_join()`

We'll take a look at the different joins applied to the `band_members` & `band_instruments` data sets.

```{r}
band_members
band_instruments
```

### `inner_join()`

In inner joins, only the rows that have a match on the common variable are kept. This gif illustrates the inner join:

<center>
<img src="images/inner_join.gif">
</center>

Applied to our example, we get:

```{r}
band_members %>%
    inner_join(band_instruments)
```

### `full_join()`

In full joins, all rows from both data sets are kept. This gif illustrates the full join:

<center>
<img src="images/full_join.gif">
</center>

Applied to our example, we get:

```{r}
band_members %>%
    full_join(band_instruments)
```

Note here that `NA` values are introduced for the missing matches.

### `left_join()`

In left joins, all rows from the left data set are kept. This gif illustrates the left join:

<center>
<img src="images/left_join.gif">
</center>

Applied to our example, we get:

```{r}
band_members %>%
    left_join(band_instruments)
```

Here we get an `NA` for Mick Stones as we don't know what instrument he plays (he is not in the `band_instruments` data set).

### `right_join()`

Right joins are just the opposite of left joins. All rows from the right data set are kept. This gif illustrates the right join:

<center>
<img src="images/right_join.gif">
</center>

Applied to our example, we get:

```{r}
band_members %>%
    right_join(band_instruments)
```

### We can also specify the joining variable name

If you don't specify the joining variable name, R will use the first variable name that appears in both data sets:

```{r}
#| echo: true
#| message: true

band_members %>%
    left_join(band_instruments)
```

Here you see the message `` Joining with `by = join_by(name)` ``, because R realized that the `name` variable appears in each dataset. 

We can be more explicit by specifying the joining variable name, like this:

```{r}
#| echo: true
#| message: true

band_members %>%
    left_join(
        band_instruments,
        by = 'name'
    )
```

Here we get no message because we told R which variable to use to join.

### What if the names differ?

If the matching column has a different name in each data frame, use `by = c("left_name" = "joining_name")` to specify the correct joining name.

For example, in the two data frames below we have `name` in one of them and `artist` in the other. Since these don't match, R won't know which column to use by default to do the join. Here is how we can tell it that these two columns should be used for matching:

```{r}
band_members
```

```{r}
band_instruments2
```

```{r}
band_members %>%
  left_join(
    band_instruments2,
    by = c("name" = "artist")
  ) 
```

We can also just rename the joining variable before joining, like this:

```{r}
band_members %>%
  rename(artist = name) %>%
  left_join(
    band_instruments2,
    by = "artist"
  )
```

## Variable Types and Names

### Fixing Variable Types

::: {.callout-important}

Always check variable types after reading in data!

:::

A lot of times variables get encoded into a data type that is not what you would want after reading in an external data file. Take a look at this data set:

```{r}
wind <- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx'))

glimpse(wind)
```

Here we see that many variables that should be numeric are actually characters (e.g. `Ranking`, `Equivalent Homes Powered`, `Total Investment ($ Millions)`, and `# of Wind Turbines`).

To address this, one of the first things we usually do is convert incorrect data types to the appropriate ones, like this:

```{r}
wind <- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %>%
  mutate(
    Ranking = as.numeric(Ranking),
    `Equivalent Homes Powered` = as.numeric(`Equivalent Homes Powered`),
    `Total Investment ($ Millions)` = as.numeric(`Total Investment ($ Millions)`),
    `# of Wind Turbines` = as.numeric(`# of Wind Turbines`)
  )
    
glimpse(wind)
```

::: {.callout-important}

Be careful converting strings to numbers!

:::

If you use `as.numeric()` (as we did above), you can get NAs if there are any non-numeric characters in the data. For example:

::: {.grid}

::: {.g-col-6}

This works great:

```{r}
as.numeric(c("2.1", "3.7", "4.50"))
```

:::

::: {.g-col-6}

The `$` symbol breaks this:

```{r}
as.numeric(c("$2.1", "$3.7", "$4.50"))
```

:::

:::


A solution is to use `parse_number()` instead, which parses strings for numbers:

::: {.grid}

::: {.g-col-6}

This works great:

```{r}
parse_number(c("2.1", "3.7", "4.50"))
```

:::

::: {.g-col-6}

The `$` symbol breaks this:

```{r}
parse_number(c("$2.1", "$3.7", "$4.50"))
```

:::

:::

### Fixing variable names

You might also notice that the variables names in the `wind` dataset are long and messy:

```{r}
wind <- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx'))

names(wind)
```

We can easily fix these with `janitor::clean_names()`:

```{r}
library(janitor)

wind <- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %>%
  clean_names()

names(wind)
```

We can even specify the style of the names:

```{r}
library(janitor)

wind <- read_excel(here::here('data', 'US_State_Wind_Energy_Facts_2018.xlsx')) %>%
  clean_names(case = 'lower_camel')

names(wind)
```

## Using `select()` to rename and reorder variables

Here's an example data set on the sleeping patterns of different mammals:

```{r}
glimpse(msleep)
```

The primary use of `select()` is to choose which columns to **keep** or drop:


::: {.grid}

::: {.g-col-6}

Selecting variables to **keep**

```{r}
msleep %>%
  select(name:order, sleep_total:sleep_cycle) %>%
  glimpse()
```

:::

::: {.g-col-6}

Selecting variables to **drop**

```{r}
msleep %>%
  select(-(name:order)) %>%
  glimpse()
```

:::

:::

We can also select columns based on **partial column names**

For example, we can select columns that start with "sleep":

```{r}
msleep %>%
  select(name, starts_with("sleep")) %>%
  glimpse()
```

Or we can select columns that contain "eep" and end with "wt":

```{r}
msleep %>%
  select(contains("eep"), ends_with("wt")) %>%
  glimpse()
```

You can also use `select()` to select columns based on their **data type**

::: {.grid}

::: {.g-col-6}

Select only **numeric** columns:

```{r}
msleep %>%
    select_if(is.numeric) %>%
    glimpse()
```


:::

::: {.g-col-6}

Select only **character** columns:

```{r}
msleep %>%
    select_if(is.character) %>%
    glimpse()
```

:::

:::

You can also use `select()` to **reorder** variables. The key is to use `everything()`, which tells R to keep all the other variables in the data frame. 

For example, if we wanted to move the `conservation` and `awake` variables to the first two columns, we could do this:

```{r}
msleep %>%
    select(conservation, awake, everything()) %>%
    glimpse()
```

You can also use `select()` to **rename** variables. 

The pattern here is `new = old`:

```{r}
msleep %>%
  select(
    animal = name,
    extinction_threat = conservation
  ) %>%
  glimpse()
```

Notice however that this drops everything else. 

If you wanted to just rename them but keep all other variables, use `rename()`:

```{r}
msleep %>%
  rename(
    animal = name,
    extinction_threat = conservation
  ) %>%
  glimpse()
```

## Recoding Variables

### Recoding with `ifelse()`

The `ifelse()` function takes the pattern:

```
if <condition>, <value if condition is TRUE>, <value if condition if FALSE>
```

Example: Create a variable, `cost_high`, that is `TRUE` if the repair costs were greater than the median costs and `FALSE` otherwise.

```{r}
wildlife_impacts1 <- wildlife_impacts %>%
  rename(cost = cost_repairs_infl_adj) %>%
  filter(!is.na(cost)) %>%
  mutate(
    cost_median = median(cost),
    cost_high = ifelse(cost > cost_median, TRUE, FALSE)
  )

wildlife_impacts1 %>%
  select(cost, cost_median, cost_high) %>%
  head()
```

### Recoding with **nested** `ifelse()`

Often times you may want to make a category variable that takes different values based on different conditions. You can "nest" multiple `ifelse()` statements to achieve this.

For example, let's say we wanted to create a variable, `season`, based on the `incident_month` variable. We could do this like so:

```{r}
wildlife_impacts2 <- wildlife_impacts %>%
  mutate(season = ifelse(
    incident_month %in% c(3, 4, 5), 'spring', ifelse(
    incident_month %in% c(6, 7, 8), 'summer', ifelse(
    incident_month %in% c(9, 10, 11), 'fall', 'winter')))
  ) 

wildlife_impacts2 %>%
  distinct(incident_month, season) %>%
  head()
```

Here we're entering into another `ifelse()` statement as the "else" condition of an earlier condition. 

### Recoding with `case_when()`

You can achieve the same thing as the example about usin ghte `case_when()` function, which produces slightly cleaner code.

**Note**: If you don't include the final `TRUE ~ 'winter'` condition, you'll get `NA` for those cases.

```{r}
wildlife_impacts2 <- wildlife_impacts %>%
  mutate(season = case_when(
    incident_month %in% c(3, 4, 5) ~ 'spring',
    incident_month %in% c(6, 7, 8) ~ 'summer',
    incident_month %in% c(9, 10, 11) ~ 'fall',
    TRUE ~ 'winter')
  ) 

wildlife_impacts2 %>%
  distinct(incident_month, season) %>%
  head()
```

### Recoding with `case_when()` and `between()`

Here's another approach to achieve the same thing but using the `between()` function to note any months between a start and end month:

```{r}
wildlife_impacts2 <- wildlife_impacts %>%
  mutate(season = case_when(
    between(incident_month, 3, 5) ~ 'spring',
    between(incident_month, 6, 8) ~ 'summer',
    between(incident_month, 9, 11) ~ 'fall',
    TRUE ~ 'winter') 
  )

wildlife_impacts2 %>%
    distinct(incident_month, season) %>%
    head()
```

### Break a single variable into two with `separate()`

The `tb_rates` data set contains information on tuberculosis rates in different countries. It looks like this:

```{r}
tb_rates
```

We can break the `rate` variable into two separate variables, `cases` and `population`, using the `separate()` function:

```{r}
tb_rates %>%
  separate(rate, into = c("cases", "population"))
```

You can also specify the separator:

```{r}
tb_rates %>%
  separate(
      rate,
      into = c("cases", "population"),
      sep = "/"
  )
```

You can also convert the new variables to numeric by adding `convert = TRUE`:

```{r}
tb_rates %>%
  separate(
    rate, 
    into = c("cases", "population"),
    sep = "/", 
    convert = TRUE
  )
```

## Dealing with Dates Data

Dates are notoriously annoying to deal with.

<center>
<img src="images/dates.png" width=600>
</center>

### Create Dates from Strings

To deal with dates, we'll use the `lubridate` package. 

::: {.callout-note}

Check out the `lubridate` **[cheat sheet](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf)**

:::

The key concept to remember with `lubridate` is:

**order is the ONLY thing that matters!**

The package has special functions that convert date strings into formal date formats. The function names are based on the order of the date:

::: {.grid}

::: {.g-col-4}

Year-Month-Day

```{r}
ymd('2020-02-26')
ymd('2020 Feb 26')
ymd('2020 Feb. 26')
ymd('2020 february 26')
```

:::

::: {.g-col-4}

Month-Day-Year

```{r}
mdy('February 26, 2020')
mdy('Feb. 26, 2020')
mdy('Feb 26 2020')
```

:::

::: {.g-col-4}

Day-Month-Year

```{r}
dmy('26 February 2020')
dmy('26 Feb. 2020')
dmy('26 Feb, 2020')
```

:::

:::

### Extracting information from dates

The `today()` function returns the current date:

```{r}
date <- today()
date
```

You can extract different components of the date using the `year()`, `month()`, and `day()` functions:
```{r}

year(date)
month(date)
day(date)
```

You can also get the month name in a specific format using the `month()` function:

```{r}
month(date, label = TRUE, abbr = FALSE)
```

You can also get the weekday name in a specific format using the `wday()` function:

```{r}
wday(date)
wday(date)
wday(date, label = TRUE, abbr = TRUE)
```

The same functions can also be used to modify elements of dates:

```{r}
date <- today()
date

# Change the year
year(date) <- 2016
date 

# Change the day
day(date) <- 30
date
```
