# Tidy Data {#sec-chapter}

```{r}
#| echo: false
#| message: false
#| include: false

suppressWarnings(suppressMessages(source("_common.R")))
```

> ### Learning Objectives {.unnumbered}
>
> * Understand the concept of tidy data (wide and long formats).
> * Be able to reshape data between long and wide formats.
> * Understand the benefits of using tidy data for data manipulation, visualization, and analysis.

## "Wide" and "Long" Formatted Data

Datasets are usually structured in one of two ways:

- **Wide** format: each variable has its own column
- **Long** format: each observation has its own row

<center>
<img src="images/data-shapes.png" width=500>
</center>

[[Source](https://tavareshugo.github.io/r-intro-tidyverse-gapminder/09-reshaping/index.html)]{.aside}

Take a look at this example of a dataset on federal R&D spending by U.S. government department:

```{r}
fed_spend_wide <- read_csv(here('data', 'fed_spend_wide.csv'))

head(fed_spend_wide)
```

As the name suggests, this dataset is in **wide** format, where each department is a column. 

Compare this to the **long** format:

```{r}
fed_spend_long <- read_csv(here('data', 'fed_spend_long.csv'))

head(fed_spend_long)
```

This is the same dataset, but in **long** format, where each observation has its own row. Here you will notice that the department names are now variables, and the R&D spending is a single column. The year is repeated for each department.

**How do we know which format a dataset is in?**

A helpful heuristic is to ask yourself:


::: {.callout-tip}

**Do the names describe the values?**

:::

- If **Yes**: "Long" format
- If **No**: "Wide" format

## Tidy data = "Long" format

When we refer to "tidy data", we are referring to data in **long** format that follows the "tidy" principles:

- Each **variable** has its own **column**
- Each **observation** has its own **row**

<center>
<img src="images/tidy-data.png" width = "600">
</center>

You can verify that the federal spending dataset is in long format:

```{r}
head(fed_spend_long)
```

## Reshaping data

We use the `pivot_longer()` and `pivot_wider()` functions to reshape data between long and wide formats.

<center>
<img src="images/data-pivot.png" width=600>
</center>

[[Source](https://tavareshugo.github.io/r-intro-tidyverse-gapminder/09-reshaping/index.html)]{.aside}

### From "long" to "wide" with `pivot_wider()`

```{r}
head(fed_spend_long)
```

To convert to wide format, we need to specify which column to convert into the column names and which column to convert into the column values:

```{r}
fed_spend_wide <- fed_spend_long %>%
  pivot_wider(
    names_from = department,
    values_from = rd_budget_mil
  )

head(fed_spend_wide)
```

### From "wide" to "long" with `pivot_longer()`

```{r}
head(fed_spend_wide)
```

To convert to long format, we need to create new column names for the names and values, and we also need to specify which columns to convert:

```{r}
fed_spend_long <- fed_spend_wide %>%
  pivot_longer( 
    names_to = "department",
    values_to = "rd_budget_mil",
    cols = DOD:Other
  )

head(fed_spend_long)
```

You can also set `cols` by selecting which columns _not_ to use, like this:

```{r}
fed_spend_long <- fed_spend_wide %>%
  pivot_longer(
    names_to = "department", 
    values_to = "rd_budget_mil",
    cols = -year
  )

head(fed_spend_long)
```

## Tidy data wrangling

There's a good reason why we like to keep our data in a long (tidy) format: it lets us use a consistent set of functions for manipulating, summarizing, and visualizing data.

Here's a quick explanation with cute graphics, by [Allison Horst](https://github.com/allisonhorst/stats-illustrations):

<center>
<img src="images/horst_tidydata_1.jpg" width=700>
<img src="images/horst_tidydata_2.jpg" width=700>
<img src="images/horst_tidydata_3.jpg" width=700>
</center>

### Example 1: Total R&D spending in each year

This is a simple enough task, but with our data in wide format, we need to add each column manually like this:

```{r}
fed_spend_wide %>%
  mutate(total = DHS + DOC + DOD + DOE + DOT + EPA + HHS + Interior + NASA + NIH + NSF + Other + USDA + VA) %>%
  select(year, total)
```

This is cumbersome, and prone to error. 

An alternative approach is to embrace the tidy data format. We'll use `pivot_longer()` to convert the data into long format first, and then we'll summarise the data:

```{r}
fed_spend_long <- fed_spend_wide %>%
  pivot_longer(
    names_to = "department", 
    values_to = "rd_budget_mil",
    cols = -year
  ) 

head(fed_spend_long)
```

Now that our data is in long format, we can use the `group_by()` and `summarise()` functions to compute the total R&D spending in each year:

```{r}
fed_spend_long %>%
  group_by(year) %>%
  summarise(total = sum(rd_budget_mil))
```

This is a much cleaner approach, and it's much less prone to error as we don't need to manually specify each column that we are summing.

### Example 2: Visualizing total spending by department

Let's see how we can do this with our data in wide format:

```{r}
head(fed_spend_wide)
```

```{r}
#| error: true

ggplot(fed_spend_wide) +
  geom_col(aes(x = rd_budget_mil, y = department)) +
  theme_bw() +
  labs(
      x = "R&D Spending ($Millions)",
      y = "Federal Agency"
  )
```

In wide format, we actually cannot plot the total by department, because there is no `department` variable!

Here we must first convert to long format, and then we can plot the data:

```{r}
#| label: fed-spend-bars-long
#| fig-width: 6
#| fig-height: 4

fed_spend_wide %>%
  pivot_longer(
    names_to = "department",
    values_to = "rd_budget_mil",
    cols = -year
  ) %>%
  ggplot() +
  geom_col(aes(x = rd_budget_mil, y = reorder(department, rd_budget_mil))) +
  theme_bw() +
  labs(
    x = "R&D Spending ($Millions)",
    y = "Federal Agency"
  )
```
