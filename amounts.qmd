# Amounts {#sec-chapter}

```{r}
#| echo: false
#| message: false
#| include: false
source("_common.R")

# Set main plot theme
theme_set(theme_cowplot(font_size = 20))

# Read in data
milk_production  <- read_csv(here::here('data', 'milk_production.csv'))
global_temps     <- read_csv(here::here('data', 'nasa_global_temps.csv'))
hotdogs          <- read_csv(here::here('data', 'hot_dog_winners.csv'))
internet_country <- read_csv(here::here('data', 'internet_users_country.csv'))
internet_region  <- read_csv(here::here('data', 'internet_users_region.csv'))
us_diseases      <- read_csv(here::here('data', 'us_contagious_diseases.csv'))
us_covid         <- read_csv(here::here('data', 'us_covid.csv'))
avengers         <- read_csv(here::here('data', 'avengers.csv'))
bears            <- read_csv(here::here('data', 'north_america_bear_killings.csv'))
federal_spending <- read_csv(here::here('data', 'fed_spending_long.csv'))
gapminder        <- read_csv(here::here('data', 'gapminder.csv'))
lotr_words       <- read_csv(here::here('data', 'lotr_words_temp.csv'))
wildlife_impacts <- read_csv(here::here('data', 'wildlife_impacts.csv'))
milk_summary_2017 <- milk_production %>%
  filter(year == 2017) %>%
  mutate(state = fct_other(state,
    keep = c('California', 'Wisconsin'))) %>%
  group_by(state) %>%
  summarise(milk_produced = sum(milk_produced)) %>%
  mutate(milk_produced = milk_produced / 10^9)
```

## Manipulating Factors

Sorting in ggplot is done by reordering factors

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
<img src="images/check-bad.png" width=80>
<img src="figs/federal_spending_bars_unsorted.png" width=350>
</div>

<div style="flex: 1; margin-right: 10px;">
<img src="images/check-good.png" width=80>
<img src="figs/federal_spending_bars.png" width=350>
</div>

</div>

**Two ways to sort**

**Method 1**: Use `reorder()` inside aesthetic mapping

```{r}
# Format the data frame
federal_spending %>%
  group_by(department) %>%
  summarise(
    rd_budget_bil = sum(rd_budget_mil) / 10^3) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(
      x = rd_budget_bil,
      y = reorder(department, rd_budget_bil)
    ), 
    width = 0.7, alpha = 0.8,
    fill = "steelblue"
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

**Method 2**: Use `fct_reorder()` when formatting the data frame

```{r fct_reorder}
# Format the data frame
federal_spending %>%
  group_by(department) %>%
  summarise(
    rd_budget_bil = sum(rd_budget_mil) / 10^3) %>%
  mutate(
    department = fct_reorder(department, rd_budget_bil)
  ) %>%
# Make the chart
  ggplot() +
  geom_col(
    aes(x = rd_budget_bil, y = department),
    width = 0.7, alpha = 0.8,
    fill = "steelblue"
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

**Reorder & modify factors with<br>the **forcats** library**

Loaded with `library(tidyverse)`

<center>
<img src="images/forcats.png" width=600>
</center>

### Common situations for modifying / reording factors: <br/>
1. Reorder factors based on another numerical variable<br/>
2. Reorder factors manually<br/>
3. Modify factors manually<br/>
4. What if there are too many factor levels?<br/>

#### 1. Reorder factors based on another **numerical variable**

Use `fct_reorder()`

```{r, ref.label="fct_reorder", fig.show='hide'}
```
<center>
<img src="figs/federal_spending_bars.png" width = 700>
<center>

#### 2. Reorder factors **manually**

```{r lotr_bars, eval=FALSE}
# Format the data frame
lotr_words %>%
  pivot_longer(
      names_to = 'gender', 
      values_to = 'wordCount',
      cols = Female:Male) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(x = wordCount, y = Film),
    width = 0.7, alpha = 0.8
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```
<center>
<img src="figs/lotr_bars.png" width = 700>
<center>

#### 2. Reorder factors **manually** with `fct_relevel()`

```{r fct_relevel, eval=FALSE}
# Format the data frame
lotr_words %>%
  pivot_longer(
      names_to = 'gender', 
      values_to = 'wordCount',
      cols = Female:Male) %>%
  mutate(
    Film = fct_relevel(Film, levels = c(
      'The Fellowship Of The Ring',
      'The Two Towers',
      'The Return Of The King'))) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(x = wordCount, y = Film),
    width = 0.7, alpha = 0.8
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```
<center>
<img src="figs/lotr_bars_relevel.png">
<center>

#### 3. Modify factors manually

```{r, ref.label="lotr_bars", fig.show='hide'}
```

The film names here are too long:
<center>
<img src="figs/lotr_bars.png">
<center>

#### 3. Modify factors manually with `fct_recode()`

`"new label" = "old label"`
```{r, eval=FALSE}
# Format the data frame
lotr_words %>%
  pivot_longer(
      names_to = 'gender', 
      values_to = 'wordCount',
      cols = Female:Male) %>%
  mutate(
    Film = fct_recode(Film,
      'The Fellowship\nof the Ring' = 'The Fellowship Of The Ring',
      'The Return\nof the King' = 'The Return Of The King')) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(x = wordCount, y = Film),
    width = 0.7, alpha = 0.8
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```
<center>
<img src="figs/lotr_bars_recode.png">
<center>

#### 2 & 3. Modify and reorder factors manually

```{r, eval=FALSE}
# Format the data frame
lotr_words %>%
  pivot_longer(
      names_to = 'gender', 
      values_to = 'wordCount',
      cols = Female:Male) %>% 
  mutate(
    Film = fct_relevel(Film, levels = c(
      'The Fellowship Of The Ring',
      'The Two Towers',
      'The Return Of The King')),
    Film = fct_recode(Film,
      'The Fellowship\nof the Ring' = 'The Fellowship Of The Ring',
      'The Return\nof the King' = 'The Return Of The King')) %>%

# Make the chart
  ggplot() +
  geom_col(
      aes(x = wordCount, y = Film),
      width = 0.7, alpha = 0.8
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

<center>
<img src="figs/lotr_bars_relevel_recode.png">
<center>

#### 4. What if there are too many factor levels?

```{r, ref.label="fct_reorder", fig.show='hide'}
```

<center>
<img src="figs/federal_spending_bars.png">
<center>

**Strategy**: Merge smaller factors into "Other" with `fct_other()`
```{r, eval=FALSE}
# Format the data frame
federal_spending %>%
  mutate(
    department = fct_other(department,
      keep = c('DOD', 'HHS', 'NIH', 'NASA', 'DOE'))) %>%
  group_by(department) %>%
  summarise(
    rd_budget_bil = sum(rd_budget_mil) / 10^3) %>%
  mutate(
    department = fct_reorder(department, rd_budget_bil)) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(x = rd_budget_bil, y = department),
    width = 0.7, alpha = 0.8,
    fill = "steelblue"
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

<center>
<img src="figs/federal_spending_bars_top5.png" width=500>
</center>

#### 4. What if there are _really_ too many factor levels?

```{r, eval=FALSE}
# Format the data frame
avengers %>%
  mutate(
    name_alias = fct_reorder(name_alias, appearances)) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(x = appearances,y = name_alias),
    width = 0.7, alpha = 0.8
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

<center>
<img src="figs/avengers_bars.png" width=500>
</center>

**Strategy**: Keep top N, drop the rest with `slice()`
```{r, eval=FALSE}
# Format the data frame
avengers %>%
  mutate(
    name_alias = fct_reorder(name_alias, appearances)) %>%
  arrange(desc(appearances)) %>%
  slice(1:10) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(x = appearances, y = name_alias),
    width = 0.7, alpha = 0.8
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

<center>
<img src="figs/avengers_bars_top10.png" width=450>
</center>

`slice()` works with grouping too!
```{r, eval=FALSE}
# Format the data frame
avengers %>%
  mutate(
    name_alias = fct_reorder(name_alias, appearances)) %>%
  arrange(desc(appearances)) %>%
  group_by(gender) %>%
  slice(1:10) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(
      x = appearances, 
      y = name_alias,
      fill = gender
    ),
    width = 0.7, alpha = 0.8
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

<center>
<img src="figs/avengers_bars_top10_gender.png" width=450>
</center>

## Graphing Amounts

**Show amounts with:**

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
<img src="images/bar.png" width=350>
**Bar charts**
<img src="figs/federal_spending_bars.png"width=350>
</div>

<div style="flex: 1; margin-right: 10px;">
<img src="images/dots.png" width=350>
**Dot charts**
<img src="figs/federal_spending_dots.png"width=350>
</div>

<div style="flex: 1; margin-right: 10px;">
<img src="images/lollipop_rotated.png" width=330>
**Lollipop charts**
<img src="figs/federal_spending_lollipop.png"width=350>
</div>

</div>

### Bars

**Bars are good for highlighting specific categories**

<center>
<img src="figs/federal_spending_bars_highlight_title.png" width=700>
<center>

### Lollipops

**Use lollipops when:**

- The bars are overwhelming<br> - You're not highlighting categories

<!-- Idea from https://www.data-to-viz.com/graph/lollipop.html -->

<center>
<img src="figs/life_expectancy_bars.png" width=700>
<center>

<center>
<img src="figs/life_expectancy_lollipop.png" width=700>
<center>

### Dots

**Or use dots and don't set axis to 0**

<center>
<img src="figs/life_expectancy_lollipop.png" width=700>
<center>

<center>
<img src="figs/life_expectancy_dots.png" width=700>
<center>


### How to make a **Bar chart**

```{r, eval=FALSE}
# Summarize the data
federal_spending %>%
  group_by(department) %>%
  summarise(rd_budget_bil = sum(rd_budget_mil) / 10^3) %>%
  mutate(department = fct_reorder(department, rd_budget_bil)) %>%

# Make chart
  ggplot() +
  geom_col(
    aes(x = rd_budget_bil, y = department),
    width = 0.7, alpha = 0.8,
    fill = 'steelblue') +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid()
```

<center>
<img src="figs/federal_spending_bars.png">
<center>

**Filling the bars with color:**

```{r, eval=FALSE}
# Summarize the data
federal_spending %>%
  group_by(department) %>%
  summarise(rd_budget_bil = sum(rd_budget_mil) / 10^3) %>%
  mutate(
    department = fct_reorder(department, rd_budget_bil),
    is_dod = if_else(
      department == 'DOD', TRUE, FALSE)) %>%

# Make the chart
  ggplot() +
  geom_col(
    aes(x = rd_budget_bil, y = department, 
        fill = is_dod),
    width = 0.7, alpha = 0.8) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  scale_fill_manual(values = c('grey', 'steelblue')) +
  theme_minimal_vgrid() +
  theme(legend.position = 'none')
```

The DOD's R&D budget is nearly the same as all other departments combined

<center>
<img src="figs/federal_spending_bars_highlight.png">
<center>

### How to make a **Dot chart**

Summarize data frame:

```{r, eval=FALSE}
# Summarize the data
federal_spending %>%
  group_by(department) %>%
  summarise(
    rd_budget_bil = sum(rd_budget_mil) / 10^3) %>%
  mutate(
    department = fct_reorder(department, rd_budget_bil)) %>%

# Make the chart
  ggplot() +
  geom_point(
    aes(x = rd_budget_bil, y = department),
    size = 2.5, color = 'steelblue') +
  theme_minimal_vgrid()
```

**Dot chart** of federal R&D spending by department

<center>
<img src="figs/federal_spending_dots.png">
<center>

### How to make a **Lollipop chart**

Summarize data frame:

```{r, eval=FALSE}
# Summarize the data
federal_spending %>%
  group_by(department) %>%
  summarise(
    rd_budget_bil = sum(rd_budget_mil) / 10^3) %>%
  mutate(
    department = fct_reorder(department, rd_budget_bil)) %>%

# Make the chart
  ggplot() +
  geom_segment(
    aes(x = 0, xend = rd_budget_bil,
        y = department, yend = department),
    color = 'grey') +
  geom_point(
    aes(x = rd_budget_bil, y = department),
    size = 2.5, color = 'steelblue') +
  theme_minimal_vgrid()
```

**Lollipop chart** of federal R&D spending by department

<center>
<img src="figs/federal_spending_lollipop.png">
<center>
