# Comparisons {#sec-chapter}

```{r}
#| echo: false
#| message: false
#| include: false
source("_common.R")

# Read in data sets
college_all_ages <- read_csv(here('data', 'college_all_ages.csv'))
gapminder        <- read_csv(here('data', 'gapminder.csv'))
marathon         <- read_csv(here('data', 'marathon.csv'))
milk_production  <- read_csv(here('data', 'milk_production.csv'))
internet_regions <- read_csv(here('data', 'internet_users_region.csv'))

# Processed data
milk_compare <- milk_production %>%
  filter(year %in% c(1970, 2017)) %>%
  mutate(state = fct_other(state,
    keep = c('California', 'Wisconsin'))) %>%
  group_by(year, state) %>%
  summarise(milk_produced = sum(milk_produced) / 10^9)

# Set plot themes
theme_set(theme_gray(base_size = 18))
```

## Comparing to a Reference

### Using Reference Lines
**For this section, we'll be using this data frame:**

```{r}
gapminder_americas <- gapminder %>%
  filter(continent == "Americas", year == 2007) %>%
  mutate(country = fct_reorder(country, lifeExp))
```

Using reference lines helps to add context to chart. For example:
```{r life-exp-dots, echo=FALSE, fig.height=6.5, fig.width=6, fig.align='center'}
life_expectancy_dots <- ggplot(gapminder_americas) +
  geom_point(aes(x = lifeExp, y = country),
             color = 'steelblue', size = 2.5) +
  theme_minimal_vgrid(font_size = 18) +
  labs(x = 'Life expectancy (years)',
       y = 'Country')

life_expectancy_dots
```

```{r life-exp-dots-mean, echo=FALSE, fig.height=6.5, fig.width=6, fig.align='center'}
life_expectancy_dots +
  geom_vline(xintercept = mean(gapminder_americas$lifeExp),
             color = 'red', linetype = 'dashed') +
  annotate('text', x = 73.2, y = 'Puerto Rico',
           color = 'red', hjust = 1,
           label = 'Mean Life\nExpectancy')
```

We can even make zero the reference line as shown below:
```{r, echo=FALSE}
gapminder_diverging <- gapminder_americas %>%
    mutate(
        lifeExp = lifeExp - mean(lifeExp),
        color = ifelse(lifeExp > 0, 'Above', 'Below'))
```

```{r life-exp-dots-diverging, echo=FALSE, fig.height=6.5, fig.width=6, fig.align='center'}
ggplot(gapminder_diverging) +
  geom_segment(
    aes(x = 0, xend = lifeExp,
        y = country, yend = country,
        color = color)) +
  geom_point(
    aes(x = lifeExp, y = country,
        color = color),
    size = 2.5) +
  scale_color_manual(values = c('steelblue', 'red')) +
  theme_minimal_vgrid() +
  theme(legend.position = 'none') +
  labs(x = 'Difference from mean life expectancy (years)',
       y = 'Country')
```


```{r life-exp-bars-diverging, echo=FALSE, fig.height=6.5, fig.width=6, fig.align='center'}
ggplot(gapminder_diverging) +
  geom_col(
    aes(x = lifeExp, y = country,
        fill = color),
    width = 0.7, alpha = 0.8) +
  scale_fill_manual(values = c('steelblue', 'red')) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid() +
  theme(legend.position = 'none') +
  labs(x = 'Difference from mean life expectancy (years)',
       y = 'Country')
```

### How to Add a Reference Line

- Add a horizontal line with `geom_hline()`</br>
- Add a vertical line with `geom_vline()`
```{r life-expectancy-dots-line, fig.height=6.5, fig.width=6, fig.align='center'}
ggplot(gapminder_americas) +
  geom_point(
    aes(x = lifeExp, y = country),
    color = 'steelblue', size = 2.5) +
  geom_vline( #<<
    xintercept = mean(gapminder_americas$lifeExp), #<<
    color = 'red', linetype = 'dashed') + #<<
  theme_minimal_vgrid() +
  labs(x = 'Life expectancy (years)',
       y = 'Country')
```

Add text with `annotate()`
```{r, fig.height=6.5, fig.width=6, fig.align='center'}
ggplot(gapminder_americas) +
  geom_point(
    aes(x = lifeExp, y = country),
    color = 'steelblue', size = 2.5) +
  geom_vline(
    xintercept = mean(gapminder_americas$lifeExp),
    color = 'red', linetype = 'dashed') +
  annotate(
    'text', x = 73.2, y = 'Puerto Rico', #<<
    color = 'red', hjust = 1, #<<
    label = 'Mean Life\nExpectancy') + #<<
  theme_minimal_vgrid() +
  labs(x = 'Life expectancy (years)',
       y = 'Country')
```

### How to Make Zero the Reference Point

```{r, eval=FALSE}
gapminder_diverging <- gapminder_americas %>%
    mutate(
        # Subtract the mean
        lifeExp = lifeExp - mean(lifeExp), #<<
        # Define the fill color
        color = ifelse(lifeExp > 0, 'Above', 'Below')) #<<
```

```{r, fig.height=6.5, fig.width=6, fig.align='center'}
ggplot(gapminder_diverging) +
  geom_col(
    aes(x = lifeExp, y = country, fill = color), #<<
    width = 0.7, alpha = 0.8) +
  scale_fill_manual(
    values = c('steelblue', 'red')) + #<<
  theme_minimal_vgrid() +
  theme(legend.position = 'none') +
  labs(
    x = 'Country',
    y = 'Difference from mean life expectancy (years)')
```

## Comparing Variables
<!--
Comparing categories with facets

Comparing two things (dodged bars, slope chart, dumbbell chart)

- dodged comparisons are fine, but really no more than 2 things.
- Finally, overlapping bars are great when you want to show when something exceeds a threshold. E.g. going over your budget.
- Using facets to break up 3-4 groups of 2 is okay.
- A better approach for multiple categories:
    - slope charts
    - dumbbell charts
-->
### Comparing Multiple Categories 

Neither of these two charts are great at clearly comparing multiple categories.
```{r diamonds_bars_stacked, echo=FALSE, fig.height=6}

ggplot(diamonds, aes(clarity, fill=cut, group=cut)) +
    geom_bar(stat="count", position="stack") +
    scale_y_continuous(expand = expand_scale(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```

```{r diamonds_bars_dodged, echo=FALSE, fig.height=6}
ggplot(diamonds, aes(clarity, fill=cut, group=cut)) +
    geom_bar(stat="count", position="dodge") +
    scale_y_continuous(expand = expand_scale(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```

When comparing across multiple categories, consider:

**Parallel coordinates charts**

```{r diamonds-parallel, fig.height=5, fig.width=7}
diamonds %>%
  count(clarity, cut) %>%
  ggplot(
    aes(x = clarity, y = n,
        color = cut, group = cut)) + #<<
  geom_line() +
  geom_point() +
  scale_y_continuous(limits = c(0, 5100)) +
  theme_half_open(font_size = 18) +
  labs(y = "Count")
```

**Or faceting**

```{r diamonds-facet, fig.height=3, fig.width=18}
diamonds %>%
  count(clarity, cut) %>%
  ggplot() +
  geom_col(aes(x = clarity, y = n),
           width = 0.7) +
  facet_wrap(vars(cut), nrow = 1) + #<<
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid(font_size = 16)
```

(Which can also be rearranged as seen below.)
```{r diamonds-facet-ncol, fig.height=8, fig.width=8}
diamonds %>%
  count(clarity, cut) %>%
  mutate(n = n / 1000) %>%
  ggplot() +
  geom_col(aes(x = clarity, y = n),
           width = 0.7) +
  facet_wrap(vars(cut), ncol = 2) + #<<
  coord_flip() + #<<
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid(font_size = 16) + #<<
  labs(y = "Count (thousands)")

```

Below is another example of faceting from [Financial Times](https://www.ft.com/coronavirus-latest)
<center>
<img src="images/ft-coronavirus.jpg" width=700>
</center>

### Comparing Two Things 

When comparing **only 2** things,<br>dodged bars are a good starting point.

```{r milk_compare}
milk_compare <- milk_production %>%
  filter(year %in% c(1970, 2017)) %>%
  mutate(state = fct_other(state,
    keep = c('California', 'Wisconsin'))) %>%
  group_by(year, state) %>%
  summarise(
    milk_produced = sum(milk_produced) / 10^9)
```
```{r, echo=FALSE}
milk_compare
```

```{r milk-compare-dodged, fig.height=5, fig.width=7, fig.align='center'}
ggplot(milk_compare) +
  geom_col(
    aes(x = milk_produced, y = state,
        fill = as.factor(year)),
    width = 0.7, alpha = 0.8,
    position = 'dodge') +
  scale_fill_manual(
      values = c('grey', 'steelblue'),
      guide  = guide_legend(reverse = TRUE)) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid() +
  labs(
    x = 'Milk produced (billion lbs)',
    y = NULL,
    fill = 'Year')
```

**Avoid putting >2 categories in legend (if possible).**

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
<img src="images/check-bad.png" width=80>
```{r milk-compare-dodged-bad, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
ggplot(milk_compare) +
  geom_col(
    aes(x = as.factor(year), y = milk_produced,
        fill = state),
    width = 0.7, alpha = 0.8,
    position = 'dodge') +
  scale_fill_manual(
    values = c('grey', 'steelblue', 'sienna')) +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid(font_size = 16) +
  labs(
    x    = 'Year',
    y    = 'Milk produced (billion lbs)')
```
</div>

<div style="flex: 1; margin-right: 10px;">
<img src="images/check-good.png" width=80>
```{r ref.label='milk-compare-dodged', echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
```
</div>

</div>

**Or use facets to get rid of the legend!**

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
<img src="images/check-bad.png" width=80>
```{r ref.label='milk-compare-dodged-bad', echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
```
</div>

<div style="flex: 1; margin-right: 10px;">
<img src="images/check-good.png" width=80>
```{r milk-compare-dodged-facet, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
ggplot(milk_compare) +
  geom_col(
    aes(x = as.factor(year), y = milk_produced,
        fill = as.factor(year)),
    width = 0.7, alpha = 0.8) +
  scale_fill_manual(values = c('grey', 'steelblue')) +
  facet_wrap(~state) +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid(font_size = 18) +
  panel_border() +
  theme(legend.position = 'none') +
  labs(
    x = 'Year',
    y = 'Milk produced (billion lbs)')
```
</div>

</div>


"Bullet" charts are also effective for comparing **2** things

```{r milk-compare-bullet, fig.height=5.5, fig.width=8, fig.align='center'}
milk_compare %>%
  pivot_wider(
      names_from = year,
      values_from =  milk_produced) %>%
  ggplot() +
  geom_col(
    aes(x = `1970`, y = state, fill = '1970'),
        width = 0.7) +
  geom_col(
    aes(x = `2017`, y = state, fill = '2017'),
        width = 0.3) +
  scale_fill_manual(values = c('grey', 'black')) +
  scale_x_continuous(
      expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid(font_size = 18) +
  labs(
    x = 'Milk produced (billion lbs)',
    y = NULL,
    fill = "Year")
```

While dodged bars are good for comparing 2 things, using them for 2 things across **more than 2** categories can get confusing. Below we are comparing 2 time periods, but across **10** categories.
```{r milk_compare_toomany, echo=FALSE}
top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10)

milk_compare_toomany <- milk_production %>%
  filter(
        year %in% c(1970, 2017),
        state %in% top10states$state) %>%
    mutate(
        milk_produced = milk_produced / 10^9,
        state = fct_reorder(state, milk_produced))
```

```{r milk-compare-dodged-toomany, echo=FALSE, fig.height=6, fig.width=8, fig.align='center'}
ggplot(milk_compare_toomany) +
  geom_col(
    aes(x = milk_produced, y = state,
        fill = as.factor(year)),
    width = 0.7, alpha = 0.8,
    position = 'dodge') +
  scale_fill_manual(
    values = c('grey', 'steelblue'),
    guide  = guide_legend(reverse = TRUE)) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid(font_size = 18) +
  labs(
    x    = 'Milk produced (billion lbs)',
    y    = 'State',
    fill = 'Year')
```

### Comparing 2 Things Across **More Than 2 Categories**

#### Strategies: {.unnumbered}

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
**Dodged bars `r emo::ji("sad")`**
```{r, ref.label="milk-compare-dodged-toomany", echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
```
</div>

<div style="flex: 1; margin-right: 10px;">
**Dumbbell bars `r emo::ji("smile")`**
```{r milk-summary-dumbbell, echo=FALSE}
top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10)

milk_summary_dumbbell <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states$state) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state,
      year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9)
```
```{r milk-dumbbell-chart, echo=FALSE, fig.height=5, fig.width=5.5, fig.align='center'}
ggplot(milk_summary_dumbbell,
       aes(x = milk_produced, y = state)) +
  geom_line(aes(group = state),
            color = 'lightblue', size = 1) +
  geom_point(aes(color = year), size = 2.5) +
  scale_color_manual(values = c('lightblue', 'steelblue')) +
  theme_minimal_vgrid() +
  # Remove y axis line
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()) +
  labs(x = 'Milk produced (billion lbs)',
       y = 'State',
       color = 'Year',
       title = 'Top 10 milk producing states',
       subtitle = "(1970 - 2017)")
```
</div>

</div>

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
**Dodged bars `r emo::ji("sad")`**
```{r, ref.label="milk-compare-dodged-toomany", echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
```
</div>

<div style="flex: 1; margin-right: 10px;">
**Slope chart `r emo::ji("smile")`**
```{r milk-summary-slope, echo=FALSE}
top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10)

milk_summary_slope <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states$state) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state,
      year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9,
    # Define line color
    lineColor = if_else(
      state == 'California', 'CA', 'other'),
    # Make labels
    label = paste(state, ' (',
                  round(milk_produced), ')'),
    label_left = ifelse(year == 1970, label, NA),
    label_right = ifelse(year == 2017, label, NA))
```
```{r milk-slope-chart, echo=FALSE, fig.height=6, fig.width=6, fig.align='center'}
ggplot(milk_summary_slope,
       aes(x = as.factor(year), y = milk_produced,
           group = state)) +
    geom_line(aes(color = lineColor), size = 1) +
    # Add 1970 labels (left side)
    geom_text_repel(aes(label = label_left),
                    hjust = 1, nudge_x = -0.05,
                    direction = 'y',
                    segment.color = 'grey') +
    # Add 2017 labels (right side)
    geom_text_repel(aes(label = label_right),
                    hjust = 0, nudge_x = 0.05,
                    direction = 'y',
                    segment.color = 'grey') +
    # Move year labels to top, modify line colors
    scale_x_discrete(position = 'top') +
    scale_color_manual(values = c('red', 'black')) +
    # Annotate & adjust theme
    labs(x = NULL,
         y = 'Milk produced (billion lbs)',
         title = 'Top 10 milk producing states (1970 - 2017)') +
    theme_minimal_grid() +
    theme(panel.grid  = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks = element_blank(),
          legend.position = 'none')
```
</div>

</div>
---
<div style="display: flex; justify-content: space-between;">
Dumbbell charts highlight:

- Compare **magnitudes** across two periods / groups

```{r ref.label='milk-dumbbell-chart', echo=FALSE, fig.height=6, fig.width=6, fig.align='center'}
```
<div style="flex: 1; margin-right: 10px;">

</div>
Slope charts highlight:

- _Change_ in **rankings**
- Highlight individual categories

```{r ref.label='milk-slope-chart', echo=FALSE, fig.height=6, fig.width=6, fig.align='center'}
```
<div style="flex: 1; margin-right: 10px;">

</div>

</div>

### How to make a **Dumbbell chart**

First, create data frame for plotting.
```{r, eval=FALSE}
top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10)

milk_summary_dumbbell <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states$state) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state,
      year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9)
```

Then, make lines (note the `group` variable).
```{r milk_dumbbell_chart1, fig.height=6, fig.width=6, fig.align='center'}
ggplot(milk_summary_dumbbell,
       aes(x = milk_produced, y = state)) + #<<
  geom_line(aes(group = state), #<<
            color = 'lightblue', size = 1)
```

Add points (note the `color` variable).
```{r milk_dumbbell_chart2, fig.height=6, fig.width=6, fig.align='center'}
ggplot(milk_summary_dumbbell,
       aes(x = milk_produced, y = state)) +
  geom_line(aes(group = state),
            color = 'lightblue', size = 1) +
  geom_point(aes(color = year), size = 2.5) #<<
```

Change the colors:
```{r milk_dumbbell_chart3, fig.height=6, fig.width=6, fig.align='center'}
ggplot(milk_summary_dumbbell,
       aes(x = milk_produced, y = state)) +
  geom_line(aes(group = state),
            color = 'lightblue', size = 1) +
  geom_point(aes(color = year), size = 2.5) +
  scale_color_manual( #<<
      values = c('lightblue', 'steelblue')) #<<
```

Finally, adjust the theme and annotate.
```{r, eval=FALSE}
ggplot(milk_summary_dumbbell,
       aes(x = milk_produced, y = state)) +
  geom_line(aes(group = state),
            color = 'lightblue', size = 1) +
  geom_point(aes(color = year), size = 2.5) +
  scale_color_manual(
      values = c('lightblue', 'steelblue')) +
  theme_minimal_vgrid() + #<<
  # Remove y axis line and tick marks
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank()) + #<<
  labs(x = 'Milk produced (billion lbs)', #<<
       y = 'State', #<<
       color = 'Year', #<<
       title = 'Top 10 milk producing states', #<<
       subtitle = '(1970 - 2017)') #<<
```

```{r ref.label='milk-dumbbell-chart', echo=FALSE, fig.height=6, fig.width=6, fig.align='center'}
```

### How to make a **Slope chart**

First, create data frame for plotting.
```{r, eval=FALSE}
top10states <- milk_production %>%
    filter(year == 2017) %>%
    arrange(desc(milk_produced)) %>%
    slice(1:10)

milk_summary_slope <- milk_production %>%
  filter(
    year %in% c(1970, 2017),
    state %in% top10states$state) %>%
  mutate(
    # Reorder state variables
    state = fct_reorder2(state,
      year, desc(milk_produced)),
    # Convert year to discrete variable
    year = as.factor(year),
    # Modify units
    milk_produced = milk_produced / 10^9,
    # Define line color  #<<
    lineColor = if_else( #<<
      state == 'California', 'CA', 'other'), #<<
    # Make labels #<<
    label = paste(state, ' (', #<<
                  round(milk_produced), ')'), #<<
    label_left = ifelse(year == 1970, label, NA), #<<
    label_right = ifelse(year == 2017, label, NA)) #<<
```

```{r}
milk_summary_slope %>%
    select(state, year, milk_produced, label, lineColor)
```

Then,start with a line plot - note the `group` variable:
```{r milk-slope-chart-1, fig.height=6, fig.width=6, fig.align='center'}
ggplot(milk_summary_slope,
       aes(x = year, y = milk_produced, #<<
           group = state)) + #<<
    geom_line(aes(color = lineColor)) #<<
```

Add labels:
(Use this chart for justification)

Justification | `hjust`
--------------|-------
Right         | 0
Center        | 0.5
Left          | 1

```{r milk-slope-chart-2, fig.height=6, fig.width=6, fig.align='center'}
ggplot(milk_summary_slope,
       aes(x = year, y = milk_produced,
           group = state)) +
    geom_line(aes(color = lineColor)) +
    # Add 1970 labels (left side)
    geom_text(aes(label = label_left), #<<
              hjust = 1, nudge_x = -0.05) + #<<
    # Add 2017 labels (right side)
    geom_text(aes(label = label_right), #<<
              hjust = 0, nudge_x = 0.05) #<<
```

**Overlapping labels?**

<center>
<img src="images/overlapping_labels.png" width = 700>
</center>

#### **ggrepel** library to the rescue! {.unnumbered}

<center>
<img src="images/horst_monsters_ggrepel.jpg" width=700>
</center>
Artwork by [@allison_horst](https://twitter.com/allison_horst)

Now we can align labels so they don't overlap:
```{r milk-slope-chart-3, fig.height=6, fig.width=7, fig.align='center'}
library(ggrepel) #<<

ggplot(milk_summary_slope,
       aes(x = year, y = milk_produced,
           group = state)) +
    geom_line(aes(color = lineColor)) +
    # Add 1970 labels (left side)
    geom_text_repel( #<<
      aes(label = label_left),
      hjust = 1, nudge_x = -0.05,
      direction = 'y', segment.color = 'grey') + #<<
    # Add 2017 labels (right side)
    geom_text_repel( #<<
      aes(label = label_right),
      hjust = 0, nudge_x = 0.05,
      direction = 'y', segment.color = 'grey') #<<
```

Adjust colors:
```{r milk-slope-chart-4, fig.height=6, fig.width=7, fig.align='center'}
ggplot(milk_summary_slope,
       aes(x = year, y = milk_produced,
           group = state)) +
    geom_line(aes(color = lineColor)) +
    geom_text_repel(
      aes(label = label_left),
      hjust = 1, nudge_x = -0.05,
      direction = 'y', segment.color = 'grey') +
    geom_text_repel(
      aes(label = label_right),
      hjust = 0, nudge_x = 0.05,
      direction = 'y', segment.color = 'grey') +
    # Move year labels to top, modify line colors
    scale_x_discrete(position = 'top') + #<<
    scale_color_manual(values = c('red', 'black')) #<<
```

Adjust the theme and annotate:
```{r, fig.height=6, fig.width=6, fig.align='center'}
ggplot(milk_summary_slope,
       aes(x = year, y = milk_produced,
           group = state)) +
    geom_line(aes(color = lineColor)) +
    # Add 1970 labels (left side)
    geom_text_repel(
      aes(label = label_left),
      hjust = 1, nudge_x = -0.05,
      direction = 'y', segment.color = 'grey') +
    # Add 2017 labels (right side)
    geom_text_repel(aes(label = label_right),
      hjust = 0, nudge_x = 0.05,
      direction = 'y', segment.color = 'grey') +
    # Move year labels to top, modify line colors
    scale_x_discrete(position = 'top') +
    scale_color_manual(values = c('red', 'black')) +
    # Annotate & adjust theme
    labs(x = NULL,
         y = 'Milk produced (billion lbs)',
         title = 'Top 10 milk producing states (1970 - 2017)') +
    theme_minimal_grid() + #<<
    theme(panel.grid  = element_blank(), #<<
          axis.text.y = element_blank(), #<<
          axis.ticks = element_blank(), #<<
          legend.position = 'none') #<<
```

## Comparing Distributions
<!-- Comparing distributions

- Box plots
- Transparent histograms & densities (good for maybe 2 categories)
- Ridgeline plots (good for lots of categories)

Ridgeline plots: https://wilkelab.org/ggridges/ -->

<!-- Helpful:
https://datavizf17.classes.andrewheiss.com/files/example_2017-09-19.Rmd -->

Overlapping histograms tend to have issues.

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
**Bad**
```{r marathon_histogram_overlap, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
ggplot(marathon) +
  geom_histogram(aes(x = Age, fill = `M/F`),
                 alpha = 0.7, color = 'white',
                 position = 'identity') +
  scale_fill_manual(values = c('sienna', 'steelblue')) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid()
```
</div>

<div style="flex: 1; margin-right: 10px;">
**Slightly better**
```{r marathon_density_overlap, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
ggplot(marathon, aes(x = Age, y = ..count..)) +
  geom_density(aes(fill = `M/F`), alpha = 0.7) +
  scale_fill_manual(values = c('sienna', 'steelblue')) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid()
```
</div>

</div>

Charts good for overlapping when the number of categories is **small**:

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
**Density facets**
```{r marathon_density_facet, echo=FALSE, fig.height=3, fig.width=7, fig.align='center'}
base <- ggplot(marathon, aes(x = Age, y = ..count..)) +
  geom_density(fill = 'grey', alpha = 0.7) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_hgrid()

male <- base +
  geom_density(data = marathon %>% filter(`M/F` == 'M'),
               aes(fill = `M/F`), alpha = 0.7) +
  scale_fill_manual(values = 'steelblue') +
  theme(legend.position = 'none')

female <- base +
  geom_density(data = marathon %>% filter(`M/F` == 'F'),
               aes(fill = `M/F`), alpha = 0.7) +
  scale_fill_manual(values = 'sienna') +
  theme(legend.position = 'none')

plot_grid(male, female, labels = c('Male', 'Female'))
```
</div>

<div style="flex: 1; margin-right: 10px;">
**Diverging histograms**
```{r marathon_diverging_histograms, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
ggplot(marathon, aes(x = Age)) +
    # Add histogram for Female runners:
    geom_histogram(data = marathon %>%
                       filter(`M/F` == 'F'),
                   aes(fill = `M/F`, y=..count..),
                   alpha = 0.7, color = 'white') +
    # Add negative histogram for Male runners:
    geom_histogram(data = marathon %>%
                       filter(`M/F` == 'M'),
                   aes(fill = `M/F`, y=..count..*(-1)),
                   alpha = 0.7, color = 'white') +
    scale_fill_manual(values = c('sienna', 'steelblue')) +
    coord_flip() +
    theme_minimal_hgrid() +
    labs(fill = 'Gender',
         y = 'Count')
```
</div>

</div>

Charts good for overlapping when the number of categories is **large**:

<div style="display: flex; justify-content: space-between;">

<div style="flex: 1; margin-right: 10px;">
**Boxplot**
```{r college_boxplot, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
college_summary <- college_all_ages %>%
    mutate(
        major_category = fct_reorder(major_category, median))

ggplot(college_summary) +
    geom_boxplot(aes(x = major_category, y = median)) +
    coord_flip() +
    theme_minimal_vgrid() +
    labs(x = 'Major category',
         y = 'Median income ($)')
```
</div>

<div style="flex: 1; margin-right: 10px;">
**Ridgeplot**
```{r college_ridgeplot, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
ggplot(college_summary) +
  geom_density_ridges(aes(x = median, y = major_category),
                      scale = 4, alpha = 0.7) +
  scale_y_discrete(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) +
  coord_cartesian(clip = "off") +
  theme_ridges() +
  labs(x = 'Median income ($)',
       y = 'Major category')
```
</div>

</div>

### How to make density facets

You can use `facet_wrap()`, but you won't get the full density overlay.
```{r density_facet_nofull, fig.height=3, fig.width=7, fig.align='center'}
ggplot(marathon,
       aes(x = Age, y = ..count..,
           fill = `M/F`)) +
    geom_density(alpha = 0.7) + #<<
    facet_wrap(vars(`M/F`)) + #<<
    scale_fill_manual(
        values = c('sienna', 'steelblue')) +
    scale_y_continuous(
        expand = expansion(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```


If you want the full density overlay, you have to hand-make the facets.
```{r ref.label='marathon_density_facet', echo=FALSE, fig.height=3, fig.width=7, fig.align='center'}
```

Make the full density plot first.
```{r}
base <- ggplot(marathon,
               aes(x = Age, y = ..count..)) + #<<
    geom_density(fill = 'grey', alpha = 0.7) + #<<
    scale_y_continuous(
        expand = expansion(mult = c(0, 0.05))) +
    theme_minimal_hgrid()
```
```{r density_facet_base, echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
base
```

Then, separately create each sub-plot.
```{r}
male <- base +
  geom_density(
    data = marathon %>% #<<
      filter(`M/F` == 'M'), #<<
    fill = 'steelblue', alpha = 0.7) +
  theme(legend.position = 'none')
```

```{r density_facet_male, echo=FALSE, fig.height=3, fig.width=4, fig.align='center'}
male
```

```{r}
female <- base +
  geom_density(
    data = marathon %>% #<<
      filter(`M/F` == 'F'), #<<
    fill = 'sienna', alpha = 0.7) +
  theme(legend.position = 'none')
```

```{r density_facet_female, echo=FALSE, fig.height=3, fig.width=4, fig.align='center'}
female
```

Lastly, combine the subplots into a single plot.
```{r, fig.height=4, fig.width=11, fig.align='center'}
plot_grid(male, female,
          labels = c('Male', 'Female'))
```

### How to make diverging histograms

Make the histograms by filtering the data.

```{r marathon_diverging_histograms1, fig.height=5, fig.width=7, fig.align='center'}
ggplot(marathon, aes(x = Age)) +
    # Add histogram for Female runners:
    geom_histogram(
      data = marathon %>% #<<
        filter(`M/F` == 'F'), #<<
      aes(fill = `M/F`, y=..count..),
      alpha = 0.7, color = 'white') +
    # Add negative histogram for Male runners:
    geom_histogram(
      data = marathon %>% #<<
        filter(`M/F` == 'M'), #<<
      aes(fill = `M/F`, y=..count..*(-1)),
      alpha = 0.7, color = 'white')
```

Rotate, adjust colors, theme, annotate:

```{r, eval=FALSE}
ggplot(marathon, aes(x = Age)) +
    # Add histogram for Female runners:
    geom_histogram(
      data = marathon %>%
        filter(`M/F` == 'F'),
      aes(fill = `M/F`, y=..count..),
      alpha = 0.7, color = 'white') +
    # Add negative histogram for Male runners:
    geom_histogram(
      data = marathon %>%
        filter(`M/F` == 'M'),
      aes(fill = `M/F`, y=..count..*(-1)),
      alpha = 0.7, color = 'white')
    scale_fill_manual( #<<
        values = c('sienna', 'steelblue')) +
    coord_flip() + #<<
    theme_minimal_hgrid() + #<<
    labs(fill = 'Gender', #<<
         y    = 'Count') #<<
```

```{r ref.label='marathon_diverging_histograms', echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
```

### How to make ridgeplots

Make a ridgeplot with **ggridges** library.

```{r, eval=FALSE}
library(ggridges) #<<

college_all_ages %>%
  mutate(
    major_category = fct_reorder(
      major_category, median)) %>%
  ggplot() +
  geom_density_ridges( #<<
    aes(x = median, y = major_category), #<<
    scale = 4, alpha = 0.7) + #<<
  scale_y_discrete(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) +
  coord_cartesian(clip = "off") +  #<<
  theme_ridges() +  #<<
  labs(x = 'Median income ($)',
       y = 'Major category')
```

```{r ref.label='college_ridgeplot', echo=FALSE, fig.height=5, fig.width=7, fig.align='center'}
```
