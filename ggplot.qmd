# Ggplot Basics {#sec-chapter}

```{r}
#| echo: false
#| message: false
#| include: false

suppressWarnings(suppressMessages(source("_common.R")))
```

> ### Learning Objectives {.unnumbered}
>
> * Learn the functions necessary to import various file types.
> * Understand the basic features of ggplot.
> * Create plots from data in a dataframe. 
> * Make basic customizations to ggplot figures. 
> * Create simple scatterplots and histograms.

## Reading in Data

Use the `here` package to create file paths

```{r, eval=FALSE}
path <- here::here("folder", "file.csv")
```

Import data with these functions:

File type  | Function       | Library
-----------|----------------|----------
`.csv`     | `read_csv()`   | **readr**
`.txt`     | `read.table()` | **utils**
`.xlsx`    | `read_excel()` | **readxl**

#### Importing Comma Separated Values (.csv)

Read in `.csv` files with `read_csv()`:

```{r}
library(tidyverse)
library(here)

csvPath <- here('data', 'milk_production.csv')
milk_production <- read_csv(csvPath)

head(milk_production)
```

#### Importing Text Files (.txt)

Read in `.txt` files with `read.table()`:

```{r}
txtPath <- here('data', 'nasa_global_temps.txt')
global_temps <- read.table(txtPath, skip = 5, header = FALSE)

head(global_temps)
```

#### Importing Text Files (.txt)

Read in `.txt` files with `read.table()`:

```{r}
txtPath <- here('data', 'nasa_global_temps.txt')
global_temps <- read.table(txtPath, skip = 5, header = FALSE)
names(global_temps) <- c('year', 'no_smoothing', 'loess') # Add header

head(global_temps)
```

#### Importing Excel Files (.xlsx)

Read in `.xlsx` files with `read_excel()`:

```{r}
library(readxl)

xlsxPath <- here('data', 'pv_cell_production.xlsx')
pv_cells <- read_excel(xlsxPath, sheet = 'Cell Prod by Country', skip = 2)
```

```{r}
glimpse(pv_cells)
```

## Basic plots in R

R has a number of built-in tools for basic graph types. Let's start with two basic functions for scatter plots and histograms.

### Scatter plots with `plot()`

A scatter plot provides a graphical view of the relationship between two variables. Typically these are used for "continuous" variables, like _time_, _age_, _money_, etc...things that are not categorical in nature (as opposed to "discrete" variables, like _nationality_). Here's a scatterplot of the fuel efficiency (miles per gallon) of cars over their respective horsepower using the `mtcars` dataset:

```{r}
#| label: 'scatter-basic'
#| fig.height: 5
#| fig.width: 6

plot(x = mtcars$hp, y = mtcars$mpg)
```

The basic inputs to the `plot()` function are `x` and `y`, which must be vectors of the same length. You can customize many features (fonts, colors, axes, shape, titles, etc.) through [graphic options](http://www.statmethods.net/advgraphs/parameters.html). Here's the same plot with a few customizations:

```{r}
#| label: 'scatter-basic-pretty'
#| fig.height: 5
#| fig.width: 6

plot(
  x    = mtcars$hp,
  y    = mtcars$mpg,
  col  = 'darkblue', # "col" changes the point color
  pch  = 19, # "pch" changes the point shape
  main = "",
  xlab = "Horsepower",
  ylab = "Miles Per Gallon"
)
```

From this scatter plot, we can observe the relationship between a car's horsepower and its fuel efficiency. As you may have guessed, cars with more horsepower or more powerful engines have less fuel efficiency.

### Histograms with `hist()`

The [histogram](https://en.wikipedia.org/wiki/Histogram) is one of the most common ways to visualize the _distribution_ of a variable. The `hist()` function takes just one variable: `x`. Here's a histogram of the `waiting` variable showing the wait times between eruptions of the Old Faithful geyser:

```{r}
#| label: 'hist-basic'
#| fig.height: 5
#| fig.width: 6

hist(x = faithful$waiting)
```

With this plot, we can see a trend where the geyser mostly erupts in roughly 50 or 80 minute intervals. As with the `plot()` function, you can customize a lot of the histogram features. One common customization is to modify the number of "bins" in the histogram by changing the `breaks` argument. Here we'll fix the number of bins to `20` to get a clearer look at the data:

```{r}
#| label: 'hist-basic-pretty'
#| fig.height: 5
#| fig.width: 6

hist(
  x      = faithful$waiting,
  breaks = 20,
  col    = 'lightblue3',
  main   = "Waiting Times Between Eruptions",
  xlab   = "Waiting Time (in minutes)",
  ylab   = "Count"
)
```

With our changes, the chart is cleaner and it is clearer which waiting times the were most common.

## Advanced figures with `ggplot2`

![](images/horst_monsters_ggplot2.png){ width=500 }
[Art by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)]{.aside}

While Base R plot functions are useful for making simple, quick plots, many R users have adopted the `ggplot2` package as their primary tool for visualizing data.


## Layering with ggplot

#### "Grammar of Graphics"

The ggplot2 library is built on the “Grammar of Graphics” concept developed by Leland Wilkinson (1999). A “grammar of graphics” (that’s what the “gg” in “ggplot2” stands for) is a framework that uses layers to describe and construct visualizations or graphics in a structured manner. Here’s a visual summary of the concept:

<center>
<img src="images/making_a_ggplot.jpeg" width=600>
</center>

**ggplot2** package developed by Hadley Wickham (2005)

#### Making plot layers with ggplot2

##### 1. The data
##### 2. The aesthetic mapping (what goes on the axes?)
##### 3. The geometries (points? bars? etc.)
##### 4. The annotations / labels
##### 5. The theme

#### Layer 1: The data

```{r}
head(mpg)
```

The `ggplot()` function initializes the plot with whatever data you're using

```{r}
#| label: ggblank
#| fig.height: 5
#| fig.width: 7

mpg %>% 
  ggplot()
```

#### Layer 2: The aesthetic mapping

The `aes()` function determines which variables will be _mapped_ to the geometries<br>(e.g. the axes)

```{r}
#| label: ggaes
#| fig.height: 5
#| fig.width: 7

mpg %>% 
  ggplot(aes(x = displ, y = hwy))
```

#### Layer 3: The geometries

Use `+` to add geometries, e.g. `geom_points()` for points

```{r}
#| label: ggpoint
#| fig.height: 5
#| fig.width: 7

mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point()
```

#### Layer 4: The annotations / labels

Use `labs()` to modify most labels

```{r}
#| label: gglabs
#| fig.height: 5
#| fig.width: 7

mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  labs(
    x = "Engine displacement (liters)",
    y = "Highway fuel economy (mpg)",
    title = "Most larger engine vehicles are less fuel efficient"
  )
```

#### Layer 5: The theme

```{r}
#| label: ggtheme_bw
#| fig.height: 5
#| fig.width: 7

mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  labs(
    x = "Engine displacement (liters)",  
    y = "Highway fuel economy (mpg)", 
    title = "Most larger engine vehicles are less fuel efficient"
  ) + 
  theme_bw()
```

##### Common themes

`theme_bw()`

```{r}
#| label: ggtheme_bw2
#| fig.height: 4
#| fig.width: 6

mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  theme_bw()
```

`theme_minimal()`

```{r}
#| label: ggtheme_minimal
#| fig.height: 4
#| fig.width: 6

mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  theme_minimal()
```

`theme_classic()`

```{r}
#| label: ggtheme_classic
#| fig.height: 4
#| fig.width: 6

mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  theme_classic()
```

`theme_void()`

```{r}
#| label: ggtheme_void
#| fig.height: 4
#| fig.width: 6

mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  theme_void()
```

## Making a (good) ggplot

1. Format data frame
2. Add geoms
3. Flip coordinates?
4. Reorder factors?
5. Adjust scales
6. Adjust theme
7. Annotate

#### 1) Format data frame

```{r}
# Format the data frame
wildlife_impacts %>%
  count(operator)
```

#### 2) Add geoms

```{r}
#| label: birds_before
#| fig.height: 4
#| fig.width: 6

# Format the data frame
wildlife_impacts %>%
  count(operator) %>%

# Add geoms
ggplot() +
  geom_col(
    aes(x = operator, y = n),
    width = 0.7, alpha = 0.8
  )
```

#### 3) Flip coordinates - can you read the labels?

```{r}
#| label: birds_coord_flip
#| fig.height: 4
#| fig.width: 6

# Format the data frame
wildlife_impacts %>%
  count(operator) %>%

# Add geoms
 ggplot() +
  geom_col(
      aes(x = operator, y = n),
      width = 0.7, alpha = 0.8) +

# Flip coordinates
  coord_flip()
```

```{r}
#| label: birds_coord_flip2
#| fig.height: 4
#| fig.width: 6

# Format the data frame
wildlife_impacts %>%
  count(operator) %>%

# Add geoms
ggplot() +
  geom_col(
    aes(x = n, y = operator),
    width = 0.7, alpha = 0.8
  )
```

#### 4) Reorder factors with `reorder()`

```{r}
#| label: birds_fct_reorder
#| fig.height: 4
#| fig.width: 6

wildlife_impacts %>%
  count(operator) %>%

# Add geoms
ggplot() +
  geom_col(
      aes(x = n, y = reorder(operator, n)),
      width = 0.7, alpha = 0.8)
```

#### 5) Adjust scales

```{r}
#| label: birds_scales1
#| fig.height: 4
#| fig.width: 6

# Format the data frame
wildlife_impacts %>%
  count(operator) %>%

# Add geoms
ggplot() +
  geom_col(
      aes(x = n, y = reorder(operator, n)),
      width = 0.7, alpha = 0.8) +

# Adjust x axis scale
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05)))
```

##### Customize break points (if you want)

```{r}
#| label: birds_scales2
#| fig.height: 4
#| fig.width: 6

# Format the data frame
wildlife_impacts %>%
  count(operator) %>%

# Add geoms
ggplot() +
  geom_col(
      aes(x = n, y = reorder(operator, n)),
      width = 0.7, alpha = 0.8) +

# Adjust x axis scale
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05)),
    breaks = c(0, 10000, 20000),
    limits = c(0, 20000))
```

#### 6) Adjust theme

##### Four `cowplot` themes you should know

<center>
<img src="images/cowplot_themes.png" width=700>
</center>

For horizontal bars, add only vertical grid

```{r}
#| label: birds_theme
#| fig.height: 4
#| fig.width: 6

# Format the data frame
wildlife_impacts %>%
  count(operator) %>%

# Add geoms
  ggplot() +
  geom_col(
      aes(x = n, y = reorder(operator, n)),
      width = 0.7, alpha = 0.8) +

# Adjust x axis scale
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +

# Adjust theme
  theme_minimal_vgrid()
```

#### 7) Annotate

```{r}
#| label: birds_annotate
#| fig.height: 4
#| fig.width: 6

# Format the data frame
wildlife_impacts %>%
  count(operator) %>%
  mutate(operator = str_to_title(operator)) %>%

# Add geoms
  ggplot() +
  geom_col(
      aes(x = n, y = reorder(operator, n)),
      width = 0.7, alpha = 0.8) +

# Adjust x axis scale
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +

# Adjust theme
  theme_minimal_vgrid() +

# Annotate
  labs(
    x = 'Count',
    y = NULL)
```

#### Finished product

```{r}
#| label: birds_after
#| fig.height: 4
#| fig.width: 6

wildlife_impacts %>%
  count(operator) %>%
  mutate(operator = str_to_title(operator)) %>%
  ggplot() +
  geom_col(
      aes(x = n, y = reorder(operator, n)),
      width = 0.7, alpha = 0.8) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.05))) +
  theme_minimal_vgrid() +
  labs(
    x = 'Count',
    y = NULL)
```
